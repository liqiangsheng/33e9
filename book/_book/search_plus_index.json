{"Explain.html":{"url":"Explain.html","title":"说明","keywords":"","body":"云屋视频SDK参考 此版本适合v3.1版本的SDK 说明 会议SDK结构、SDK开发流程、SDK浏览器开发环境。CloudroomVideo SDK for Web支持的浏览器有：IE8,IE9,IE10,IE11，chrome44及以下(包含chrome44)。 sdk说明 doc(文档说明文件夹） fonts scripts styles callback.js.html CloudroomVideoSDK for Web开发指南.docx（web端开发指南） CRMeet.CbProxy.html CRVideo.CbProxy.html CRVideo.Container.html CRVideo.MediaContainer.html CRVideo.ScreenShareContainer.html CRVideo.VideoContainer.html error.js.html global.html index.html（入口文件） init.js.html live.js.html module-cr_callback.html module-cr_error.html examples(四个demo案例文件夹) Meeting(web)（会议demo） RecordDemo(web)（本地双录demo） RemoteRecordDemo(web)（远程双录demo） VideoCall(web)（视频会议demo） js CloudroomVideoSDK.js（js sdk文件） CloudroomVideoSDK.min.js（js sdk压缩文件） CloudroomVideoSDK_iePatch.js（ie8专用js sdk文件） CloudroomVideoSDK.exe（客户端插件） history.txt（历史版本文件） readme.txt（readme文件 开发准备 JavaScript 的开发工具有很多，开发者可根据自己的喜好进行选择。在此，我们推荐开发者使用 dreamwaver 作为自己的开发工具，本套开发指南也是针对 dreamwaver 开发环境下进行编写的。 安装插件 首先要安装开发插件，CloudroomVideo SDK for Web 提供的所有 JavaScript 接口都是基于这个插件实现，进行web开发之前需要确保插件已经安装成功，双击SDK目录下的开发环境下进行编写的。 选择安装 插件会自动开始安装 完成安装 导入SDK文件 将SDK包js子目录下的CloudroomVideoSDK.js和CloudroomVideoSDK_iePatch.js文件拷贝到自己的web开发环境当中 引用CloudroomVideoSDK.js 如果是IE开发，还需要引用补丁文件 浏览器版本的支持说明 Cloudroom SDK支持chrome 44及以下版本（chrome45版本后不再支持npapi插件），chrome 42以上版本缺省不支持插件，需要手工打开，打开方式如下： 一：在chrome浏览器输入“chrome://flags” 二：启用 三：在chrome浏览器输入“chrome://plugins” 四：找到“CloudroomVideoSDK”，“启用”并勾选“始终允许运行” 五：重启浏览器 基本流程 流程1：（不登录，只参加会议）SDK初始化 -> 设置服务器地址->（参会）-> 反初始化 流程2：（登录后拥有身份，可进行“排队、呼叫、创建会议、参会”等业务）SDK初始化 -> 设置服务器地址-> 登录 ->（排队、呼叫、创建会议、参会）-> 注消 -> 反初始化 SDK初始化 其中oemID为向云屋科技申请的代理商ID，初始化失败会返回对应的错误码 成功返回 SDK反初始化 设置服务器地址   支持单个服务器地址（如：www.cloudroom.com）或多个服务器地址串（如：www.cloudroom.com:8080;183.60.47.52:8080;）,此接口并不会对服务器地址的有效性进行验证，请保证地址准确。 登录   登录会有结果事件通知，成功事件CRVideo_LoginSuccess，失败事件CRVideo_LoginFail，失败事件的错误码参见CloudroomVideoSDK.js文件的详细描述。 注销   退出程序时，必须注销本次登录，然后再进行SDK反初始化操作 呼叫和排队   CloudroomVideo SDK for Web为开发者提供呼叫、排队功能。   SDK目录的examples/VideoCall(web)文件夹为视频呼叫的demo。这个demo主要展示的某坐席用户服务于某个队列，系统把这个队列里的排队用户分配给此坐席用户，经过一系列握手之后，再进行视频通话的功能。 业务流程说明 坐席客户:初始化SDK->登录->取得队列信息->服务于某个队列->接受某个排队用户->创建会议->呼叫排队用户->进入会议->音视频通话->挂断/被挂断->停止服务->注销->卸载SDK 排队客户:初始化SDK->取得队列信息->排队于某个队列->接受呼叫->进入会议->音视频通话->挂断/被挂断->注销->卸载SDK 时序图 坐席客户与排队客户通讯的时序图如下所示:   坐席客户在接受排队用户时，需要创建一个会议，创建成功后把排队用户呼叫进会议中，再进行后面的业务功能操作。用户与用户之间的各种通信功能，如音视频通话，屏幕共享，影音共享等等，必须依托于会议存在。后面还会对会议功能有更详细的说明。 注意事项 A.队列不能由SDK创建，应在Web上先配好; B.一个客服可以服务多个队列，但一个客户只在一个队列排队； C.多个坐席客户可同时服务于一个队列; D.队列有优先级，客服服务多个队列时，将从高优先级的队列服务起。（不同优先级的客户可以通过排队不同队列来实现。 这样比在一个队列插队好，不会引起其他排队用户等待数增加） 会议   CloudroomVideo SDK for Web为开发者提供的音视频通信功能，屏幕共享，影音共享等功能，须在会议里进行。 业务流程说明 创建一个会议:初始化SDK->登录->创建会议->其他用户参加会议->音视频通话、屏幕共享、影音共享等->离开会议->注销->卸载SDK 参加一个会议：(此处用户未登录参会，实际上登录也可参会)初始化SDK->根据会议号加入一个会议->音视频通话、屏幕共享、影音共享等->离开会议->卸载SDK 时序图 一次完整的会议时序图如下所示: 注意事项 A.在SDK初始化且登录会议成功后，才能进行各种会议功能。 B.如果只是参会，可以不登录；（如上图参会者） C.离开会议是没有响应消息的（在网络不通时离开会议也不会退不出去），但“结束会议”时有响应的, 只有收到结束成功消息，才真正算结束成功了。 音视频通讯   CloudroomVideo SDK for Web为开发者提供便捷的音视频通讯接口，通过以下几步的操作，可以在会议中集成音视频交互功能。音视频通讯需在会议里进行。 参会人信息   会议里可以通过接口CRVideo_GetAllMembers获取当前参加会议的所有成员的详细信息，接口如下所示：   会议里可以通过接口CRVideo_GetMemberInfo获取指定成员的详细信息，接口如下所示： 打开音频 先可以通过接口CRVideo_SetAudioCfg设置本地的音频参数，接口如下所示： 通过接口CRVideo_SetMicVolume设置麦克风的音量大小，接口如下所示： 通过接口CRVideo_OpenMic和CRVideo_CloseMic打开和关闭自已或他人的麦克风，接口如下所示： (取得用户麦克风是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 打开视频 计算机可拥有多个摄像头，通过接口CRVideo_GetVideoDevices获取指定用户的视频设备列表(CRVideo_VideoDeviceInfo:用户ID,设备id,设备名称)，接口如下所示： 通过接口CRVideo_SetDefaultVideo设置指定用户的默认摄像头，接口如下所示: 通过接口CRVideo_SetVideoCfg配置视频的清晰度、帧率、码率等； 通过接口CRVideo_OpenVideo和CRVideo_CloseVideo开启或关闭指定用户的摄像头，接口如下所示： (取得用户摄像头是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 会议录制 参会过程中可将视频、音频录制成视频。   先通过接口CRVideo_StartRecord开启录制，参数说明请参考截图，接口如下所示：   再通过接口CRVideo_SetRecordVideos，配置录制的视频内容；   可以通过接口CRVideo_StopRecord停止录制，接口如下所示： 其他接口   更多的功能接口，请参考SDK目录的doc文件夹。如图所示，打开doc文件夹下的index.html。 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:19 "},"./":{"url":"./","title":"Demo说明","keywords":"","body":"Demo说明 aaaaaaaaaaa © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 17:36:10 "},"IntegratedGuide.html":{"url":"IntegratedGuide.html","title":"集成指南","keywords":"","body":"集成指南 CloudroomMeetingSDK是由众多的DLL组合而成，对外提供有四个控件：   a.CloudroomMeeting   b.VideoUI   c.ScreenShareUI   d.MediaUI CloudroomMeeting CLSID: {BDEB623E-D629-49d5-AE39-5B43E7572A62}; ProgID: npCloudroomMeetingSDK.ScreenShareUI; MIME TYPE: application/x-cloudroom-meetingsdk; CloudroomMeeting是核心控件，它实现会议的基础功能; 一个进程内只能创建一个实例，直到应用退出时才反初始化并销毁; CloudroomMeeting控件使用过程主要包括: a.创建控件实例，执行初始化; b.登录; c.通话; VideoUI CLSID: {5872A9E0-2401-4abb-B75A-D6F361099C81}; ProgID: npCloudroomMeetingSDK.VideoUI; MIME TYPE: application/x-cloudroom-videoui; VideoUI是视频显示控件，它显示设定的用户的视频; VideoUI可以创建多个实例，然后分别配置大小、位置并设置要显示的用户ID即可; 也可以不使用VideoUI控件，而是接收CloudroomMeeting的notifyVideoData事件，然后使用CloudroomMeeting的getVideoImg接口来获取图像，自已实现显示功能;  注意：CloudroomMeetingSDK视频统一采用16:9的尺寸编码，为了保证显示的图像不变形，请尽量保证VideoUI的宽高比为16:9。 ScreenShareUI CLSID: {CLSID: {11A191A8-4E28-4952-99F6-D5CBC862FEB4}; ProgID: ProgID: npCloudroomMeetingSDK.ScreenShareUI; MIME TYPE: application/x-cloudroom-screenshareui; ScreenShareUI是屏幕共享显示控件，它用于显示对方共享的屏幕图像； 也可以不使用ScreenShareUI控件，而是接收CloudroomMeeting的notifyScreenShareData事件，然后使用CloudroomMeetig的getShareScreenDecodeImg接口来获取图像，自已实现显示功能; MediaUI CLSID: {8344A9F9-EBC1-4A27-B20D-A100D68ACC7B}; ProgID: npCloudroomMeetingSDK.MediaUI; MIME TYPE: application/x-cloudroom-mediaui; MediaUI是影音显示控件，它用于显示自己或者对方播放的影音图像; 可以创建多个影音控件，但显示的都是当前播放的影音内容，影音控制接口由CloudroomMeetig统一提供 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:22 "},"Constant.html":{"url":"Constant.html","title":"常量定义","keywords":"","body":"常量定义 相关数值及含义定义 错误代码含义 CRVIDEOSDK_ERR_DEF 代码 数值 含义 CRVIDEOSDK_NOERR 0 没有错误 CRVIDEOSDK_UNKNOWERR 1 未知错误 CRVIDEOSDK_OUTOF_MEM 2 内存不足 CRVIDEOSDK_INNER_ERR 3 sdk内部错误 CRVIDEOSDK_MISMATCHCLIENTVER 4 不支持的sdk版本 CRVIDEOSDK_MEETPARAM_ERR 5 参数错误 CRVIDEOSDK_ERR_DATA 6 无效数据 CRVIDEOSDK_ANCTPSWD_ERR 7 帐号密码不正确 CRVIDEOSDK_SERVER_EXCEPTION 8 服务异常 CRVIDEOSDK_LOGINSTATE_ERROR 9 登录状态错误 CRVIDEOSDK_USER_BEEN_KICKOUT 10 登录用户被踢下线 CRVIDEOSDK_NETWORK_INITFAILED 200 网络初始化失败 CRVIDEOSDK_NO_SERVERINFO 201 没有服务器信息 CRVIDEOSDK_NOSERVER_RSP 202 服务器没有响应 CRVIDEOSDK_CREATE_CONN_FAILED 203 创建连接失败 CRVIDEOSDK_SOCKETEXCEPTION 204 socket异常 CRVIDEOSDK_SOCKETTIMEOUT 205 网络超时 CRVIDEOSDK_FORCEDCLOSECONNECTION 206 连接被关闭 CRVIDEOSDK_CONNECTIONLOST 207 连接丢失 CRVIDEOSDK_QUE_ID_INVALID 400 队列ID错误 CRVIDEOSDK_QUE_NOUSER 401 没有用户在排队 CRVIDEOSDK_QUE_USER_CANCELLED 402 排队用户已取消 CRVIDEOSDK_QUE_SERVICE_NOT_START 403 队列服务还未开启 CRVIDEOSDK_ALREADY_OTHERQUE 404 已在其它队列排队(客户只能在一个队列排队) CRVIDEOSDK_INVALID_CALLID 600 无效的呼叫ID CRVIDEOSDK_ERR_CALL_EXIST 601 已在呼叫中 CRVIDEOSDK_ERR_BUSY 602 对方忙 CRVIDEOSDK_ERR_OFFLINE 603 对方不在线 CRVIDEOSDK_ERR_NOANSWER 604 对方无应答 CRVIDEOSDK_ERR_USER_NOT_FOUND 605 用户不存在 CRVIDEOSDK_ERR_REFUSE 606 对方拒接 CRVIDEOSDK_MEETNOTEXIST 800 没有会议不存在或已结束错误 CRVIDEOSDK_AUTHERROR 801 会议密码不正确 CRVIDEOSDK_MEMBEROVERFLOWERROR 802 会议终端数量已满（购买的license不够) CRVIDEOSDK_RESOURCEALLOCATEERROR 803 分配会议资源失败 CRVIDEOSDK_MEETROOMLOCKED 804 会议已加锁 CRVIDEOSDK_CATCH_SCREEN_ERR 900 抓屏失败 CRVIDEOSDK_RECORD_MAX 901 单次录制达到最大时长(8h) CRVIDEOSDK_RECORD_NO_DISK 902 磁盘空间不够 CRVIDEOSDK_SENDFAIL 1000 发送失败 CRVIDEOSDK_CONTAIN_SENSITIVEWORDS 1001 有敏感词语 CRVIDEOSDK_SENDCMD_LARGE 1100 发送信令数据过大 CRVIDEOSDK_SENDBUFFER_LARGE 1101 发送数据过大 CRVIDEOSDK_SENDDATA_TARGETINVALID 1102 目标用户不存在 CRVIDEOSDK_SENDFILE_FILEINERROR 1103 文件错误 CRVIDEOSDK_TRANSID_INVALID 1104 无效的发送id CRVIDEOSDK_RECORDFILE_STATE_ERR 1200 状态错误不可上传/取消上传 CRVIDEOSDK_RECORDFILE_NOT_EXIST 1201 录制文件不存在 麦克风状态 ASTATUS 代码 数值 含义 AUNKNOWN 0 音频状态未知 ANULL 1 没有麦克风设备 ACLOSE 2 麦克风处于关闭状态（软开关） AOPEN 3 麦克风处于打开状态（软开关） AOPENING 4 向服务器发送打开消息中 视频尺寸定义 VIDEO_SHOW_SIZE 代码 数值 分辨率和码率 VIDEO_SZ_80 1 144*80, 最大码率：56kbps VSIZE_SZ_128 2 224*128, 最大码率：72kbps VSIZE_SZ_160 3 288*160, 最大码率：100kbps VSIZE_SZ_192 4 336*192, 最大码率：150kbps VSIZE_SZ_256 5 448*256, 最大码率：200kbps VSIZE_SZ_288 6 512*288, 最大码率：250kbps VSIZE_SZ_320 7 576*320, 最大码率：300kbps VSIZE_SZ_360 8 640*360, 最大码率：350kbps VSIZE_SZ_400 9 720*400, 最大码率：420kbps VSIZE_SZ_480 10 848*480, 最大码率：500kbps VSIZE_SZ_576 11 1024*576, 最大码率：650kbps VSIZE_SZ_720 12 1280*720, 最大码率：1mbps VSIZE_SZ_1080 13 1920*1080, 最大码率：2mbps 视频状态定义 VSTATUS 代码 数值 分辨率和码率 VUNKNOWN 0 视频状态未知 VNULL 1 没有视频设备 VCLOSE 2 视频处于关闭状态（软开关） VOPEN 3 视频处于打开状态（软开关） VOPENING 4 向服务器发送打开消息中 视频图像格式 VIDEO_FORMAT 代码 数值 分辨率和码率 VFMT_YUV420P 0 yuv420p VFMT_ARGB32 1 32-bit ARGB format (0xAARRGGBB) 录制内容类型 REC_VCONTENT_TYPE 代码 数值 分辨率和码率 RECVTP_VIDEO 0 摄像头 RECVTP_PIC 1 图片 RECVTP_SCREEN 2 屏幕 RECVTP_MEDIA 3 影音共享 RECVTP_TIMESTAMP 4 时间戳 录制语音类型 RECORD_AUDIO_TYPE 代码 数值 分辨率和码率 REC_AUDIO_TYPE_NULL 0 不录制任何语音 REC_AUDIO_TYPE_LOC 1 录制本地语音 REC_AUDIO_TYPE_OTHER 2 录制其他人语音 REC_AUDIO_TYPE_ALL 3 录制本地+其他人语音 录制图像类型 RECORD_VIDEO_TYPE 代码 数值 分辨率和码率 REC_VCONTENT_NULL 0 不录制任何图像 RECORD_VIDEO_TYPE_SCREEN 1 录制屏幕 REC_VCONTENT_VIDEOS 3 录制视频图像 录制视频的布局类型 RECORD_VLAYOUT 代码 数值 分辨率和码率 REC_VLAYOUT_GRID 0 表格类型 REC_VLAYOUT_PIP 1 画中画类型(只有在录两个视频时有效) 屏幕共享的编码类型 ENCODE_TYPE 代码 数值 分辨率和码率 ENC_CLOUDROOM 0 云屋科技私有编码格式（清晰度更高，带宽大） ENC_H264 1 (清晰度差一些，带宽小） 鼠标事件类型 MOUSE_MSG_TYPE 代码 数值 分辨率和码率 MOUSE_MOVE 0 鼠标移动 MOUSE_DOWN 1 鼠标键按下 MOUSE_UP 2 鼠标键弹起 MOUSE_DBCLICK 3 鼠标双击 鼠标键类型 MOUSE_KEY_TYPE 代码 数值 分辨率和码率 MOUSEKEY_NULL 0 无 MOUSEKEY_L 1 鼠标左键 MOUSEKEY_M 2 鼠标中键 MOUSEKEY_R 3 鼠标右键 MOUSEKEY_WHEEL 4 鼠标滚轮 MOUSEKEY_X 5 鼠标侧键 键盘事件类型 KEY_MSG_TYPE 代码 数值 分辨率和码率 KEYT_DWON 0 键值按下 KEYT_UP 1 键值弹起 功能类型 MAIN_PAGE_TYPE 代码 数值 分辨率和码率 MAINPAGE_VIDEOWALL 0 视频墙 MAINPAGE_SHARE 1 共享 MAINPAGE_WHITEBOARD 2 白板 影音的清晰度 VDEFINITION_TYPE 代码 数值 分辨率和码率 V_SD 0 标清 640x360 V_HD 1 高清 1280x720 V_UD 2 超清 1920x1080 视频墙分屏模式 VIDEOLAYOUTMODE 代码 数值 分辨率和码率 VLO_1v1_M 0 互看 VLO_WALL1_M 1 1分屏 VLO_WALL2 2 2分屏 VLO_WALL4 3 4分屏 VLO_WALL5_M 4 5分屏 VLO_WALL6_M 5 6分屏 VLO_WALL9 6 9分屏 VLO_WALL13_M 7 13分屏 VLO_WALL16 8 16分屏 VLO_WALL25 9 25分屏 录制的类型 REC_DATATYPE 代码 数值 分辨率和码率 REC_AV_DEFAULT 0 录制所有语音和视频 REC_AUDIO_LOC 1 录制本地语音 REC_AUDIO_OTHER 2 录制其他人语音 REC_VIDEO 3 录制视频(内容由setRecordVideos设定)用户可以自由组合，如REC_AUDIO_LOC|REC_VIDEO，表示录制本地语音和视频； REC_AUDIO_LOC|REC_AUDIO_OTHER，录制双方语音 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:25 "},"ObjectstructureDing.html":{"url":"ObjectstructureDing.html","title":"对象结构定义","keywords":"","body":"对象结构定义 会议对象 MeetInfoObj {\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":4} 属性 值 ID 会议号，0：代表会议信息无效 pswd 会议密码；（空代表会议无密码） subject 会议主题 pubMeetUrl 会议公共链接 creator 会议创建者 memberCount 会议内人数 会议对象列表 MeetInfoObjs [{\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":4}, {\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":4},... ] 成员对象 MemberObj {\"userID\":\"111\", \"nickName\":\"aaa\", \"audioStatus\":\"1\", \"videoStatus\":\"1\"} 属性 值 userID 用户ID nickName 用户昵称 audioStatus 音频状态,数值参考麦克风状态ASTATUS videoStatus 视频状态,数值参考视频状态定义VSTATUS 成员对象列表 MembersObj [{\"userID\":\"111\",\"nickName\":\"aaa\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"}, {\"userID\":\"222\",\"nickName\":\"bbb\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"}] 音频配置 AudioCfgObj {\"micName\": \"aaa\", \"speakerName\":\"aaa\", \"privEC\":\"0\", \"privAgc\":\"0\"} 属性 值 micName 麦克风设备名称(空代表系统默认设备) speakerName 扬声器名称(空代表系统默认设备) privEC 是否开启云屋私有回声消息0：不开启；1：开启(缺省建议不开启) privAgc 是否开启云屋私有语音自动增益0：不开启；1：开启(缺省建议不开启) 视频配置 VideoCfgObj {\"sizeType\": 1, \"fps\":\"12\"} 属性 值 sizeType 视频尺寸，请参见：VIDEO_SHOW_SIZE fps 帧率：视频帧率(5~30) maxbps 视频码率（1~10010001000）;(未配置则使用内部默认值，请参见VIDEO_SHOW_SIZE) qp_min 最佳质量(18~51, 越小质量越好) (未配置则使用内部默认值25) qp_max 最差质量(18~51, 越大质量越差) (未配置则使用内部默认值36) wh_rate 视频宽高比,取值如下: 0 为16:9(未配置时内部默认值);1 为4:3;2 为1:1; 我们采用的是vbr编码（由质量+码率，双重控制）： qp范围：质量参数，为的是达到目标质量后，无需花费更大码率提高质量； maxbps码率控制，是为了确保结果一定不大于“目标码率”（体积受控）； 当要超出码率控制时，自动降低质量；当质量达到目标时，自动减少码率甚至无码率输出。 视频帧图像 VideoImgObj { \"format\":1, \"dat\":\"FKLEOFJXKFD…\", \"width\":1024, \"height\":768, \"frameTime\":100} 属性 值 format 图像格式,数值参考视频图像格式VIDEO_FORMAT dat 图像数据Base64编码 width 图像宽度 height 图像高度 frameTime 图像的时戳 用户视频信息 VideoInfoObj {\"userID\":\"111\", \"videoID\":2, \"videoName\":\"camera2\"} 属性 值 userID 用户id videoID 设备id videoName 设备名称 用户视频信息列表 VideoInfosObj [ {\"userID\":\"111\",\"videoID\":1,\"videoName\":\"camera1\"}, {\"userID\":\"111\",\"videoID\":2,\"videoName\":\"camera2\"},... ] 用户视频列表 VideoIDObjs [ {\"userID\":\"111\",\"videoID\":1}, {\"userID\":\"111\",\"videoID\":2},... ] 属性 值 userID 用户id videoID 设备id 屏幕共享配置 ScreenShareCfgObj {\"encodeType\":0, \"maxFPS\":8, \"maxKbps\":800000 } 属性 值 encodeType 编码类型,详见屏幕共享的编码类型ENCODE_TYPE catchRect {\"left\":10,\"top\":10,\"width\":100,\"height\":100}用于实现区域共享 catchWnd 共享窗口的窗口句柄，用于实现窗口共享 maxFPS 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) maxKbps 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) 录制视频对象列表 RecordVideosObj [ {\"left\":426, \"top\":124, \"width\":409, \"height\":231, \"type\":0, \"keepAspectRatio\":1, \"param\": {\"camid\":\"c90d98e2-e50d-4abe-a318-104271a47cb6.1\"}}, … ] 属性 值 left，top，width，height 在录制中的区域（相对于录像尺寸） type 录制类型REC_VCONTENT_TYPE说明:当type=RECVTP_VIDEO时，表示录制的是摄像头区域，param必需包含:camid：\"用户id.摄像头id\"当type=RECVTP_PIC时，表示指定的图片，param 必须包含:resourceid: xxx; (参见setPicResource)当type=RECVTP_SCREEN时，表示录制的是屏幕，可以增加附加参数:screenid：屏幕序号（-1:表示主屏）;pid：进程号; (0：未指定进程)area：x,y,w,h;（抓屏区域，无此参数时，代表抓全屏）当type= RECVTP_TIMESTAMP时，不用附加任何参数 keepAspectRatio 内容保持原始比例；（0：不保持；1：保持） param 具体值与type相关； 录制文件配置 RecordCfgObj {\"filePathName\":\"D:\\\\1.mp4\", \"recordWidth\":640, \"recordHeight\":320, \"frameRate\":8, \"bitRate\":500000, \"defaultQP\":28, \"recDataType\":1, \"isUploadOnRecording\":0} 属性 值 filePathName 录像存储的路径文件名,使用完整路径 recordWidth 录制结果中视频尺寸宽度 recordHeight 录制结果中视频尺寸高度 frameRate 录制的帧率，取值范围:1-30(值越大,cpu要求更高，推荐15帧) bitRate 录制的最高码率当图像变化小时，实际码率会低于此值。建议:640*360: 500000; (500kbps)1280*720：1000000; (1mbps)1920*1080: 2000000; (2mbps) defaultQP 录制的缺省质量，缺省值：28取值范围：0~51; (0完全无损, 51质量非常差)推荐：高质量取值18, 中质量28， 低质量36 recDataType 录制内容类型，值参考定义REC_DATATYPE isUploadOnRecording 是否边录边上传，0：手动上传；1：边录制边上传； 录制文件列表 RecordFilesObj [ {\"fileName\":\"D:\\\\1.mp4\",\"size\":10240,\"state\":1,\"uploadPercent\":100}, {\"fileName\":\"D:\\\\2.mp4\",\"size\":13140,\"state\":2,\"uploadPercent\":80}, ... ] 属性 值 fileName 文件名，全路径 size 文件大小 state 0:没有上传，1:上传中，2:上传完毕 uploadPercent 录制结果中视频尺寸高度上传进度，state为1时此字段有效 影音文件 MediaInfoObj { \"userID\": \"111\", \"state\":1, mediaName:\"D:\\1.mp4\"} 属性 值 userID 用户id径 state 播放状态 0:播放 1:暂停 2:未播放 mediaName 影音文件名 图片资源 PicResourceObj {\"fmt\":\"picfile\",\"dat\":\"c:\\test.jpg\"} 属性 值 fmt 资源格式，可取值：\"yuv420p\"，\"rgb32\"，\"picfile\"，\"picdat\" dat 资源数据，不同格式时，要提供的数据各不一样：fmt为\"yuv420p\"时： dat存放的是base64(yuv420p数据)；fmt为\"rgb32\"时： dat存放的是base64(rgb32数据)；fmt为\"picfile\"时： dat存放的是“本地文件名”；fmt为\"picdat \"时：dat存放的是base64(图片文件内容)； width 图像宽度(像素), 在fmt为\"yuv420p\"，\"rgb32\"时，需要此参数 height 图像高度(像素), 在fmt为\"yuv420p\"，\"rgb32\"时，需要此参数 白板信息列表 BoardObjs [ { \"boardID\": \"a\",\"title\": \"board\",\"width\": 1024,\"height\": 768,\"pageCount\": 1}, { \"boardID\": \"b\",\"title\": \"board\",\"width\": 1024,\"height\": 768,\"pageCount\": 1}, … ] 白板配置对象 BoardObj { \"boardID\": \"x\", \"title\": \"board\", \"width\": 1024, \"height\": 768, \"pageCount\": 1} 属性 值 boardID 白板标识 title 白板的名字 width、height 白板的宽、高 pageCount 页数(建议白板是一页，文档是实际页面数) 白板图元列表 BoardElementObjs [ { \"elementID\": \"xx\", \"type\":100, \"orderID\":0, \"left\":0, \"top\":0, …} { \"elementID\": \"yy\", \"type\":100, \"orderID\":0, \"left\":100, \"top\":100, …} ] 白板图元 BoardElementObj { \"elementID\": \"xx\", \"type\":100, \"left\":0, \"top\":0, …} 属性 值 elementID 图元id type 图元的类型，值100以下为云屋保留值，100及以上为自定义值 left、top 图元在页内的左上角位置 … 可自由扩展 说明： 1.elementID必须调用createElementID（）获取, 即使是曾经调此接口创建的然后存入了磁盘文件，再次读入会议时，所有elementID也需要重新生重。2.如果要和云屋产品互通，那就需要按云屋的定义取值，可以联系云屋获取相关文档 网盘文件对象 NetFileObj {\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"} 属性 值 ownerID 文件所有者的ID ownerName 文件所有者的名称 name 文件所有者的名称 orgFileName 用户的原始文件名 md5 压缩后的md5(如果不压缩，则原文件md5) ctime 上传时间 size 在服务器上的大小 orgSize 原始文件大小 status 文件状态 网盘文件对象列表 NetFileObjs [{\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"}, {\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"}] © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:27 "},"CloudroomMeetingObject.html":{"url":"CloudroomMeetingObject.html","title":"CloudroomMeeting对象 ","keywords":"","body":"CloudroomMeeting对象 CloudroomMeeting是核心控件，实现登录、队列、呼叫、通话建立、音频采集播入、视频采集编解码、屏幕共享、录制、影音播放等 获取sdk的版本信息 属性 Version string Version 功能:获取sdk的版本信息 返回值:无 参数:无 可读 SDK初始化 方法 init () CRMEETSDK_ERR_DEF init(string oemid, string sdkFilePath) 功能:SDK初始化 返回值:CRMEETSDK_NOERR为成功，否则是失败代码 参数: oemid ----- 向云屋申请的开发商ID sdkFilePath ------ sdk配置、临时文件存放位置，可为空 每次init后，都应对一次uninit SDK反初始化 方法 uninit () void uninit() 功能:SDK反初始化 返回值:无 参数:无 设置服务器地址、获取设置的服务器地址 属性 loginServerAddr string loginServerAddr 功能:设置服务器地址、获取设置的服务器地址 返回值:无 参数:无 可读、可写.支持单个服务器地址（如：www.cloudroom.com）或多个服务器地址串（如：www.cloudroom.com:8080;183.60.47.52:8080;） 登陆服务器 方法 login () void login( string authAcnt, string authPswd, string nickName, string privAcnt, string privAuthCode, string cookie) 功能:登陆服务器 返回值:无 参数: authAcnt ------ 云屋鉴权帐号 authPswd ------ 云屋鉴权密码 nickName ------ 昵称 privAcnt------ 自定义帐号，不需要时传空字符串 privAuthCode ------ 自定义验证码(有复杂要求的，可以使用json格式)，不需要时传空字符串 cookie ------ 自定义数据 (在回调时，回传给调用者)，不需要时传空字符串 成功事件loginSuccess;失败事件loginFail 注销本次登陆 方法 logout () void logout() 功能:注销本次登陆 返回值:无 参数:无 无事件 设置免打扰状态 方法 setDNDStatus () void setDNDStatus(int DNDStatus, string cookie) 功能:设置免打扰状态 返回值:无 参数: DNDStatus ------ 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义 cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 成功事件setDNDStatusSuccess;失败事件setDNDStatusFail 创建会议 方法 CreateMeeting () void createMeeting(string meetSubject, string cookie) 功能:创建会议 返回值:无 参数: meetSubject ------ 会议主题（字符长度最大值50） cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 成功事件createMeetingSuccess;失败事件createMeetingFail 呼叫成功，双方开始进入本次视频会话 方法 enterMeeting () void enterMeeting(int meetID, string pswd) 功能:呼叫成功，双方开始进入本次视频会话 返回值:无 参数: meetID ------ 视频会话ID pswd ------ 本次会议中的密码（系统自动生成，在呼叫回调中取得） 响应事件enterMeetingRslt 判断某个用户是否在会话中 方法 isUserInMeeting () int isUserInMeeting(string userID) 功能:判断某个用户是否在会话中 返回值:1：在，0：不在 参数: userID ------ 用户的id pswd ------ 本次会议中的密码（系统自动生成，在呼叫回调中取得） 结束会话 方法 stopMeeting () void stopMeeting() 功能:结束会话 返回值:无 参数:无 响应事件 endMeetingRslt;会话被他人结束回调事件 meetingStopped 离开会话 方法 exitMeeting () void exitMeeting() 功能:离开会话 返回值:无 参数:无 他人离开会话的回调事件userLeftMeeting 获取某个用户的信息 方法 getMemberInfo () string getMemberInfo(string userID) 功能:获取某个用户的信息 返回值:json格式的字符串,详见下表 参数: userID ------ 用户ID json串中含单个成员信息，如 {\"userID\":\"222\",\"nickName\":\"bbb\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"} userID ------ 用户ID nickname ------ 设备名称 audioStatus ------ 音频状态,数值参考麦克风状态ASTATUS videoStatus ------ 视频状态,数值参考视频状态定义VSTATUS 获取所有用户的信息 方法 getAllMembers () string getAllMembers() 功能:获取所有用户的信息 返回值:json格式的字符串,详见下表 参数:无 json串中含单个成员信息，如: [{\"userID\":\"111\",\"nickName\":\"aaa\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"} {\"userID\":\"222\",\"nickName\":\"bbb\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"}] userID ------ 用户ID nickname ------ 设备名称 audioStatus ------ 音频状态,数值参考麦克风状态ASTATUS videoStatus ------ 视频状态,数值参考视频状态定义VSTATUS 获取某个用户的昵称 方法 getMemberNickName () string getMemberNickName(string userID) 功能:获取某个用户的昵称 返回值:用户的昵称 参数: userID ------ 用户ID 获取系统上的麦克风列表 方法 getAudioMicNames () string getAudioMicNames() 功能:获取系统上的麦克风列表 返回值:麦克风列表，以’\\n’分割； 参数:无 获取系统上的扬声器列表 方法 getAudioSpkNames () string getAudioSpkNames () 功能:获取系统上的扬声器列表 返回值:麦克风列表，以’\\n’分割； 参数:无 获取音频参数 方法 getAudioCfg () string getAudioCfg() 功能:获取音频参数 返回值: json格式的字符串,详见下列详解 参数:无 json格式说明: \"micName\": \"aaa\" ------- 麦克风设备名称 \"speakerName\": \"aaa\" ------- 扬声器名称 \"privEC\": \"0\" ------- 是否开启云屋私有回声消息0：不开启；1：开启 \"privAgc\": \"0\" ------- 是否开启云屋私有语音自动增益0：不开启；1：开启 设置音频参数 方法 setAudioCfg () void setAudioCfg(string json) 功能:设置音频参数 返回值:无 参数: json ------ json格式的字符串,详见下列详解 json格式说明: \"micName\": \"aaa\" ------- 麦克风设备名称 \"speakerName\": \"aaa\" ------- 扬声器名称 \"privEC\": \"0\" ------- 是否开启云屋私有回声消息0：不开启；1：开启 \"privAgc\": \"0\" ------- 是否开启云屋私有语音自动增益0：不开启；1：开启 设置、获取麦克风音量大小 属性 micVolume int micVolume 功能:设置、获取麦克风音量大小 返回值:无 参数:无 可读、可写.音量等级（0-255） 设置、获取本地扬声器音量 属性 speakerVolume int speakerVolume 功能:设置、获取本地扬声器音量 返回值:无 参数:无 可读、可写.音量等级（0-255） 获取用户说话声音大小 方法 getMicEnergy () int getMicEnergy(string userID) 功能:获取用户说话声音大小 返回值:音量大小（0~10） 参数: userID ------ 登录成功后分配的userID 打开用户的麦克风 方法 openMic () void openMic(string userID) 功能:打开用户的麦克风 返回值:无 参数: userID ------ 用户的ID 打开麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到； 关闭用户的麦克风 方法 closeMic () void closeMic(string userID) 功能:关闭用户的麦克风 返回值:无 参数: userID ------ 用户的ID 关麦操作是立即生效的，会立即停止采集 获取用户的麦状态 方法 getAudioStatus () int getAudioStatus(string userID) 功能:获取用户的麦状态 返回值:麦克风设备状态，请参见ASTATUS定义 参数: userID ------ 登录成功后分配的userID 视频的显示尺寸 属性 videoFPS int videoFPS 功能:视频帧率 返回值:无 参数:无 可读、可写.取值范围：5-30 视频的显示尺寸 属性 curVideoSize int curVideoSize 功能:视频的显示尺寸 返回值:无 参数:无 可读、可写.详见视频尺寸定义VIDEO_SHOW_SIZE 获取指定视频尺寸的码率 方法 getVideoBitrate () int getVideoBitrate(int videoSizeType) 功能:获取指定视频尺寸的码率 返回值:kbps 比特率；（-1代表使用sdk内部默认值） 参数: videoSizeType ----- 视频尺寸，请参见VIDEO_SHOW_SIZE定义 设置指定视频尺寸的码率 方法 setVideoBitrate () void setVideoBitrate(int videoSizeType，int kbps) 功能:设置指定视频尺寸的码率 参数: videoSizeType ------ 视频尺寸，请参见VIDEO_SHOW_SIZE定义 kbps ------ 比特率；（-1代表使用sdk内部默认值） 获取用户的摄像头状态 方法 getVideoStatus () VSTATUS getVideoStatus(string userID) 功能:获取用户的摄像头状态 返回值:麦克风摄像头状态，请参见VSTATUS定义 参数: userID ------ 用户的ID 打开用户的摄像头，以便本地、远端显示视频图像 方法 openVideo () void openVideo(string userID) 功能:打开用户的摄像头，以便本地、远端显示视频图像 返回值:无 参数: userID ------ 用户的ID 请见事件videoStatusChanged 关闭用户的摄像头 方法 closeVideo () void closeVideo(string userID) 功能:关闭用户的摄像头 返回值:无 参数: userID ------ 用户的ID 请见事件videoStatusChanged 关闭所有用户的麦克风 方法 setAllAudioClose () void setAllAudioClose() 功能:关闭所有用户的麦克风 返回值:无 参数:无 请见事件audioStatusChanged 取得观看设备列表 方法 getWatchVideos () string getWatchVideos() 功能:取得观看设备列表 返回值:json格式的字符串,详见下列详解 参数:无 json串中含有多个设备列表： [ {\"userID\":\"aaa\",\"videoID\":A}, {\"userID\":\"aaa\",\"videoID\":B}, ... ] - userID ------ 用户id - videoID ------ 设备id ### 获取指定用户的最新图像 方法 getVideoImg () string getVideoImg(string userID，int videoID) 功能:获取指定用户的最新图像 返回值:json格式的字符串,详见下列详解 参数: userID ------ 用户ID videoID ------ 摄像头ID 获取到的图像帧可能比通知的图像帧更新（界面消息机制引起）；如果通知的frmTime比显示的帧要更小，那就没必要再去获取图像并进行显示了。： {\"format\": 1, \"dat\":\"FKLEOFJXKFD…\",\"width\":1024, \"height\":768,\"frameTime\":3213123123123} format ------ 图像格式,数值参考视频图像格式VIDEO_FORMAT dat ------ 图像数据 width ------ 图像宽度 height ------ 图像高度 frameTime ------ 图像产生的时间，从1970-01-01 00:00:00到现在为止，过去的毫秒时间 设置默认的摄像头 方法 setDefaultVideo () void setDefaultVideo(string userID，long videoID) 功能:设置默认的摄像头 返回值:无 参数: userID ------ 用户ID videoID ------ 摄像头ID videoID，应该从getAllVideoInfo返回值中获取。 获取指定用户的默认摄像头 方法 getDefaultVideo () int getDefaultVideo(string userID) 功能:获取指定用户的默认摄像头 返回值:摄像头ID 参数: userID ------ 用户ID 如果用户没有摄像头，返回0； 查询用户是否启用多摄像头 方法 getEnableMutiVideo () int getEnableMutiVideo(string userID) 功能:查询用户是否启用多摄像头 返回值:1表示开启了，0表示未开启 参数: userID ------ 用户ID 设置用户是否启用多摄像头 方法 setEnableMutiVideo () void setEnableMutiVideo(string userID, int bEnable) 功能:设置用户是否启用多摄像头 返回值:无 参数: userID ------ 用户ID bEnable ------ 1表示开启，0表示关闭 （用户实现同时打开多个视频设备） 获取用户所有的摄像头信息 方法 getAllVideoInfo () string getAllVideoInfo(string userID) 功能:获取用户所有的摄像头信息 返回值:json格式的字符串,详见下列详解 参数: userID ------ 用户ID json格式的字符串,详见说明： [ {\"userID\":\"111\",\"videoID\":1,\"videoName\":\"camera1\"}, {\"userID\":\"111\",\"videoID\":2,\"videoName\":\"camera2\"}, ... ] userID ------ 用户id videoID ------ 设备id videoName -------设备名称 获取会议内所有可观看的摄像头 方法 getWatchableVideos () string getWatchableVideos() 功能:获取会议内所有可观看的摄像头 返回值:json格式的字符串,详见下列详解 参数:无 json格式的字符串,详见说明： [ {\"userID\":\"111\",\"videoID\":1}, {\"userID\":\"222\",\"videoID\":2}, ... ] userID ------ 用户id videoID ------ 设备id 获取当前屏幕共享配置 方法 getScreenShareCfg () string getScreenShareCfg() 功能:获取当前屏幕共享配置 返回值:json格式的字符串,详见下列详解 参数:无 json格式的字符串,详见说明： { \"encodeType\":0, \"catchRect\":{\"left\":10,\"top\":10,\"right\":100,\"bottom\":100}, \"catchWnd\":1234, \"maxFPS\":8, \"maxKbps\":800000 } encodeType ------ 编码类型,详见屏幕共享的编码类型ENCODE_TYPE catchRect ------ 共享区域,可存放多个区域 catchWnd ------ 共享的窗口的窗口句柄 maxFPS ------ 最大帧率 缺省为8 maxKbps ------ 最大码率，缺省800kbps 设置当前屏幕共享配置 方法 setScreenShareCfg () void setScreenShareCfg(string json) 功能:设置当前屏幕共享配置 返回值:无 参数:json格式的字符串,详见下列详解 json格式的字符串,详见说明： { \"encodeType\":0, \"catchRect\":{\"left\":10,\"top\":10,\"right\":100,\"bottom\":100}, \"catchWnd\":1234, \"maxFPS\":8, \"maxKbps\":800000 } encodeType ------ 编码类型,详见屏幕共享的编码类型ENCODE_TYPE catchRect ------ 共享区域,可存放多个区域 catchWnd ------ 共享的窗口的窗口句柄 maxFPS ------ 最大帧率 缺省为8 maxKbps ------ 最大码率，缺省800kbps 检查屏幕共享是否已开启 属性 isScreenShareStarted int isScreenShareStarted 功能:检查屏幕共享是否已开启 返回值:无 参数:无 可读.0：没有开启，1：已经开启 开启屏幕共享 方法 startScreenShare () void startScreenShare() 功能:开启屏幕共享 返回值:无 参数:无 响应事件startScreenShareRslt 停止屏幕共享 方法 stopScreenShare () void stopScreenShare () 功能:停止屏幕共享 返回值:无 参数:无 响应事件stopScreenShareRslt 支持的最大屏幕宽度 属性 supportMaxScreenWidth int supportMaxScreenWidth 功能:支持的最大屏幕宽度 返回值:无 参数:无 可读 支持的最大屏幕高度 属性 supportMaxScreenHeight int supportMaxScreenHeight 功能:支持的最大屏幕高度 返回值:无 参数:无 可读 设获取屏幕共享解码图像 方法 getShareScreenDecodeImg () string getShareScreenDecodeImg() 功能:设获取屏幕共享解码图像 返回值:json格式的字符串,详见下列详解 参数:无 json格式的字符串,详见说明： { \"format\": 1, \"dat\":\"FKLEOFJXKFD…\",\"width\":1024, \"height\":768, \"frameTime\":3213123123123 } format ------ 图像格式,数值参考视频图像格式VIDEO_FORMAT dat ------ 图像数据 width ------ 图像宽度 height ------ 图像高度 frameTime ------ 图像产生的时间，从1970-01-01 00:00:00到现在为止，过去的毫秒时间 设置、获取自定义抓屏功能 属性 customizeCatchScreen int customizeCatchScreen 功能:设置、获取自定义抓屏功能 返回值:无 参数:无 可读、可写.0：默认抓屏处理；1：自定议抓屏设置自定义抓屏后，sdk需要图像时将产生notiyCatchScreen事件，使用者再通过setCustomizeScreenImg接口送入图像 设置自定义的抓屏图像数据 方法 setCustomizeScreenImg () void setCustomizeScreenImg(int format, int width, int height, VARIANT dat) 功能:设置自定义的抓屏图像数据 返回值:无 参数: format ------ 参见VIDEO_FORMAT； width ------ 图像的宽度； height ------ 图像的高度； dat ------ SafeArray对象，承载argb数据； 当前只支持VFMT_ARGB32格式；如果在收到notiyCatchScreen事件时，暂当前无图像可送时，可送空数据进去(width=0, height=0, dat为空) 设置要录制的视频 方法 setRecordVideos () void setRecordVideos(string json) 功能:设置要录制的视频 返回值:无 录制类型REC_VCONTENT_TYPE 参数:json格式的字符串,详见说明 如果为录屏方式时，配置不生效 开启录制 方法 startRecording () int startRecording(string json) 功能:开启录制 返回值:0：开启失败； 1：开启成功 参数:json 录制参数,json格式的字符串,详见下列详解 json详解： {\"filePathName\": \"D:\\\\1.mp4\" \"audioType\":\"FKLEOFJXKFD…\",\"recordWidth\":640, \"recordHeight\":320,\"frameRate\":8, \"bitRate\":500000, \"defaultQP\":28, \"recDataType\":1} filePathName ------ 录像存储的路径文件名,使用完整路径 audioType ------ 录制语音类型，详见定义RECORD_AUDIO_TYPE recordWidth ------ 录制结果中视频尺寸宽度 recordHeight ------ 录制结果中视频尺寸宽度 frameRate ------ 录制的帧率 bitRate ------ 录制的最高码率(当图像变化小时，实际码率会低于此值。建议： 640360: 500000; (500kbps) 1280720：1000000; (1mbps) 1920*1080: 2000000; (2mbps)) defaultQP ------ -录制的缺省质量(缺省值：28 取值范围：0~51; (0完全无损, 51质量非常差) 推荐：高质量取值18, 中质量28， 低质量38) recDataType ------ 录制内容类型（视频+音频），值参考定义REC_DATATYPE 停止录制 方法 stopRecording () void stopRecording() 功能:停止录制 返回值:无 参数:无 得到录制结果文件大小 方法 getRecFileSize () int getRecFileSize() 功能:得到录制结果文件大小 返回值:无 参数:无 得到录制的时长 方法 getRecDuration () int getRecDuration() 功能:得到录制的时长 返回值:无 参数:无 取得所有录制文件信息 方法 getAllRecordFiles () string getAllRecordFiles() 功能:取得所有录制文件信息 返回值:json格式的字符串,详见下列详解 参数:无 json串中包含多个录制文件信息： [{\"fileName\":\"D:\\\\1.mp4\",\"state\":1,\"uploadPercent\":100}{\"fileName\":\"D:\\\\2.mp4\",\"state\":2,\"uploadPercent\":80}...] fileName ------ 录像存储的路径文件名,使用完整路径 state ------ 录制语音类型，详见定义RECORD_AUDIO_TYPE uploadPercent ------ 录制结果中视频尺寸宽度 删除本地的录制文件，上传中的文件会被取消上传 方法 removeFromFileMgr () void removeFromFileMgr(string filename) 功能:删除本地的录制文件，上传中的文件会被取消上传 返回值:无 参数: filename ------ 文件名，全路径 上传文件 方法 uploadRecordFile () void uploadRecordFile(string filename) 功能:上传文件 返回值:无 参数: filename ------ 文件名，全路径 取消上传中的录制文件 方法 cancelUploadRecordFile () void cancelUploadRecordFile(string filename) 功能:取消上传中的录制文件 返回值:无 参数: filename ------ 文件名，全路径 回放录制文件 方法 playbackRecordFile () void playbackRecordFile(string filename) 功能:回放录制文件 返回值:无 参数: filename ------ 文件名，全路径 可创建影音控件显示录制内容，功能同接口startPlayMedia 发送IM消息 方法 sendIMmsg () string sendIMmsg(string text, string toUsrID=””, string cookie=””) 功能:发送IM消息 返回值:taskID 发送任务id 参数: text ------ 发送的文本消息 toUsrID ------ 目标用户，如果用户ID为空，消息发送给会议内所有用户 cookie ------ 自定义用户数据 发送结果事件sendIMmsgRlst 播放是否静音 属性 speakerMute int speakerMute 功能:播放是否静音 返回值:无 参数:无 可读、可写. 对会议内所有声音生效.0:不静音 ; 1:静音 赋予控制权限 方法 giveCtrlRight () void giveCtrlRight(string userID) 功能:赋予控制权限 返回值:无 参数: userID ------ 目标用户 控制权限更改通知事件notifyGiveCtrlRight 收回控制权限 方法 releaseCtrlRight () void releaseCtrlRight(string userID) 功能:收回控制权限 返回值:无 参数: userID ------ 目标用户 收回控制权限通知事件notifyReleaseCtrlRight 发送鼠标控制消息 方法 sendMouseCtrlMsg () void sendMouseCtrlMsg(int msgType, int key, int ptX, int ptY) 功能:发送鼠标控制消息 返回值:无 参数: msgType ------ 鼠标事件类型(数值详见MOUSE_MSG_TYPE类型) key ------ 鼠标键类型(数值详见MOUSE_KEY_TYPE类型) ptX ------ 鼠标在屏幕中的横坐标 ptY ------ 鼠标在屏幕中的纵坐标 发送键盘控制消息 方法 sendKeyCtrlMsg () void sendKeyCtrlMsg(int keyMsgType, int vk, int bExtendedKey) 功能:发送键盘控制消息 返回值:无 参数: keyMsgType ------ 键盘事件类型(数值详见KEY_MSG_TYPE类型) vk ------ 键盘虚拟键值 bExtendedKey ------ 发送小块数据 方法 sendCmd () string sendCmd(string targetUserId, ByteArray data) 功能:发送小块数据 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID data ------ 发送的数组数据 一次性发送，不会有进度通知.发送结果事件sendCmdRlst 发送大块数据 方法 sendBuffer () string sendBuffer(string targetUserId, ByteArray data) 功能:发送大块数据 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID data ------ 发送的数组数据 分块发送，进度通知事件sendProgress.发送结果事件 sendBufferRlst.取消发送 cancelSend 取消数据发送 方法 cancelSend () void cancelSend(string taskID) 功能:取消数据发送 返回值:分配的任务ID 参数: taskID ------ 任务ID 取消结果通知事件 cancelSendRlst 发送文件 方法 sendFile () string sendFile(string targetUserId, string fileName) 功能:发送文件 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID fileName ------ 需要发送的文件名 分块发送，进度通知事件sendProgress.发送结果事件sendFileRlst.取消发送cancelSend 功能切换 方法 switchToPage () void switchToPage(int mainPage, string jsonSubPage) 功能:功能切换 返回值:无 参数: mainPage ------ 功能类型(mainPage 数值参见MAIN_PAGE_TYPE定义) jsonSubPage ------ json格式的字符串,详见下列详解 jsonSubPage格式说明: {\"userID\": 1, \"boardID\":1} userID ------ 用户id boardID ------ 白板id 获取当前主功能区 方法 getCurrentMainPage () int getCurrentMainPage() 功能:获取当前主功能区 返回值:mainPage 数值参见MAIN_PAGE_TYPE定义 参数:无 获取当前子功能区 方法 getCurrentSubPage () string getCurrentSubPage () 功能:获取当前子功能区 返回值:json格式的字符串,详见下列详解 参数:无 jsonSubPage格式说明: {\"userID\": 1, \"boardID\":1} userID ------ 用户id boardID ------ 白板id 设置视频墙分屏模式 方法 setVideoWallMode () void setVideoWallMode(int videoWallMode) 功能:设置视频墙分屏模式 返回值:无 参数: videoWallMode ------ 分屏模式 videoWallMode数值参见VIDEOLAYOUTMODE定义 当前哪个用户为主视频 属性mainVideo string mainVideo 功能:当前哪个用户为主视频 返回值:无 参数:无 可读、可写 创建白板 方法 createBoard () QString createBoard(string title, int width, int height) 功能:创建白板 返回值:json格式的字符串,详见下列详解 参数: title ------ 白板名称 width ------ 白板宽度 height ------ 白板高度 json格式说明: {\"userID\": 1, \"boardID\":1} userID ------ 用户id boardID ------ 白板id 关闭白板 方法 closeBoard () void closeBoard(string json) 功能:关闭白板 返回值:无 参数:json格式的字符串,详见下列详解 json格式说明: {\"userID\": 1, \"boardID\":1} userID ------ 用户id boardID ------ 白板id 添加图元信息 方法 addBoardElement () ElementID addBoardElement(SubPage boardID, ElementData element) 功能:添加图元信息 返回值:图元ID，参见对象ElementID的定义 参数: boardID ------ 白板ID，参见对象SubPage 的定义 element ------ 图元信息，参见对象ElementData 的定义 删除图元 方法 delBoardElement () void delBoardElement(SubPage boardID, ElementIDs elementIDs) 功能:删除图元 返回值:无 参数: boardID ------ 白板ID，参见对象SubPage 的定义 elementIDs ------ 图元数组，参见对象ElementIDs 的定义 设置鼠标热点消息 方法 setMouseHotSpot () void setMouseHotSpot(SubPage boardID, LONG x, LONG y) 功能:设置鼠标热点消息 返回值:无 参数: boardID ------ 白板ID，参见对象SubPage 的定义 x ------ 屏幕横坐标 y ------ 屏幕纵坐标 影音播放的清晰度 属性 vDefinition int vDefinition 功能:影音播放的清晰度 返回值:无 参数:无 可读、可写. 音量等级（0-255） 影音播放的音量 属性 mediaVolume int mediaVolume 功能: 影音播放的音量 返回值:无 参数:无 可读、可写. 音量等级（0-255） 登录成功响应 事件 loginSuccess () void loginSuccess(string usrID, string cookie) 功能: 登录成功响应 参数: usrID ------ 用户账户 cookie ------ 自定义用户数据 登录失败响应 事件 loginFail () void loginFail(int sdkErr, string cookie) 功能: 登录失败响应 参数: sdkErr ------ 操作失败代码，定义见 CRMEETSDK_ERR_DEF cookie ------ 自定义用户数据 SDK通知自己掉线 事件 lineOff () void lineOff(CRMEETSDK_ERR_DEF sdkErr) 功能: SDK通知自己掉线 参数: sdkErr ------ 掉线的错误代码 客户端设置免打扰状态操作成功响应 事件 setDNDStatusSuccess () void setDNDStatusSuccess(string cookie) 功能: 客户端设置免打扰状态操作成功响应 参数: cookie ------ 自定义用户数据 客户端设置免打扰状态操作失败响应 事件 setDNDStatusFail () void setDNDStatusFail(int sdkErr, string cookie) 功能: 客户端设置免打扰状态操作失败响应 参数: sdkErr ------ 操作失败代码，数值参考CRMEETSDK_ERR_DEF cookie ------ 自定义用户数据 创建会议成功响应 事件 createMeetingSuccess () void createMeetingSuccess(int meetID, string psw, string cookie) 功能: 创建会议成功响应 参数: meetID ------ 系统自动分配的会议ID psw ------ 系统自动分配的会议密码，可为空 cookie ------ 自定义用户数据 创建会议失败响应 事件 createMeetingFail () void createMeetingFail(int sdkErr, string cookie) 功能: 创建会议失败响应 参数: sdkErr ------ 操作失败代码，数值参考CRMEETSDK_ERR_DEF cookie ------ 自定义用户数据 某用户进入了会议 事件 userEnterMeeting () void userEnterMeeting(string userID) 功能: 某用户进入了会议 参数: userID ------ 进入会议的用户id SDK通知从会议里掉线 事件 meetingDropped () void meetingDropped() 功能: SDK通知从会议里掉线了，sdk外部收到该通知后可以调用enterMeeting尝试重新入会（如果用到了呼叫队列，必须调用hungupCall释放本次呼叫） 参数:无 会议已被结束 事件 meetingStopped () void meetingStoped() 功能:会议已被结束 参数:无 通知结束视频会议结果 事件 endMeetingRslt () void endMeetingRslt(int code) 功能:通知结束视频会议结果 参数 code ------ 数值参考CRMEETSDK_ERR_DEF，值为CRMEETSDK_NOERR时结束成功，否则为不成功代码。 某用户进入了会议 事件 userEnterMeeting () void userEnterMeeting(string userID) 功能:某用户进入了会议 参数: userID ------ 进入会议的用户id 某用户离开了会议 事件 userLeftMeeting () void userLeftMeeting(string userID) 功能:某用户离开了会议 参数: userID------ 离开会议的用户id SDK通知我的网络变化 事件 netStateChanged () void netStateChanged(long level) 功能:SDK通知我的网络变化 参数: level ------ 网络状况等级(0~10，10分为最佳网络) SDK通知用户的说话声音强度更新 事件 micEnergyUpdate () void micEnergyUpdate( string userID, long oldLevel, long newLevel) 功能:SDK通知用户的说话声音强度更新 参数: userID ------ 用户标识ID oldLevel ------ 原来的说话声音强度(0~10) newLevel ------ 现在的说话声音强度(0~10) SDK通知本地音频设备有变化 事件 audioDevChanged () void audioDevChanged() 功能:SDK通知本地音频设备有变化 参数:无 SDK通知打开本地音频状态变化 事件 audioStatusChanged () void audioStatusChanged(string userID, int oldStatus, int newStatus) 功能:SDK通知打开本地音频状态变化 参数: userID ------ 会话中设备的所有者 oldStatus ------ 旧状态，数值参考麦克风状态定义ASTATUS newStatus ------ 新状态，数值参考麦克风状态定义ASTATUS SDK通知打开本地视频状态变化 事件 videoStatusChanged () void videoStatusChanged(string userID, int oldStatus, int newStatus) 功能:SDK通知打开本地视频状态变化 参数: userID ------ 会话中设备的所有者 oldStatus ------ 旧状态，数值参考视频状态定义VSTATUS newStatus ------ 新状态，数值参考视频状态定义VSTATUS 通知用户有新的视频数据 事件 notifyVideoData () void notifyVideoData(string userID， LONGLONG frmTime) 功能:通知用户有新的视频数据 参数: userID ------ 用户标识ID frmTime ------ 图像的创建时戳 收到此通知消息后，可能过getVideoImg获取图像显示；但如果之前显示的帧时戳更大，说明此通知消息已过时，直接忽略即可； SDK通知用户的视频设备有变化 事件 videoDevChanged () void videoDevChanged(string userID) 功能:SDK通知用户的视频设备有变化 参数: userID ------ 设备变化的用户ID 开启屏幕共享的响应事件 事件 startScreenShareRslt () void startScreenShareRslt(int sdkErr) 功能:开启屏幕共享的响应事件 参数: sdkErr ------ 操作失败代码,数值参考CRMEETSDK_ERR_DEF 停止屏幕共享的响应事件 事件 stopScreenShareRslt () void stopScreenShareRslt (int sdkErr) 功能:停止屏幕共享的响应事件 参数: sdkErr ------ 操作失败代码,数值参考CRMEETSDK_ERR_DEF 通知他人开启了屏幕共享 事件 notifyScreenShareStarted () void notifyScreenShareStarted() 功能:通知他人开启了屏幕共享 参数:无 通知他人停止了屏幕共享 事件 notifyScreenShareStopped () void notifyScreenShareStopped () 功能:通知他人停止了屏幕共享 参数:无 通知对端屏幕图像有变化 事件 notifyScreenShareData () void notifyScreenShareData(OleRect changedRt) 功能:通知对端屏幕图像有变化 参数: changedRt ------ 变化的区域；（可以只重绘这块区域） 自定义抓屏时，ocx通知使用者抓屏 事件 notiyCatchScreen () void notiyCatchScreen() 功能:自定义抓屏时，ocx通知使用者抓屏 参数:无 在收到通知时， 一定要及时setCustomizeScreenImg，如果没图像时，可以先送入空图像； 发送IM消息时，ocx通知使用者发送结果 事件 sendIMmsgRlst () void sendIMmsgRlst(string taskID, int sdkErr, string cookie) 功能:发送IM消息时，ocx通知使用者发送结果 参数: taskID ------ 发送任务id sdkErr ------ 数值参考CRMEETSDK_ERR_DEF cookie ------ 用户自定义数据 ocx通知收到IM消息 事件 notifyIMmsg () void notifyIMmsg(string fromUserID, string text) 功能:ocx通知收到IM消息 参数: fromUserID ------ 消息来源 text ------ 消息内容 录制异常，录制将自动停止 事件 recordErr () void recordErr(CRMEETSDK_ERR_DEF sdkErr) 功能:录制异常，录制将自动停止 参数:无 ocx通知远程控制权限给予了某人 事件 notifyGiveCtrlRight () void notifyGiveCtrlRight(string operId, string targetId) 功能:ocx通知远程控制权限给予了某人 参数: operId ------ 操作的用户id targetId ------ 控制权限给予了谁 ocx通知收回远程控制 事件 notifyReleaseCtrlRight () void notifyReleaseCtrlRight(string operId, string targetId) 功能:ocx通知收回远程控制 参数: operId ------ 操作的用户id targetId ------ 收回了谁的控制权限 发送数据时，ocx通知发送结果 事件 sendCmdRlst () void sendCmdRlst(string taskID, CRMEETSDK_ERR_DEF sdkErr, string cookie) 功能:发送数据时，ocx通知发送结果 参数: taskID ------ 发送任务id sdkErr ------ 失败代码 cookie ------ 用户自定义数据 发送数据时，ocx通知发送结果 事件 sendBufferRlst () void sendBufferRlst(string taskID, CRMEETSDK_ERR_DEF sdkErr, string cookie) 功能:发送数据时，ocx通知发送结果 参数: taskID ------ 发送任务id sdkErr ------ 失败代码 cookie ------ 用户自定义数据 发送文件时，ocx通知发送结果 事件 sendFileRlst () void sendFileRlst(string taskID, string fileName, CRMEETSDK_ERR_DEF sdkErr, string cookie) 功能:发送文件时，ocx通知发送结果 参数: taskID ------ 发送任务id fileName ------ 文件名 sdkErr ------ 失败代码 cookie ------ 用户自定义数据 发送数据时，ocx通知发送进度 事件 sendProgress () void sendProgress(string taskID, long sendedLen, long totalLen, string cookie) 功能:发送数据时，ocx通知发送进度 参数: taskID ------ 发送任务id sendedLen ------ 已发送的数据长度 totalLen ------ 需要发送的总长度 cookie ------ 用户自定义数据 取消发送 事件 cancelSendRlst () void cancelSendRlst(string taskID) 功能:取消发送 参数: taskID ------ 发送任务id ocx通知收到小块数据 事件 notifyCmdData () void notifyCmdData(string sourceUserId, ByteArray data) 功能:ocx通知收到小块数据 参数: sourceUserId ------ 数据来源 data ------ 参见对象ByteArray定义 ocx通知收到大块数据 事件 notifyBufferData () void notifyBufferData(string sourceUserId, ByteArray data) 功能:ocx通知收到大块数据 参数: sourceUserId ------ 数据来源 data ------ 参见对象ByteArray定义 ocx通知收到文件数据 事件 notifyFileData () void notifyFileData(string sourceUserId, string tmpFile, string orgFileName) 功能:ocx通知收到文件数据 参数: sourceUserId ------ 数据来源 tmpFile ------ 临时文件，不需要时，请移除或删除对应文件 orgFileName ------ 源始文件名 收到的文件生成在系统临时目录下，请尽快移走对应文件 ocx通知功能切换 事件 notifySwitchToPage () void notifySwitchToPage(LONG mainPage，SubPage subPage) 功能:ocx通知功能切换 参数: mainPage ------ 功能类型(数值参见MAIN_PAGE_TYPE定义) subPage ------ 参见对象SubPage 定义 ocx通知视频分屏模式切换 事件 notifyVideoWallMode () void notifyVideoWallMode(LONG model) 功能:ocx通知视频分屏模式切换 参数: model ------ 分屏模式(数值参见VIDEOLAYOUTMODE定义) ocx通知主视频更改 事件 notifyMainVideo () void notifyMainVideo(string userID) 功能:ocx通知主视频更改 参数: userID ------ 用户ID ocx通知之前已经创建好的白板 事件 notifyInitBoards () void notifyInitBoards(SubPages boards) 功能:ocx通知之前已经创建好的白板 参数: boards ------ 已经创建好的白板列表 ocx通知之前已经创建好的白板上的图元数据 事件 notifyInitBoardElements () void notifyInitBoardElements(SubPage boardID, StrArray elementData) 功能:ocx通知之前已经创建好的白板上的图元数据 参数: boardID ------ 当前白板 elementData ------ 白板上的图元数据json字符串数组 白板上每一个图元数据就是一个json字符串 ocx通知创建白板 事件 notifyCreateBoard () void notifyCreateBoard(SubPage sub，string title，LONG width，LONG height，string operatorID) 功能:ocx通知创建白板 参数: sub ------ 白板ID，参见对象SubPage的定义 title ------ 白板名称 width ------ 白板宽度 heigh ------ 白板高度 operatorID ------ 创建白板的用户ID 关闭白板 方法 notifyCloseBoard () void notifyCloseBoard(SubPage boardID，string operatorID) 功能:关闭白板 参数: boardID ------ 参见对象SubPage 的定义 operatorID ------ 关闭白板的用户ID ocx通知添加图元信息 方法 notifyAddBoardElement () void notifyAddBoardElement(SubPage boardID, ElementID elementID，ElementData element，string operatorID) 功能:ocx通知添加图元信息 参数: boardID ------ 白板ID，参见对象SubPage 的定义 elementID ------ 图元ID，参见对象ElementID的定义 element ------ 图元信息，参见对象ElementData 的定义 operatorID ------ 添加图元的用户ID ocx通知删除图元 方法 notifyDelBoardElement () void notifyDelBoardElement(SubPage boardID, ElementIDs elementIDs，string operatorID) 功能:ocx通知删除图元 参数: boardID ------ 白板ID，参见对象SubPage 的定义 elementIDs ------ 图元数组，参见对象ElementIDs 的定义 operatorID ------ 删除图元的用户ID ocx通知设置鼠标热点消息 方法 notifyMouseHotSpot () void notifyMouseHotSpot(SubPage boardID, LONG x, LONG y，string operatorID) 功能:ocx通知设置鼠标热点消息 参数: boardID ------ 白板ID，参见对象SubPage 的定义 x ------ 屏幕横坐标 y ------ 屏幕纵坐标 operatorID ------ 删除图元的用户ID © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:47 "},"CloudroomQueueObject.html":{"url":"CloudroomQueueObject.html","title":"CloudroomQueue对象","keywords":"","body":"CloudroomQueue对象 CloudroomQueue是队列控件，实现队列、呼叫等功能 发起呼叫，邀请用户参加视频会话 方法 call () string call( string calledUserID, long meetID, string meetPwd =\"\", string usrExtDat=\"\", string cookie=””) 功能:发起呼叫，邀请用户参加视频会话 返回值:本次呼叫标识码（呼叫ID） 参数: calledUserID ------ 被叫用户的账户ID meetID ------ 会议ID meetPwd ------ 会议密码 usrExtDat ------ 自定义扩展参数 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件callSuccess,失败事件callFail,呼叫时,对方迟迟不响应,30秒后系统自动结束呼叫 接受对方发起的视频请求，开始进入视频会话 方法 acceptCall () void acceptCall(string callID, string cookie=””) 功能:接受对方发起的视频请求，开始进入视频会话 返回值:无 参数: callID ------ 呼叫标识码 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件acceptCallSuccess,失败事件acceptCallFail 拒绝对方的视频请求 方法 rejectCall () void rejectCall( string callID, string cookie=””) 功能:拒绝对方的视频请求 返回值:无 参数: callID ------ 呼叫标识码 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件rejectCallSuccess,失败事件rejectCallFail 挂断正在进行的视频呼叫或视频通话 方法 hungupCall () void hungupCall( string callID, string cookie=””) 功能:挂断正在进行的视频呼叫或视频通话 返回值:无 参数: callID ------ 呼叫标识码 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件hungupCallSuccess,失败事件hungupCallFail 呼叫他人操作成功响应 事件 callSuccess () void callSuccess( string callID, long meetID, string meetPswd, string cookie=””) 功能:呼叫他人操作成功响应 返回值:无 参数: callID ------ 呼叫全局标识 meetID ------ 视频会话标识ID meetPswd ------ 视频会议密码 cookie ------ 自定义用户数据 呼叫他人操作失败响应 事件 callFail () void callFail( string callID, CRMEETSDK_ERR_DEF sdkErr, string cookie=””) 功能:呼叫他人操作失败响应 返回值:无 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码 cookie ------ 自定义用户数据 接受他人呼叫操作成功响应 事件 acceptCallSuccess () void acceptCallSuccess( string callID, string cookie=””) 功能:接受他人呼叫操作成功响应 返回值:无 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 接受他人呼叫操作失败响应 事件 acceptCallFail () void acceptCallFail( string callID, CRMEETSDK_ERR_DEF sdkErr, string cookie=””) 功能:接受他人呼叫操作失败响应 返回值:无 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码 cookie ------ 自定义用户数据 拒绝他人的呼叫成功响应 事件 rejectCallSuccess () void rejectCallSuccess( string callID, string cookie=””) 功能:拒绝他人的呼叫成功响应 返回值:无 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 拒绝他人的呼叫失败响应 事件 rejectCallFail () void rejectCallFail( string callID, CRMEETSDK_ERR_DEF sdkErr, string cookie=””) 功能:拒绝他人的呼叫失败响应 返回值:无 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码 cookie ------ 自定义用户数据 挂断呼叫操作成功响应 事件 hungupCallSuccess () void hungupCallSuccess( string callID, string cookie=””) 功能:挂断呼叫操作成功响应 返回值:无 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 拒绝他人呼叫操作失败响应 事件 hungupCallFail () void hungupCallFail( string callID, CRMEETSDK_ERR_DEF sdkErr, string cookie=””) 功能:拒绝他人呼叫操作失败响应 返回值:无 参数: callID ------ 呼叫全局标识 sdkErr ------ 呼叫全局标识 cookie ------ 自定义用户数据 SDK通知自己被呼叫 事件 notifyCallIn () void notifyCallIn( string callID, long meetID, string meetPswd, string callerID, string usrExtDat) 功能:SDK通知自己被呼叫 返回值:无 参数: callID ------ 呼叫全局标识 meetID ------ 视频会话标识ID meetPswd ------ 视频会议密码（可为空） callerID ------ 呼叫人员的标识ID usrExtDat ------ 自定义扩展参数 SDK通知自己视频呼叫被对方接受 事件 notifyCallAccepted () void notifyCallAccepted( string callID, long meetID, string meetPswd) 功能:SDK通知自己视频呼叫被对方接受 返回值:无 参数: callID ------ 呼叫全局标识 meetID ------ 本次会话的id meetPswd ------ 会话的密码 SDK通知自己呼叫被对方拒绝 事件 notifyCallRejected () void notifyCallRejected( string callID, CRMEETSDK_ERR_DEF reason) 功能:SDK通知自己呼叫被对方拒绝 返回值:无 参数: callID ------ 呼叫全局标识 sdkErr ------ 呼叫被对方拒绝的原因代码，定义见 CRMEETSDK_ERR_DEF SDK通知自己呼叫被挂断 事件 notifyCallHungup () void notifyCallHungup( string callID) 功能:SDK通知自己呼叫被挂断 返回值:无 参数: callID ------ 呼叫全局标识 初始化用户队列功能数据 方法 initQueueDat () void initQueueDat(string cookie=““) 功能:初始化用户队列功能数据 返回值:无 参数: cookie ------ 自定义数据(在回调时，回传给调用者) 响应事件initQueueDatRslt,初始化成功后，才可获取队列队列相关信息； 刷新所有队列状态信息 方法 refreshAllQueueStatus () void refreshAllQueueStatus() 功能:刷新所有队列状态信息 返回值:无 参数:无 响应事件queueStatusChanged,（当前排队的队列或服务的队列，sdk自动有状态变化回调；其它队列则需要此函数来查询） 获取队列信息 方法 getAllQueueInfo () QueuesInfo getAllQueueInfo（） 功能:获取队列信息 返回值:QueuesInfo对象 参数:无 获指定取队列状态 方法 getQueueStatus () QueueStatus getQueueStatus(long queID) 功能:获指定取队列状态 返回值:对象QueueStatus 参数: queID ------ 队列 获取我服务的所有队列 方法 getQueuingInfo () QueuingInfo getQueuingInfo() 功能:获取我服务的所有队列 返回值:QueuingInfo对象 参数:无 获取我服务的所有队列 方法 getServiceQueues () IDArray getServiceQueues() 功能:获取我服务的所有队列 返回值:IDArray对象 参数:无 获取我的会话信息 方法 getSessionInfo () VideoSessionInfo getSessionInfo() 功能:获取我的会话信息 返回值:VideoSessionInfo对象 参数:无 客户开始排队 方法 startQueuing () void startQueuing(long queID, string cookie=““) 功能:客户开始排队 返回值:无 参数: queID ------ 排队的队列 cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件startQueuingRslt 客户停止排队 方法 stopQueuing () void stopQueuing(string cookie=““) 功能:客户停止排队 返回值:无 参数: cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件stopQueuingRslt 开始服务某个队列(可以多次调用，开启对多个队列的服务) 方法 startService () void startService(long queID, string cookie=““) 功能:开始服务某个队列(可以多次调用，开启对多个队列的服务) 返回值:无 参数: queID ------ 排队的队列 cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件startServiceRslt.开启成功后：a. 如果没有开启免打扰，那么系统会自动分配客户：将收到事件autoAssignUser；b. 如果开启免打扰，系统就不会分配客户，如需服务客户可调用：reqAssignUser 停止服务某个队列 方法 stopService () void stopService(long queID, string cookie=““) 功能:停止服务某个队列 返回值:无 参数: queID ------ 排队的队列 cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件stopServiceRslt 接受系统安排的客户 方法 acceptAssignUser () void acceptAssignUser(long queID, string userID, string cookie=““) 功能:接受系统安排的客户 返回值:无 参数: queID ------ 排队的队列 userID ------ 队列中的用户 cookie ------ 用户自定义数据(在回调时，回传给调用者) 拒绝系统安排的客户 方法 rejectAssignUser () void rejectAssignUser(long queID, string userID, string cookie=““) 功能:拒绝系统安排的客户 返回值:无 参数: queID ------ 排队的队列 userID ------ 队列中的用户 cookie ------ 用户自定义数据(在回调时，回传给调用者) 被拒绝的客户将重新回到队列的最前端 请求分配一个客户 方法 reqAssignUser () void reqAssignUser(string cookie=““) 功能:请求分配一个客户 返回值:无 参数: cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件reqAssignUserRslt.a. 当关闭免打扰时，系统将自动分配客户，无需调用此函数b. 当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配； 队列初始化操作结果 事件 initQueueDatRslt () void initQueueDatRslt(CRMEETSDK_ERR_DEF errCode, string cookie) 功能:队列初始化操作结果 返回值:无 参数: errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 cookie ------ 自定义用户数据 队列状态变化通知 事件 queueStatusChanged () void queueStatusChanged(QueueStatus queStatus) 功能:队列状态变化通知 返回值:无 参数: queStatus ------ 新的队列状态 排队信息变化通知 事件 queuingInfoChanged () void queuingInfoChanged( QueuingInfo queuingInfo) 功能:排队信息变化通知 返回值:无 参数: queuingInfo ------ 新的队列信息 开始排队操作结果 事件 startQueuingRslt () void startQueuingRslt(CRMEETSDK_ERR_DEF errCode, string cookie) 功能:开始排队操作结果 返回值:无 参数: errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 cookie ------ 自定义用户数据 停止排队操作结果 事件 stopQueuingRslt () void stopQueuingRslt(CRMEETSDK_ERR_DEF errCode, string cookie) 功能:停止排队操作结果 返回值:无 参数: errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 cookie ------ 自定义用户数据 开始服务队列操作结果 事件 startServiceRslt () void startServiceRslt(long queID, CRMEETSDK_ERR_DEF errCode, string cookie) 功能:开始服务队列操作结果 返回值:无 参数: queID ------ 服务的队列 errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 cookie ------ 自定义用户数据 停止服务队列操作结果 事件 stopServiceRslt () void stopServiceRslt(long queID, CRMEETSDK_ERR_DEF errCode, string cookie) 功能:停止服务队列操作结果 返回值:无 参数: queID ------ 服务的队列 errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 cookie ------ 自定义用户数据 系统自动安排客户 事件 autoAssignUser () void autoAssignUser(UserInfo usr) 功能:系统自动安排客户 返回值:无 参数: usr ------ 安排的用户，数据结构定义见 UserInfo 如果想停止系统的自动分配，请通setDNDStatus设置免打扰功能； 系统取消已经安排的客户 事件 cancleAssignUser () void cancelAssignUser(long queID, string usrID) 功能:系统取消已经安排的客户 返回值:无 参数: queID ------ 服务的队列 usrID ------ 用户id 请求分配客户操作结果 事件 reqAssignUserRslt () void reqAssignUserRslt(CRMEETSDK_ERR_DEF errCode, UserInfo usr, string cookie) 功能:请求分配客户操作结果 返回值:无 参数: errCode ------ 操作结果代码，CRMEETSDK_NOERR为成功操作 usr ------ 分到的用户 cookie ------ 自定义用户数据 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:40 "},"VideoUIObject.html":{"url":"VideoUIObject.html","title":"VideoUI对象","keywords":"","body":"VideoUI对象 VideoUI是视频显示控件，它显示设定的用户的视频; 设置显示的目标用户视频 方法 setVideo () void setVideo(string userID, long videoID=-1) 功能:设置显示的目标用户视频 返回值:无 参数: userID ------ 目标用户ID videoID ------ 用户的指定视频设备（-1，代表用户的默认视频设备） 获取当前显示的用户 方法 getUserID () string getUserID() 功能:获取当前显示的用户 返回值:用户ID 参数:无 获取当前显示的用户的视频设备 方法 getVideoID () string getVideoID() 功能:获取当前显示的用户的视频设备 返回值:用户ID 参数:无 拍照 方法 savePic () long savePic(string pathFileName) 功能:拍照 返回值:0:成功； 非0：保存遇到的错误码； 参数:无 清空缓存的图像 方法 clear () void clear() 功能:清空缓存的图像 返回值:无 参数:无 检查图像是否为空 属性isPicEmpty Long isPicEmpty 功能:检查图像是否为空 返回值:无 参数:无 可读.0: 有图像， 1:无图像 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 16:54:29 "},"ScreenShareUIObject.html":{"url":"ScreenShareUIObject.html","title":"ScreenShareUI对象","keywords":"","body":"ScreenShareUI对象 ScreenShareUI是远端屏幕显示控件。 拍照 方法 savePic () long savePic(string pathFileName) 功能:拍照 返回值:0:成功； 非0：保存遇到的错误码； 参数:无 清空缓存的图像 方法 clear () long savePic(string pathFileName) 功能:清空缓存的图像 返回值:0:成功； 非0：保存遇到的错误码； 参数:无 检查图像是否为空 属性isPicEmpty long isPicEmpty 功能:检查图像是否为空 返回值:无 参数:无 可读.0: 有图像, 1:无图像 控制功能是否开启 属性ctrlOpen bool ctrlOpen 功能:控制功能是否开启 返回值:无 参数:无 可读、可写.true: 开启， false:关闭 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 17:40:03 "},"OtherObjects.html":{"url":"OtherObjects.html","title":"其他对象","keywords":"","body":"IDArray对象 CLSID:{3EF6CA8A-3C5D-4353-92B5-CE0EC5157BA6} Long类型数据列表 控制功能是否开启 属性ctrlOpen bool ctrlOpen 功能:控制功能是否开启 返回值:无 参数:无 可读、可写.true: 开启， false:关闭 从IDArray中获取某个ID 方法 item () long item(long index) 功能:从IDArray中获取某个ID 返回值:数组中的第index个ID 参数: index ------ 第几个对象； index=0代表取第一个对象 清空数据 方法 clear () Void clear() 功能:清空数据 返回值:无 参数:无 追加一个ID到数组未尾 方法 append () Void append(Long ID) 功能:追加一个ID到数组未尾 返回值:无 参数:无 StrArray对象 CLSID:{E592EF62-3258-4442-AB51-2DC17FD883DE} 字符串列表 string个数 属性count long count 功能:string个数 返回值:无 参数:无 可读. 从StrArray中获取某个string 方法 item () string item(long index) 功能:从StrArray中获取某个string 返回值:数组中的第index个字符串 参数: index ------ 第几个对象； index=0代表取第一个对象 清空数据 方法 clear () Void clear() 功能:清空数据 返回值:无 参数:无 追加一个ID到数组未尾 方法 append () Void append(string str) 功能:追加一个string到数组未尾 返回值:无 参数:无 OleSize对象 CLSID:{4147F4EB-C2B5-4a88-9ACF-F64FE8A0E172} 宽度 属性width long width 功能:宽度 返回值:无 参数:无 可读、可写 高度 属性height long height 功能:高度 返回值:无 参数:无 可读、可写 OleRect对象 CLSID:{E03B03B1-6F85-421b-87FF-73381CA9A007} 矩型区域左边 属性left long left 功能:矩型区域左边 返回值:无 参数:无 可读、可写 矩型区域顶边 属性top long top 功能:矩型区域顶边 返回值:无 参数:无 可读、可写 矩型区域右边 属性right long right 功能:矩型区域右边 返回值:无 参数:无 可读、可写 矩型区域底部 属性bottom long bottom 功能:矩型区域底部 返回值:无 参数:无 可读、可写 MembersInfo对象 CLSID:{BF151791-69A2-4187-AFD0-AFDA7F8E2500} MembersInfo是视频设备列表对象； MemberInfo对象个数 属性count long count 功能:MemberInfo对象个数 返回值:无 参数:无 可读 从MembersInfo中获取某个MemberInfo对象 属性item MemberInfo item(long index) 功能:从MembersInfo中获取某个MemberInfo对象 返回值:无 参数: index ------ 第几个对象； index=0代表取第一个对象 可读 MemberInfo对象 CLSID:{7BE4EC79-4867-40fa-9DC5-6459E06C46CA} MemberInfo是单个用户的信息； 用户ID 属性userID string userID 功能:用户ID 返回值:无 参数:无 可读 设备名称 属性nickName string nickName 功能:设备名称 返回值:无 参数:无 可读 音频状态 属性audioStatus string audioStatus 功能:音频状态 返回值:无 参数:无 可读 视频状态 属性videoStatus string videoStatus 功能:视频状态 返回值:无 参数:无 可读 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-17 18:06:38 "}}
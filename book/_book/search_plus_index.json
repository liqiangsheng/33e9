{"./":{"url":"./","title":"Demo说明","keywords":"","body":"Demo程序介绍 Examples 目录下Demo程序配置和功能简介。 视频会议 JavaScript编写，主要实现了透明传输，创建进入视频会议，用会议号进入视频会议，会议内视频墙、屏幕共享、音视频设置、IM聊天。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的Meeting(web)->index.html 输入服务器地址和用户ID，登录 输入会议主题，创建并进入会议 进入视频会议主界面 第三方进入会议，输入会议号进入 本地双录 JavaScript编写，主要实现本地入会，创建会议，进入会议，会议内录制、上传录制、音视频设置、视频播放、单双摄像头选择。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的RecordDemo(web)->index.html 输入服务器地址和用户ID，登录 点击选择创建并进入会议 进入本地双录主界面 远程双录 JavaScript编写，主要了利用队列系统进行用户分配，然后呼叫分到的用户，双方进入同一个远程会话，创建会议，进入会议，会议内录制、pcm文件录制、上传录制、音视频设置、视频播放、屏幕共享、IM聊天。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的RemoteRecordDemo(web)->index.html 输入服务器地址和用户ID，登录(坐席) 点击开启服务器。等待连接(坐席) 输入服务器地址和用户ID，登录(客户) 点击连接服务器(客户) 等待排队(客户) 进入远程双录主界面(坐席) 进入远程双录主界面(客户) 视频呼叫 JavaScript编写，主要了利用队列系统进行用户分配，然后呼叫分到的用户，双方进入同一个视频会话，创建视频，进入视频，视频内录制、音视频设置、发送文件、截图。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的VideoCall(web)->index.html 输入服务器地址和用户ID，登录(坐席) 点击开启服务器。等待连接(坐席) 输入服务器地址和用户ID，登录(客户) 点击连接服务器(客户) 等待排队(客户) 进入远程双录主界面(坐席) 进入远程双录主界面(客户) © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 20:28:09 "},"Explain.html":{"url":"Explain.html","title":"说明","keywords":"","body":"云屋视频SDK参考 此版本适合V3.6版本的SDK 说明 会议SDK结构、SDK开发流程、SDK浏览器开发环境。CloudroomVideo SDK for Web支持的浏览器有：IE8,IE9,IE10,IE11，chrome44及以下(包含chrome44)。 sdk说明 doc(文档说明文件夹） fonts scripts styles callback.js.html CloudroomVideoSDK for Web开发指南.docx（web端开发指南） CRMeet.CbProxy.html CRVideo.CbProxy.html CRVideo.Container.html CRVideo.MediaContainer.html CRVideo.ScreenShareContainer.html CRVideo.VideoContainer.html error.js.html global.html index.html（入口文件） init.js.html live.js.html module-cr_callback.html module-cr_error.html examples(四个demo案例文件夹) Meeting(web)（会议demo） RecordDemo(web)（本地双录demo） RemoteRecordDemo(web)（远程双录demo） VideoCall(web)（视频会议demo） js CloudroomVideoSDK.js（js sdk文件） CloudroomVideoSDK.min.js（js sdk压缩文件） CloudroomVideoSDK_iePatch.js（ie8专用js sdk文件） CloudroomVideoSDK.exe（客户端插件） history.txt（历史版本文件） readme.txt（readme文件 开发准备 JavaScript 的开发工具有很多，开发者可根据自己的喜好进行选择。在此，我们推荐开发者使用 dreamwaver 作为自己的开发工具，本套开发指南也是针对 dreamwaver 开发环境下进行编写的。 安装插件 首先要安装开发插件，CloudroomVideo SDK for Web 提供的所有 JavaScript 接口都是基于这个插件实现，进行web开发之前需要确保插件已经安装成功，双击SDK目录下的开发环境下进行编写的。 选择安装 插件会自动开始安装 完成安装 导入SDK文件 将SDK包js子目录下的CloudroomVideoSDK.js和CloudroomVideoSDK_iePatch.js文件拷贝到自己的web开发环境当中 引用CloudroomVideoSDK.js 如果是IE开发，还需要引用补丁文件 浏览器版本的支持说明 Cloudroom SDK支持chrome 44及以下版本（chrome45版本后不再支持npapi插件），chrome 42以上版本缺省不支持插件，需要手工打开，打开方式如下： 一：在chrome浏览器输入“chrome://flags” 二：启用 三：在chrome浏览器输入“chrome://plugins” 四：找到“CloudroomVideoSDK”，“启用”并勾选“始终允许运行” 五：重启浏览器 基本流程 流程1：（不登录，只参加会议）SDK初始化 -> 设置服务器地址->（参会）-> 反初始化 流程2：（登录后拥有身份，可进行“排队、呼叫、创建会议、参会”等业务）SDK初始化 -> 设置服务器地址-> 登录 ->（排队、呼叫、创建会议、参会）-> 注消 -> 反初始化 SDK初始化 其中oemID为向云屋科技申请的代理商ID，初始化失败会返回对应的错误码 成功返回 SDK反初始化 设置服务器地址   支持单个服务器地址（如：www.cloudroom.com）或多个服务器地址串（如：www.cloudroom.com:8080;183.60.47.52:8080;）,此接口并不会对服务器地址的有效性进行验证，请保证地址准确。 登录   登录会有结果事件通知，成功事件CRVideo_LoginSuccess，失败事件CRVideo_LoginFail，失败事件的错误码参见CloudroomVideoSDK.js文件的详细描述。 注销   退出程序时，必须注销本次登录，然后再进行SDK反初始化操作 呼叫和排队   CloudroomVideo SDK for Web为开发者提供呼叫、排队功能。   SDK目录的examples/VideoCall(web)文件夹为视频呼叫的demo。这个demo主要展示的某坐席用户服务于某个队列，系统把这个队列里的排队用户分配给此坐席用户，经过一系列握手之后，再进行视频通话的功能。 业务流程说明 坐席客户:初始化SDK->登录->取得队列信息->服务于某个队列->接受某个排队用户->创建会议->呼叫排队用户->进入会议->音视频通话->挂断/被挂断->停止服务->注销->卸载SDK 排队客户:初始化SDK->取得队列信息->排队于某个队列->接受呼叫->进入会议->音视频通话->挂断/被挂断->注销->卸载SDK 时序图 坐席客户与排队客户通讯的时序图如下所示:   坐席客户在接受排队用户时，需要创建一个会议，创建成功后把排队用户呼叫进会议中，再进行后面的业务功能操作。用户与用户之间的各种通信功能，如音视频通话，屏幕共享，影音共享等等，必须依托于会议存在。后面还会对会议功能有更详细的说明。 注意事项 A.队列不能由SDK创建，应在Web上先配好; B.一个客服可以服务多个队列，但一个客户只在一个队列排队； C.多个坐席客户可同时服务于一个队列; D.队列有优先级，客服服务多个队列时，将从高优先级的队列服务起。（不同优先级的客户可以通过排队不同队列来实现。 这样比在一个队列插队好，不会引起其他排队用户等待数增加） 会议   CloudroomVideo SDK for Web为开发者提供的音视频通信功能，屏幕共享，影音共享等功能，须在会议里进行。 业务流程说明 创建一个会议:初始化SDK->登录->创建会议->其他用户参加会议->音视频通话、屏幕共享、影音共享等->离开会议->注销->卸载SDK 参加一个会议：(此处用户未登录参会，实际上登录也可参会)初始化SDK->根据会议号加入一个会议->音视频通话、屏幕共享、影音共享等->离开会议->卸载SDK 时序图 一次完整的会议时序图如下所示: 注意事项 A.在SDK初始化且登录会议成功后，才能进行各种会议功能。 B.如果只是参会，可以不登录；（如上图参会者） C.离开会议是没有响应消息的（在网络不通时离开会议也不会退不出去），但“结束会议”时有响应的, 只有收到结束成功消息，才真正算结束成功了。 音视频通讯   CloudroomVideo SDK for Web为开发者提供便捷的音视频通讯接口，通过以下几步的操作，可以在会议中集成音视频交互功能。音视频通讯需在会议里进行。 参会人信息   会议里可以通过接口CRVideo_GetAllMembers获取当前参加会议的所有成员的详细信息，接口如下所示：   会议里可以通过接口CRVideo_GetMemberInfo获取指定成员的详细信息，接口如下所示： 打开音频 先可以通过接口CRVideo_SetAudioCfg设置本地的音频参数，接口如下所示： 通过接口CRVideo_SetMicVolume设置麦克风的音量大小，接口如下所示： 通过接口CRVideo_OpenMic和CRVideo_CloseMic打开和关闭自已或他人的麦克风，接口如下所示： (取得用户麦克风是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 打开视频 计算机可拥有多个摄像头，通过接口CRVideo_GetVideoDevices获取指定用户的视频设备列表(CRVideo_VideoDeviceInfo:用户ID,设备id,设备名称)，接口如下所示： 通过接口CRVideo_SetDefaultVideo设置指定用户的默认摄像头，接口如下所示: 通过接口CRVideo_SetVideoCfg配置视频的清晰度、帧率、码率等； 通过接口CRVideo_OpenVideo和CRVideo_CloseVideo开启或关闭指定用户的摄像头，接口如下所示： (取得用户摄像头是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 会议录制 参会过程中可将视频、音频录制成视频。   先通过接口CRVideo_StartRecord开启录制，参数说明请参考截图，接口如下所示：   再通过接口CRVideo_SetRecordVideos，配置录制的视频内容；   可以通过接口CRVideo_StopRecord停止录制，接口如下所示： 其他接口   更多的功能接口，请参考SDK目录的doc文件夹。如图所示，打开doc文件夹下的index.html。 主要组件 SDK是由众多的DLL组件组合而成的，对外提供以下几个组件： 基础组件 CloudroomVideoSDK 管理组件 CloudroomVideoMgr 队列组件 CloudroomQueue Http文件管理组件 CloudroomHttpFileMgr 视频会议组件 CloudroomVideoMeeting 视频显示组件 CloudroomVideoUI 屏幕共享画面显示组件 CloudroomScreenShareUI 影音显示组件 CloudroomMediaUI 基础组件CloudroomVideoSDK CLSID: {07EFD662-A1BB-4d8d-9BEE-F7E43E5FEBF5} ProgID: npCloudroomVideoSDK.CloudroomVideoSDK MIME TYPE: application/x-cloudroom-videosdk CloudroomVideoSDK是基础组件，是整个SDK使用的基础。 该组件一个进程内只能创建一个实例，直到应用退出时才反初始化并销毁。 组件使用过程主要包括： 1. 创建组件实例 2. 执行初始化 3. 程序退出时执行反初始化 管理组件CloudroomVideoMgr CLSID: {120AD2B0-68F2-46c6-88D8-52173F501C0F} ProgID: npCloudroomVideoSDK.CloudroomVideoMgr MIME TYPE: application/x-cloudroom-videomgr CloudroomVideoMgr是登录、呼叫、会议创建管理和透明传输类。 该组件一个进程内只能创建一个实例，实现了入会前的相关功能。 组件使用过程主要包括： 1. 创建组件实例 2. 登录 3. 创建会议 注意: 只有在CloudroomVideoSDK Init初始化成功后接口才可用。 队列组件CloudroomQueue CLSID: {9AAD199D-A02F-4513-875D-AA81091E44B9} ProgID: npCloudroomVideoSDK.CloudroomQueue MIME TYPE: application/x-cloudroom-queue CloudroomQueue是队列组件，它实现队列功能。 该组件一个进程内只能创建一个实例，是可选组件，用于用户分发，您可以使用它，也可以自已另外实现，这并不影响视频呼叫、音视频通话功能。 组件使用过程主要包括： 1. 创建组件实例，执行初始化 2. 队列获取，客户排队/座席服务 注意：只有在CloudroomVideoMgr登录成功后接口才可用。 Http文件管理组件CloudroomHttpFileMgr CLSID: {7E44F8C9-7C8D-4004-8F45-D9819D78663C} ProgID: npCloudroomVideoSDK.CloudroomHttpFileMgr MIME: application/x-cloudroom-httpfilemgr CloudroomHttpFileMgr是Http文件上传下载及文件管理类。 该组件一个进程内只能创建一个实例，主要应用于单方文件归档，单方文件下载，支持非云屋http服务器对接。 如果会议内临时文件共享，请使用CloudroomVideoMeeting中的会议网盘功能。 下载支持断点续传，上传暂不支持断点机制。 注意：只有在CloudroomVideoSDK初始化后接口才可用。 视频会议组件CloudroomVideoMeeting CLSID: {9E9DD983-A9F8-4dff-B694-B1AE1C708B1E} ProgID: npCloudroomVideoSDK.CloudroomVideoMeeting MIME TYPE: application/x-cloudroom-videomeeting CloudroomVideoMeeting是视频会议类。 该组件一个进程内只能创建一个实例，包含了视频会话相关的全部功能。 组件使用过程主要包括： 1. 创建组件实例 2. 进入会议 3. 会议内的各功能处理 4. 退出会议 注意：只有在CloudroomVideoSDK Init初始化成功后接口才可用。 进入视频会议可用以下组件： 视频显示组件CloudroomVideoUI CLSID: {8A6BBBDC-C6BE-4a47-92F3-F9581C3FB95E} ProgID: npCloudroomVideoSDK.CloudroomVideoUI MIME: application/x-cloudroom-videoui CloudroomVideoUI是视频显示组件，它显示设定的用户的视频。 该组件可以创建多个实例，然后分别配置大小、位置并设置要显示的用户ID和摄像头ID即可。 注意：只有在CloudroomVideoMeeting入会成功后才能正常工作。 屏幕共享画面显示组件CloudroomScreenShareUI CLSID: {6FF142C5-8A36-49d7-B627-D60B803550FC} ProgID: npCloudroomVideoSDK.CloudroomScreenShareUI MIME: application/x-cloudroom-screenshareui CloudroomScreenShareUI是屏幕共享显示组件，它用于显示会议内对方共享的屏幕图像。 该组件一个进程内只能创建一个实例，整个程序只能创建一个CloudroomScreenShareUI对象，用来接受显示他人开启共享后传过来的画面, 开启共享的接口是CloudroomVideoMeeting中的接口startScreenShare。 注意：只有在CloudroomVideoMeeting入会成功后才能正常工作。 影音显示组件CloudroomMediaUI CLSID: {93A618D5-2535-42d0-B72B-95705263F398} ProgID: npCloudroomVideoSDK.CloudroomMediaUI MIME: application/x-cloudroom-mediaui CloudroomMediaUI是影音显示组件，它用于显示自己或者对方会议内播放的影音图像和声音。 该组件一个进程内只能创建一个实例，整个程序只能创建一个CloudroomMediaUI对象，影音控制接口由CloudroomVideoMeeting统一提供。 注意：只有在CloudroomVideoMeeting入会成功后才能正常工作。 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 16:46:37 "},"IntegratedGuide.html":{"url":"IntegratedGuide.html","title":"集成指南","keywords":"","body":" SDK集成指南 为开发者集成音视频会话及相关高级功能提供相关指导，以下均为 js 代码，详细代码请参考 Examples 目录下 Demo 源代码。 文档中“会议”和“会话”含义等同。 开始音视频会话 快速创建并进入一个简单的音视频会话； 请先准备[说明]中的相关内容：1.安装视频SDK插件, 2.运行环境要求, 3.开发环境配置以及连接相关的麦克风摄像头并确认设备工作正常。 基本步骤如下： 初始化SDK 登录连接视频服务器 创建视频会话 进入会话 打开麦克风/摄像头 有其他人进入会话 退出会话 注销登陆 1. [初始化SDK] 初始化是整个SDK的使用基础，通常在程序启动的时候进行初始化(init)，退出的时候进行反初始化(uninit)，整个程序的生命周期中只进行一次初始化和反初始化。 相关API参考请见 初始化/反初始化 SDK内部的组件多为单例组件，整个程序中只能有一个实例，比如“基础组件”，“会议管理组件”，“视频会议组件”，具体请参见各个组件说明。 { //初始化 //\"CLOUDROOM\"为向云屋科技申请的代理商ID //g_location_dir为路径 var init = CRVideo_Init(\"CLOUDROOM\", g_location_dir); //确定初始化 g_init=true; //初始化失败会返回对应的错误码 if(init == CRVideo_WEB_OCX_NOTINSTALLED){ alertLayer(\"ocx未安装\"); }else if(init == CRVideo_OCX_VERSION_NOTUPPORTED){ alertLayer(\"不支持的浏览器\"); }else if(init == CRVideo_WEB_BROWER_NOTUPPORTED){ alertLayer(\"不支持的插件版本\"); }else if(init != 0){ alertLayer(\"CRVideo_init sdkErr\"+\"出错了\"+init); } } 2. [登录连接视频服务器] 设置视频服务器地址，使用云屋授权账号和自定义用户编号登录 相关API请参考 服务器地址，登录/注销 { //服务器名字 g_serverName = $(\"#server_name\").val() //账号 cr_account= $(\"#login_cpyname\").val() ||\"demo@cloudroom.com\"; //md5加密 cr_psw = md5($(\"#login_psd\").val()) || \"e10adc3949ba59abbe56e057f20f883e\"; //昵称 g_nickname = uuid(32,16) //自定义账号 g_userID = uuid(32,16) //设置服务器地址 CRVideo_SetServerAddr(g_serverName) //登录 CRVideo_Login(cr_account, cr_psw, g_nickname, g_userID, \"\") //登陆成功 操作成功则回调CRVideo_LoginSuccess, CRVideo_LoginSuccess.callback = function(userID,cookie){ //登录成功，开始创建视频会话，见下一步 } //登录失败 失败则回调CRVideo_LoginFail CRVideo_LoginFail.callback = function(sdkErr,cookie){ //登录出错，可以弹出错误提示，或调用登录接口再次重试登录 } } 3. [创建视频会话] 输入会议标题，创建一个没有密码的视频会话 相关API请参考 创建/销毁视频会议 { //创建会议 CRVideo_CreateMeeting(\"会议的的主题长度50字内\") //创建会议成功 CRVideo_CreateMeetingSuccess.callback=function(meetObj,cookie){ } //创建会议失败 CRVideo_CreateMeetingFail.callback = function(sdkErr,cookie){ } //监控会议掉线 CRVideo_MeetingDropped.callback=function(){ } //会议掉线 CRVideo_LineOff.callback=function(sdkErr){ } } 4. [进入会话] 用创建成功的会话信息（会议ID和密码）进入会话，其他用户也是利用此会话信息进入该会话。 相关API请参考 进入/退出/结束会议 { //进入会议 //1.会议id 2.会议密码 3.用户id 4.用户昵称 CRVideo_EnterMeeting(g_meetingId,g_meetingPsw,g_userID,g_nickname) //进入会议完成响应 CRVideo_EnterMeetingRslt.callback=function(sdkErr){ // CRVideo_NOERR==没有错误 成功 if(sdkErr == CRVideo_NOERR){ // * 暂未定义 1* @param {string} picID - 2 * @param {object} jsonval - CRVideo_SetPicResource(g_logo_id,{ //资源格式， 可取值：\"yuv420p\"，\"rgb32\"，\"picfile\"，\"picdat\" \"fmt\":\"picdat\", // fmt为\"yuv420p\"时： dat存放的是base64(yuv420p数据)； // fmt为\"rgb32\"时： dat存放的是base64(rgb32数据)； // fmt为\"picfile\"时： dat存放的是“本地文件名”； \"dat\":\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAWfSURBVHjapJd7bFRFFIfPbLetFYMKvkANBhFbHjaiKKQK4R1SRcHWRFADRgIqJKBYY9SoJCZK1IBgoGKMj2ii8lDRJkIAKYjiA5oYRIj4hwQoBHwCfex2r9+ce9zebrelLLP57Zl77pyZc+Y8Zq5rWVYm6RYPANSBGP2Y5NO7kedboSWgB0iBw6BOAvkK7FNO4MI3LXJGLd4B3y98LxPOhw7uRL4ZbAQvglrJocWy8Ppj1WZpcW+BwUA6QQGYKCm3BZnlyHY7WwWGYXUtKNPtPDPMRokv6F2YqwuK8d8acGkHY/0y/5pM1NJ/CBpcEHj+8+BD4qEcmuiaAmHQ5BFoKxDs1W6Ek/38L8a6bdBTFqI9+L8LOg/+blPC7+ZOMA48Df/ZrrkgyXxJmY6+I6GSgWr4Q8Fx+ovARlAD5kjCrYZ/Lf0CcDMYBIaY3GOgJMt87RBnknxx7pEsyi3Hiqeg67DW5+rfmnqhCyaDqezYy9CJvN+mwdvauiE7E/ro6V2QQHsn12fwf2XyheKCT+j7xV/neQ1+LtXtdu5x+n6BBSzEs8yg/3XGHLcj4w1o6FyBpCvLwl/KxGNZaAT9JSwwD1zJhCPgvwrvED6/G1oIFoKPwZdgQmSOfowdAP2x8xhodsVA2iAhW/HxVPoJsFjLTVIOwH+O53WgN1jBmDdNZgyoaT+P6wskjaRVygi8C3pkKIWv3QnoQNP+BgliCYQPkiu+RJ9n4waB7uB3HetkPRZntp6RbFIl3CmSpZGHIB0DLpUhlGdoNj2vZvBDmopJ/OrcqIza4IOykTF5ukj72hG2BhY/4cLqkHDpN3GWOZQh5C28BHwD7rE6v0CzoW3bYcWmt40dnKWG1KuljeYSZ7U3Fo2BhKtr57tmNxn+SigKugr6s6CHI76tA3PpV4Ej4FuVaX3fANZKk9shJ2OhxbGOsqDZbdUtFDknwp+J5tVovIh+Ff0i5TmNl2aefU14iedRWvkCGU//OpN9R0tyoLWgEv4V4A/bse2ZJTpOnP/CQH+klrcpJCLvk3akYuCFXwA+7Q6Yz33JPgpGI9vAAktN7mHwqRYxkUkZ7vDtJzDfjvCQnaoY7SPSW7Kp3f4EKCfygF5AnOa493OTWhLo+T8J/mvQc7UeBPIBz7UWQ+EM4e4WmuePapYFnBUp+ShUYNKY/4d6K+Z0cApu0iAMNOUo3ZqilWCAjdljbqiJBON6lQvUtU28Gw79y07U++EPBXtdqjytQBFJ9xm9sTlcbOZa2lbb83tgL5hm1zdv/Q9Wlp80N77hjY7phjapeANleUp4ykWqV9ewHUyxvs+WndBK5psG3QJ+A6XwW6C7bdx43k+IS2Ob/EhowDk9WDjPg/MlS3XJCJRjBOtJhhUbw98JbsK61dBdBDHx4bbxvIIx/ay6+kPtcmQHxjPuLffp1gjnuXifYZU/doVzP6yO0ea383vG+Ng5CAoiMePd0TfMBtc/cvtqkXQR9pa5WFy3o3XAbOu/AqYbRYmgkBLcy2p/wO8YpJ4JiizdvFX7LD19PVgG7gTH7dkf6xdosIY3JrHY2BPdAX8nGBKx0Efz22HUOn8R+Rn8aQHFQq7UsiAebrWsRbGR9Pvo+SF8M+guas57RevN+mE2/2ZkNrhUSfoIfxCslNza52BG6BK5ynirwHdW1Br0fhDuqlf4JLrcggJ1cT2jw3aZ5N5uw7bhTDjNlPFX8wpwR3hh1QOu0MYmNW2d7qreiKIZcDatCvhPuCcsmMvsC6tnZMwuLfFCxWy9kqVfrrJozkWRfK3zgV5Ql9B/l74/vi+2wGXL5Qjv/DfHM7yrN0XafJjsN+TW9ANVLy4+4GbZ1u+z8uvj4BpwkY0uz6ZA7s27sUUzu0+E212/rLO33qf7Oj4zy5Pps2+DfT01diJRaNVS238CDAAJMxEnQFPLmQAAAABJRU5ErkJggg==\" }); } 5. [打开麦克风/摄像头] 进入会话成功后，配置并打开自己的麦克风和摄像头 相关API请参考 麦克风/扬声器列表，麦克风设置，摄像头设备列表，视频设置，会议内可观看摄像头列表，开/关摄像头，视频状态，获取/设置默认视频，成员视频UI显示组件相关结构定义请参考 音频配置，用户视频信息，用户视频信息列表 { CRVideo_SetEnableMutiVideo(g_userID,true); // 是否可以打开更多的摄像头 传用户ID，bool CRVideo_OpenMic(g_userID) //打开麦克风 传用户ID // 获取系统上的麦克风设备列表// {string[]} 返回麦克风设备字符串列表 var micArr = CRVideo_GetAudioMicNames(); //获取音频参数 {CRVideo_AudioCfg} 返回cfg对象 var audioCfg = CRVideo_GetAudioCfg(); var micArrOptionsStr = \"\"; for(var i = 0;i\"+micArr[i]+\"\" }else{ micArrOptionsStr += \"\"+micArr[i]+\"\" } } micArrOptionsStr = \"默认设备\" + micArrOptionsStr $(micArrOptionsStr).appendTo(\"#mic_select\"); // 获取系统上的扬声器设备列表 // * @access public // * @returns {string[]} 返回扬声器设备列表 var spkerArr =CRVideo_GetAudioSpkNames() var spkerArrOptionsStr = \"\"; for(var i = 0;i\"+spkerArr[i]+\"\" }else{ spkerArrOptionsStr += \"\"+spkerArr[i]+\"\" } } spkerArrOptionsStr = \"默认设备\" + spkerArrOptionsStr $(spkerArrOptionsStr).appendTo(\"#spker_select\") // 设置默认的摄像头 // * @access public // * @param {string} userID - 用户ID // * @param {number} videoID - 摄像头ID CRVideo_SetDefaultVideo(g_userID,$(\"#video_select\").val()) // 获取用户所有的摄像头信息 userID @returns {CRVideo_VideoDeviceInfo[]} 返回设备列表 var videoList = CRVideo_GetAllVideoInfo(g_userID) //更新video配置 function updateVideoCfg(sizeType,fps,qp){ var cfg = {}; cfg.sizeType = sizeType; var fps = parseInt($(\"frame_input\").val()); if(fps20){ fps = 20; } cfg.fps = fps; cfg.maxbps = video_size_arr[sizeType][2]*1000; if(qp == 1){ cfg.qp_min = 22 cfg.qp_max = 36 }else if(qp == 0){ cfg.qp_min = 22 cfg.qp_max = 25 } // 系统视频参数设置 cfg - 设置参数 CRVideo_SetVideoCfg(cfg); // 配置远程影音共享时，图像质量参数 jsonCfg - json格式的字符串，详见VideoCfgOjb说明 CRVideo_SetMediacfg(cfg); } //打开用户的摄像头，以便本地、远端显示视频图像 CRVideo_OpenVideo(g_userID) // * 获取用户的摄像头状态 // * @access public // * @param {string} userID - 用户ID // * @returns {CRVideo_VSTATUS} 麦克风摄像头状态 var vStatus = CRVideo_GetVideoStatus(g_userID) if(vStatus == 0){ this.popup(\"没有可打开的视频设备\") }else if(vStatus == 2){ //打开用户的摄像头，以便本地、远端显示视频图像 CRVideo_OpenVideo(g_userID); }else { // 关闭用户的摄像头 CRVideo_CloseVideo(g_userID); } } 6. [有其他人进入会话] 其他人入会的步骤也是上述的[4、5]步，拿到会议信息后进入到他人创建的会议，此步骤的目的是为了实时关注比自己晚进来的人并刷新摄像头画面显示；如果想要获取之前进来的人，可以调用 getAllMembers 获取会议成员列表，也可以调用 getWatchableVideos 获取所有可以观看的摄像头列表进行加载。 用成员视频UI显示组件创建多个视频窗口，来显示进入会议内的成员。 相关API请参考 有人进入/离开会议通知，成员视频UI显示组件，会议内可观看摄像头列表相关结构定义请参考 用户视频信息列表 { * 获取会议内所有可观看的摄像头 * 只有摄像头打开才能被获取到,能获取到自已的和会议里其他人的； * @access public * @returns {CRVideo_VideoIDsObj[]} 对象VideoIDArray */ var videoArr = CRVideo_GetWatchableVideos() * 获取所有用户的信息 * @access public * @return {CRVideo_MemberInfo[]} 返回含多个成员信息 */ var meber = $.parseJSON(CRVideo_GetAllMembers());// 获取所有会员信息 //用户进入会议 相当于第二方监听第三方加入会议 CRVideo_UserEnterMeeting.callback = function(usrID){ 第三方进入的相关操作 } // 通知某用户离开了会议exitMeeting CRVideo_UserLeftMeeting.callback = function(id){ //第三方离开的相关操作 } 至此，一个简单的音视频会话就建立起来了。 7. [退出会话] 7.退出会话 在未注销的情况下可反复的进入退出同一个会议。 相关API请参考 进入/退出/结束会议 { /** * 离开会话 * 他人离开会话的回调事件CRVideo_UserLeftMeeting * @access public */ CRVideo_ExitMeeting() * 某用户离开了会议 * @callback CRVideo.CbProxy~CRVideo_UserLeftMeeting * @param {number} id - 离开会议的用户ID */ CRVideo_UserLeftMeeting.callback=function(用户ID){ } } 8. [注销登陆] 可重复的登录和注销。 相关API请参考 进入/退出/结束会议，登录/注销，初始化/反初始化 { //注销本次登陆 CRVideo_Logout() } 9.反初始化，退出SDK 执行反初始化后SDK功能不再可用。 相关API请参考 初始化/反初始化 { //反初始化 CRVideo_Uninit(); } 添加音视频会话功能 添加会议内的高级功能 音视频控制 进入会话后实现设备的加载、选择、设置 开关麦克风 监控麦克风状态变化 设置麦克风和扬声器音量 监控麦克风声音大小变化 1.开关麦克风 通过传入参数来控制开关的对象，如果是本地机器上的麦克风，需要传入自己的ID，如果要远程开关他人麦克风，则传入对方的ID 相关API请参考 麦克风、扬声器设备的获取，开/关麦克风 /** * 打开自己的麦克风 * 打开自已的麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到； * @param {string} userID - 用户的ID * @access public */ CRVideo_OpenMic(userid); /** * 关闭自己的麦克风 * 关麦操作是立即生效的，本地会立即停止采集； * @access public * @param {string} userID - 登录成功后分配的userID */ CRVideo_CloseMic(userid); 2.监控麦克风状态变化 1. 开关自己或他人的的麦克风都会收到该回调函数 2. 自己的麦克风被他人开关也会收到该回调函数 3. 也可主动获取麦克风状态，一般用于各种判断 相关API请参考 麦克风状态变化 相关结构定义请参考 麦克风状态 //连接状态变化委托 //摄像头列表更新 通知用户的视频设备有变化 CRVideo_VideoDevChanged.callback =function(userID){ } //摄像头状态改变 // 1会话中设备的所有者ID 2旧状态 3新状态 CRVideo_VideoStatusChanged.callback = function(userID,oldStatus,newStatus){ if(g_userID == userID){ /**视频处于打开状态（软开关）*/ /**向服务器发送打开消息中 */ if(newStatus !=CRVideo_VSTATUS.VOPEN && newStatus !=CRVideo_VSTATUS.VOPENING){ CRVideo_OpenVideo(g_userID); } } } /* 视频状态 * @enum { number } */ CRVideo_VSTATUS = { /**视频状态未知*/ VUNKNOWN:0, /**没有视频设备*/ VNULL:1, /**视频处于关闭状态（软开关）*/ VCLOSE:2, /**视频处于打开状态（软开关）*/ VOPEN:3, /**向服务器发送打开消息中 */ VOPENING:4, } 3.设置麦克风和扬声器音量 相关API请参考 麦克风音量,扬声器音量 /** * 设置麦克风音量大小 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ var SetMicVolume = CRVideo_SetMicVolume(level) /** * 设置本地扬声器音量 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ var SetSpeakerVolume = CRVideo_SetSpeakerVolume(value) 4.监控麦克风声音变化 可用来实时展示当前麦克风采集到声音的大小 相关API请参考 麦克风声音变化 //麦克风音量波动 /** * SDK通知用户的说话声音强度更新 * @callback CRVideo.CbProxy~CRVideo_MicEnergyUpdate * @param {string} userID - 用户ID * @param {number} oldLevel - 原来的说话声音强度 * @param {number} newLevel - 现在的说话声音强度 */ CRVideo_MicEnergyUpdate.callback=function(userID ,oldLevel,newLevel){ } 录制 实现摄像头和屏幕录制，并可上传到服务器 录制内容配置 开始、停止录制 录制文件的大小、时长、状态 设置录制文件是否加密 录制文件列表 录制文件列表添加、删除文件 上传、取消上传录制文件 回放录制文件 1.录制内容配置 相关API请参考 录制内容配置 相关结构定义请参考 录制内容配置 /** * 开始录制 * @access public * @param {string} recordPath - 录像存储的路径 * @param {CRVideo_RECORD_AUDIO_TYPE} audioType - 音频类型 * @param {number} frameRate - 帧率，建议不要太高；(取值1~24) * @param {number} recordWidth - 视频宽度 * @param {number} recordHeight - 视频高度 * @param {number} bitRate - 录制的最高码率，当图像变化小时，实际码率会低于此值。建议：640*360: 500000; (500kbps)，1280*720：1000000; (1mbps)，1920*1080: 2000000; (2mbps) * @param {number} defaultQP - 目标质量(推荐:36, 中:28, 高:22) * @param {CRVideo_REC_DATATYPE} recDataType - 录制内容类型（视频+音频） * @param {number} recDataType - 录制内容类型（视频+音频） * @param {number} isUploadOnRecording - 是否录制的同时上传 1为是，0为否 */ CRVideo_StartRecordIng(recordPath,audioType,frameRate,recordWidth,recordHeight,bitRate,defaultQP,recDataType,isUploadOnRecording) 2.开始/停止录制 1. 先开始录制，配置好录制文件信息 2. 然后更新录制内容配置 3. 在录制过程中可以多次更新录制配置，从而变更录制内容 相关API请参考 开始/停止录制 相关结构定义请参考 录制内容类型，录制文件配置 //定义录制文件参数 var cfg = {}； var date = new Date(); var year = date.getFullYear(); var mouth = date.getMonth()+1; var day =date.getDate(); var hour = date.getHours(); var minute = date.getMinutes(); var second = date.getSeconds(); cfg.filePathName = year+'-'+mouth+'-'+day+'-'+hour+'-'+minute+'-'+second+'.mp4';; cfg.recordWidth = 1280; //宽度 cfg.recordHeight = 720; //高度 cfg.frameRate = 15; //帧率 cfg.bitRate = 1000000; //码率 cfg.defaultQP = 24; //清晰度 cfg.recDataType = recDataType; //录制内容 //开始录制 CRVideo_StartRecordIng(cfg) //开始录制后，更新录制配置 updateRecord(); //上方自定义函数 //停止录制 CRVideo_StopRecord(); 3.录制文件的大小、时长、状态 相关API请参考录制文件大小，时长，录制状态变化通知 相关结构定义请参考 错误码定义, 录制状态，通知录制文件状态变化 /** * 获取当前录制的文件大小（以字节为单位） * @access public * @returns {number} 返回录制文件大小（以字节为单位） */ //获取当前录制的文件大小（以字节为单位） var CRVideo_GetRecFileSize = CRVideo_GetRecFileSize() /** * 获取录制的文件时长（以秒为单位） * @access public * @returns {number} 返回录制的文件时长（以秒为单位） */ var CRVideo_GetRecDuration = CRVideo_GetRecDuration() //录制异常，录制将自动停止 CRVideo_RecordErr.callback=function(sdkErr){ //录制发生错误，代码： 见[错误码定义] } // sdk通知录制文件状态更改 fileName本地文件路径 state - 状态 0 未上传 1 上传中 2已上传 CRVideo_NotifyRecordFileStateChanged.callback=function(fileName,state){ //fileName, 文件名 //state, 状态 } 4.设置录制文件是否加密 启动录制时调用，则本次录制是否加密本地录制文件，也可全局配置，这样每一次录制都是加密的。 相关API请参考 设置录制文件是否加密 /** * 设置本地生成的录制文件是否加密 * @access public * @param {number} encrypt - 1表示加密 0表示不加密 */ CRVideo_SetRecordFileEncrypt (encrypt) 5.录制文件列表 相关API请参考 录制文件列表 相关结构定义请参考 录制文件列表 /* 取得所有录制文件信息 * @access public * @return {CRVideo_RecordFileInfo[]} - 返回含多个录制文件信息 */ var g_getAll_videfile_list = CRVideo_GetAllRecordFiles(); 6.录制文件列表添加、删除文件 1. 添加录制文件到录制文件列表，这样此文件便可上传和回放 2. 移除文件时本地文件会被删掉，正在上传的文件会被取消上传，已经上传的文件不受影响 相关API请参考 录制列表添加/删除文件 /** * 第三方录制文件调用此接口后可进行本地回放和上传到服务器record下 * @typedef {object} CRVideo_AddFileToRecordMgr - 添加本地文件到录制文件管理中 * @property {string} fileName - 文件名，不含路径 * @property {string} filePath - 文件路径，不含文件名 * @access public * @return {CRVideo_AddFileToRecordMgr[]} - -1：本地文件不存在，0：成功，1：文件已经被添加过 */ var AddFileToRecordMgr = CRVideo_AddFileToRecordMgr(fileName,filePath); /** * 删除本地的录制文件，上传中的文件会被取消上传 * @access public * @param {string} filename - 文件名，全路径 */ CRVideo_RemoveFromFileMgr(filename) 7.上传、取消上传录制文件 参数是绝对路径文件名 相关API请参考 上传/取消上传录制文件，通知录制文件上传进度，通知录制文件状态变化 相关结构定义请参考 录制文件列表 // /上传文件 filename - 文件名，全路径 CRVideo_UploadRecordFile(fileName); // 取消视频上传的方法 CRVideo_CancelUploadRecordFile(fileName); // 通知录制文件上传进度 fileName - 文件名 percent - 进度0-100 CRVideo_NotifyRecordFileUploadProgress.callback = function(fileName,percent){ // 上传文件：fileName // 上传进度：percent } //sdk通知录制文件状态更改 fileName本地文件路径 state - 状态 0 未上传 1 上传中 2已上传 CRVideo_NotifyRecordFileStateChanged.callback = function(fileName,state){ //fileName, 文件名 //state， 状态 } 8.回放录制文件 此接口需要配合影音共享UI显示组件或者影音播放相关的接口进行画面和声音展示 相关API请参考 回放录制文件 //开始回放 fileName 文件名 CRVideo_PlaybackRecordFile(fileName) 文件上传下载 网盘容量、文件列表 网盘文件操作（上传、下载、暂停、删除） 1.网盘容量、已上传文件列表 获取网盘的使用情况和已经上传到服务器的文件列表 相关API请参考 会议网盘容量，获取网盘文件列表 相关结构定义请参考 网盘文件，网盘文件列表 /** * 获取会议网盘的容量信息 说明：调用结果请见事件getNetDiskSummaryRslt * @access public */ CRVideo_GetNetDiskSummary(public) ; /** * 获取网盘用户共享文件列表，即使用makeNetDiskFileID中参数fileType为0的生成的fileID上传的文件 * @access public */ CRVideo_GetNetDiskFileList(public) /* SDK通知获取网盘容量信息结果 * @callback CRVideo.CbProxy~CRVideo_GetNetDiskSummaryRslt * @param {number} diskLimit - 网盘总容量 * @param {number} diskUsed - 网盘已用容量 */ CRVideo_GetNetDiskSummaryRslt.callback=function(diskLimit,diskUsed){ } /** * SDK通知获取网盘文件列表 * @callback CRVideo.CbProxy~CRVideo_GetNetDiskFileListRslt * @param {string[]} fileList - 网盘文件列表，json格式，定义见NetDiskObjs */ CRVideo_GetNetDiskFileListRslt .callback=function(fileList){ } 2.网盘文件操作 1.上传、下载、删除、暂停（上传下载）、取消操作 2.上传时需要调用SDK接口生成网盘文件ID 相关API请参考 生成网盘文件ID，上传/下载/删除网盘文件，取消网盘文件操作，暂停/继续网盘文件传输，获取网盘容量信息结果，获取网盘文件列表结果，删除网盘文件结果，网盘容量不足通知，通知网盘文件传输进度 /** * 生成网盘文件全局唯一ID * @access public * @param {number} fileType - 文件类型，0:用户共享文件，1:程序使用文件 * @param {string} newFileName - 传入的全局唯一文件名，建议带文件后缀 * 说明：1.fileType等于0时，为会议网盘共享文件，上传的文件可通过; * 2.getNetDiskFileList获取到文件列表详情 * 3.fileType等于1时，用户程序内资源文件，如白板的背景图片，无法获取文件详情 * 4.两种文件类型都要调用uploadNetDiskFile和downloadNetDiskFile进行上传和下载 */ CRVideo_MakeNetDiskFileID(fileType,newFileName) /** * 上传文件到网盘 * @access public * @param {string} fileID - 网盘文件ID * @param {string} localFilePath - 本地文件路径,含文件名 */ CRVideo_Uploadnetdiskfile(fileID,localFilePath) /** * 从网盘中下载文件 * @access public * @param {string} fileID - 网盘文件ID * @param {string} localFilePath - 本地文件路径，全路径 */ CRVideo_Downloadnetdiskfile(fileID,localFilePath) /** * 删除网盘文件 * @access public * @param {string} fileID - 网盘文件ID */ CRVideo_Deletenetdiskfile(fileID) /** * 设置网盘文件传输暂停或继续 * @access public * @param {string} fileID - 网盘文件ID * @param {bool} bTranPause - 是否暂停 */ CRVideo_SetNetDiskTransportPause(fileID,bTranPause) /** * 取消网盘文件操作（上传/下载） * @access public * @param {string} fileID - 网盘文件ID */ CRVideo_Canclenetdiskfile(fileID) /* SDK通知删除网盘文件结果 * @callback CRVideo.CbProxy~CRVideo_NotifyNetDiskFileDeleteRslt * @param {string} fileID - 网盘文件id * @param {number} isSucceed - 是否成功 1 成功 0 失败 */ CRVideo_NotifyNetDiskFileDeleteRslt.callback=function(fileID,isSucceed){ } /* SDK通知网盘上传或下载进度 * @callback CRVideo.CbProxy~CRVideo_NotifyNetDiskTransforProgress * @param {string} fileID - 网盘文件id * @param {number} percent - 进度0-100 * @param {number} isUpload - 是否是上传 1 上传 0 下载 */ CRVideo_NotifyNetDiskTransforProgress.callback=function(fileID,percent,isUpload){ } 屏幕共享 开始、停止共享 远程操作权限 1.开始、停止共享 使用接口启动共享，出现共享内容显示组件后，用组件上的功能开始标注和结束共享。 相关API请参考 屏幕共享配置，开始/停止屏幕共享，屏幕共享状态，开始/停止屏幕共享操作结果，开始/停止屏幕共享通知 相关结构定义请参考 屏幕共享配置 /** * 设置屏幕共享配置 * @access public * @param {CRVideo_ScreenShareCfgObj} jsonCfg 屏幕共享配置 */ CRVideo_SetScreenShareCfg(jsonCfg) /** * 开启屏幕共享 * 操作完成则回调CRVideo_StartScreenShareRslt * @access public */ CRVideo_StartScreenShare(public) /** * 停止屏幕共享 * @access public */ CRVideo_StopScreenShare(public) /** * 开启屏幕共享的响应事件 * @callback CRVideo.CbProxy~CRVideo_StartScreenShareRslt * @param {number} sdkErr - 操作失败代码,定义见cr/error */ CRVideo_StartScreenShareRslt.callback=function(sdkErr){ } /** * 停止屏幕共享的响应事件 * @callback CRVideo.CbProxy~CRVideo_StopScreenShareRslt * @param {number} sdkErr - 操作失败代码,定义见cr/error */ CRVideo_StopScreenShareRslt.callback=function(sdkErr){ } /** * 通知他人开启了屏幕共享 * @callback CRVideo.CbProxy~CRVideo_NotifyScreenShareStarted */ CRVideo_NotifyScreenShareStarted.callback=function(){ } /** * 通知他人停止了屏幕共享 * @callback CRVideo.CbProxy~CRVideo_NotifyScreenShareStopped */ CRVideo_NotifyScreenShareStopped.callback=function(){ } 2.远程操作权限 把共享区域的操作控制权限赋予某人，自己也可以获取他人赋予的操作权限 相关API请参考 赋予/收回远程屏幕控制权限，通知赋予/收回屏幕共享操作权限 ```cs /** * SDK通知远程控制权限给予了某人 * @callback CRVideo.CbProxy~CRVideo_NotifyGiveCtrlRight * @param {string} operId - 操作的用户ID * @param {string} targetId - 控制权限给予了谁 */ CRVideo_NotifyGiveCtrlRight(operId,targetId) /** * SDK通知收回远程控制 * @callback CRVideo.CbProxy~CRVideo_NotifyReleaseCtrlRight * @param {string} operId - 操作的用户ID * @param {string} targetId - 收回了谁的控制权限 */ CRVideo_NotifyReleaseCtrlRight(operId,targetId) 影音播放共享 播放配置 播放、暂停、停止 设置播放进度 文件列表、播放信息、播放音量 1.播放配置 此配置主要是为了定义共享播放时会议内其他人看到的效果 相关API请参考 影音播放配置 相关结构定义请参考 视频尺寸定义 /** * 配置远程影音共享时，图像质量参数 * @access public * @param {string} jsonCfg - json格式的字符串，详见VideoCfgOjb说明 */ CRVideo_SetMediacfg(jsonCfg); 2.播放、暂停、停止 每次只能播放一个视频，当前播放需要先停止然后才能进行下一个视频播放； 开始播放参数可控制此播放是只有自己可见还是会议内所有人可见。 相关API请参考 开始/暂停/停止影音播放，通知影音打开/播放/暂停/停止，通知更新影音播放进度 /** * 开始播放影音 * @access public * 响应事件 如果播放成功，请关注通知事件notifyMediaOpened 如果播放失败，请关注通知事件notifyMediaStop * @param {string} filename - 文件名，全路径 * @param {number} locPlay - 是否仅仅本地播放（1:本地播放，0：会议内播放） * @param {number} bPauseWhenFinished - 是否播放完毕自动暂停在最后一帧 */ CRVideo_StartPlayMedia(filename,locPlay,bPauseWhenFinished) /** * 暂停或恢复播放影音 * @access public * @param {bool} bPause - ture为暂停，false为恢复 */ CRVideo_PausePlayMedia(bPause) /** * 停止播放影音 * @access public */ CRVideo_StopPlayMedia() 3.设置播放进度 可以通过播放组件上的工具条拖动来调整播放进度，也可以用代码来设置播放的进度 相关API请参考 设置播放进度 /** * 设置播放进度 * @access public * @param {number} pos - 设置播放位置，单位：秒 */ CRVideo_SetMediaplaypos(pos) 4.文件列表、播放信息、播放音量 相关API请参考 影音文件列表，影音播放信息，影音播放音量 相关结构定义请参考 影音文件 /** * 取得播放路径下的所有可播放文件 * @access public * @return {string[]} - 文件名列表； */ var GetAllFilesInMediaPaths = CRVideo_GetAllFilesInMediaPath() /** * 取得影音文件信息 * @access public * @param {string} userID - 用户id * @returns {CRVideo_MediaInfoObj} - 影音文件信息 */ var getmediainfo = CRVideo_Getmediainfo(userID) //设置当前播放的影音声音 var vol = 24; /** * 设置本地扬声器音量 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ CRVideo_SetSpeakerVolume(value) = vol; 聊天 实现会话内文本聊天，如果需要更加丰富的聊天内容，可自己传输文本格式，并进行相关解析 相关API请参考 发送IM文本消息，通知收到IM消息 /** * 发送IM消息 * 响应事件CRVideo_SendIMmsgRlst * @access public * @param {string} text - 发送的文本消息 * @param {string} UserID - 目标用户，如果用户ID为空，消息发送给会议内所有用户 * @param {string} cookie - 自定义用户数据 * @returns {string} - 任务id */ var CRVideo_SendIMmsgID = CRVideo_SendIMmsg(text,UserID,cookie) /** * 发送IM消息，SDK通知使用者发送结果 * @callback CRVideo.CbProxy~CRVideo_SendIMmsgRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendIMmsgRlst.callback=function(taskID,sdkErr,cookie){ } /** * SDK通知收到IM消息 * @callback CRVideo.CbProxy~CRVideo_NotifyIMmsg * @param {string} fromUserID - 消息来源 * @param {string} text - 消息内容 * @param {number} sendTime - 消息发送时间戳，从1970开始算起 */ CRVideo_NotifyIMmsg.callback=function(fromUserID,text,sendTime){ } 参会成员管理 获取会话内人员及相关信息，得到成员的userID后可以对其进行相关的远程音视频操作 相关API请参考 会议成员列表，会议成员信息 相关结构定义请参考 会议成员 /** * 获取所有用户的信息 //获取所有参会人 * @access public * @return {CRVideo_MemberInfo[]} 返回含多个成员信息 */ var GetAllMembers = CRVideo_GetAllMembers() /** * 获取指定用户的信息 //获取某个参会人的信息 * @access public * @param {string} userID - 用户ID * @return {CRVideo_MemberInfo} info - 返回用户userID的成员信息 */ var GetMemberInfo = CRVideo_GetMemberInfo(userID) 功能页同步 用户会话内同步所有人的功能，包括视频墙、影音共享、屏幕共享、电子白板 相关API请参考 设置/获取会话内主功能页，会话内主功能页切换通知 相关结构定义请参考 主功能类型 /** * 功能切换 * @access public * @param {number} mainPage -功能类型 * @param {string} pageID - 子页面标识（如创建白板时返回的boardID） */ CRVideo_Switchtopage(mainPage,pageID) /* SDK通知功能切换 //当他人切换功能页时，收到通知消息 * @callback CRVideo.CbProxy~CRVideo_NotifySwitchToPage * @param {CRVideo_MAIN_PAGE_TYPE} mainPage - 功能类型 * @param {string} pageID - 子页面标识 */ CRVideo_NotifySwitchToPage.callback = function(mainPage,pageID){ } 队列管理 利用队列功能，实现用户分配。使用队列时通常会有两种角色，坐席和客户，队列模块把排队的客户分配给某个服务队列的坐席。 组件介绍请参考 队列管理组件 初始化队列，获取队列数据 坐席队列操作 坐席请求用户 系统自动给坐席分配用户 客户排队操作 1.初始化队列，获取队列数据 在登录成功后初始化队列数据 相关API请参考 初始化队列，初始化队列结果，查询所有队列 相关结构定义请参考 会话信息，队列信息 /** * 初始化用户队列功能数据。//可在登录成功后初始化队列数据 * 操作完成回调CRVideo_InitQueueDatRslt，初始化成功后才可获取队列队列相关信息。 * @access public * @param {string} cookie -自定义数据 (在回调时，回传给调用者) */ CRVideo_InitQueueDat(cookie) /** * 队列初始化操作结果 * @callback CRVideo.CbProxy~CRVideo_InitQueueDatRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_InitQueueDatRslt.callback = function(sdkErr,cookie){ /** * @typedef {object} CRVideo_QueStatus - 队列状态 * @property {number} queID - 队列id * @property {number} agent_num - 坐席数量 * @property {number} wait_num - 排队客户数量 * @property {number} srv_num - 正在服务的客户数量 }; 2.坐席队列操作 坐席角色开始和停止服务队列，以及操作后队列状态的变化 相关API请参考 开始/停止服务队列，开始/停止队列服务结果 相关结构定义请参考 队列状态 /** * 开始服务某个队列(可以多次调用，开启对多个队列的服务) //开始服务队列 * 操作回调CRVideo_StartServiceRslt * 开启成功后： * a. 如果没有开启免打挽，那么系统会自动分配客户：VideoCall_Queue_CallBack::autoAssignUser； * b. 如果开启免打挽，系统就不会分配客户，如需服务客户可调用：reqAssignUser。 * @access public * @param {string} queID - 队列ID * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_StartService(queID,cookie) /** * 停止服务某个队列 //停止服务队列 * 操作完成回调CRVideo_StopServiceRslt * @access public * @param {string} queID - queID 队列ID * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StopService(queID,cookie) /** * 获取我服务的所有队列 * @access public * @returns {string[]} 返回我服务的队列列表 */ var GetServingQueues = CRVideo_GetServingQueues() /* 开始服务队列操作结果 * @callback CRVideo.CbProxy~CRVideo_StartServiceRslt * @param {number} queID - 服务的队列ID * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StartServiceRslt.callback = function(queID,sdkErr,cookie){ } /** * 停止服务队列操作结果 * @callback CRVideo.CbProxy~CRVideo_StopServiceRslt * @param {number} queID - 服务的队列ID * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StopServiceRslt.callback = function(queID,sdkErr,cookie){ } /** * 队列状态变化通知 * @callback CRVideo.CbProxy~CRVideo_QueueStatusChanged * @param {CRVideo_QueStatus} queStatus -队列状态 */ CRVideo_QueueStatusChanged.callback=function(queStatus){ /** * @typedef {object} CRVideo_QueInfo - 队列信息 * @property {number} queID - 队列id * @property {number} name - 队列名称 * @property {string} desc - 队列描述 * @property {number} prio - 优先级，值越小优先级越高 */ } 3.坐席请求用户 在设置DND免打扰状下态，系统不再自动分配，需要手动申请用户 相关API请参考 免打扰，设置免打扰结果，请求分配用户，请求分配用户结果 /** * 设置免打扰状态。 * 操作成功则回调CRVideo_SetDNDStatusSuccess,失败则回调CRVideo_SetDNDStatusFail。 * @access public * @param {number} DNDStatus - 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_SetDNDStatus(DNDStatus,cookie) /** * 请求分配一个客户 * 当关闭免打扰时，系统将自动分配客户，无需调用此函数； * 当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配； * @access public * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_ReqAssignUser(cookie) /** * 请求分配客户操作结果 * @callback CRVideo.CbProxy~CRVideo_ReqAssignUserRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {CRVideo_QueUser} user - 队列用户信息 * @param {string} cookie - 自定义用户数 */ CRVideo_ReqAssignUserRslt.callback = function(sdkErr,user,cookie){ } 4.系统自动给坐席分配用户 系统自动分配的用户在坐席还未选择接受或拒绝时，系统可以撤回分配 相关API请参考 自动分配用户通知，接受/拒绝分配的用户，自动分配用户被取消 /* 系统自动安排客户 * @callback CRVideo.CbProxy~CRVideo_AutoAssignUser * @param {CRVideo_QueUser} user - 队列用户信息 * 如果想停止系统的自动分配，请通setDNDStatus设置免打扰功能 */ CRVideo_AutoAssignUser.callback = function(user){ } /** * 响应分配客户操作结果 * @callback CRVideo.CbProxy~CRVideo_ResponseAssignUserRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_ResponseAssignUserRslt.callback = function(sdkErr,cookie){ } /** * 系统取消已经安排的客户 * @callback CRVideo.CbProxy~CRVideo_CancelAssignUser * @param {string} queID - 服务的队列 * @param {string} userid - 用户id */ CRVideo_CancelAssignUser.callback = function(queID,userid){ } 5.客户排队操作 客户选择一个队列进行排队，每次只能排一个队列 相关API请参考 开始/停止排队，开始/停止排队操作结果，队列状态变化，排队信息变化 相关结构定义请参考 队列状态，排队信息 /** * 客户开始排队 * 操作完成回调CRVideo_StartQueuingRslt * @access public * @param {string} queID - queID 队列ID * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StartQueuing(queID,cookie) /** * 客户停止排队 * 操作完成回调CRVideo_StopQueuingRslt * @access public * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StopQueuing(cookie) /** * 开始排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StartQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_StartQueuingRslt.callback = function(sdkErr,cookie){ } /** * 停止排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StopQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StopQueuingRslt.callback = function(sdkErr,cookie){ } /** * 队列状态变化通知 * @callback CRVideo.CbProxy~CRVideo_QueueStatusChanged * @param {CRVideo_QueStatus} queStatus -队列状态 */ CRVideo_QueueStatusChanged.callback = function(queStatus){ /** * @typedef {object} CRVideo_QueInfo - 队列信息 * @property {number} queID - 队列id * @property {number} name - 队列名称 * @property {string} desc - 队列描述 * @property {number} prio - 优先级，值越小优先级越高 */ } /** * 排队信息变化通知 * @callback CRVideo.CbProxy~CRVideo_QueuingInfoChanged * @param {CRVideo_QueInfo} queuingInfo - 队列信息 */ CRVideo_QueuingInfoChanged.callback = function(queuingInfo){ /** * 开始排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StartQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ } 呼叫他人 实现用户到用户的呼叫，以此来实现会话信息的分发以及相关信息的传递 主叫 被叫 1.主叫 呼叫发起方 相关API请参考 开始呼叫，挂断呼叫，开始呼叫结果，挂断呼叫结果，通知呼叫被对方接受/拒绝 /** * 发起呼叫，邀请用户参加视频会话。 * 操作成功则回调CRVideo_CallSuccess,失败则回调CRVideo_CallFail。 * 呼叫时，对方迟迟不响应，30秒后系统自动结束呼叫。 * @access public * @param {string} calledUserID - 被叫用户的账户ID * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} usrExtDat - 自定义扩展参数 * @param {string} cookie - 自定义数据(在回调时，回传给调用者) * @returns {string} 返回本次呼叫标识码（呼叫ID） */ var callID =CRVideo_Call(calledUserID,meetObj,usrExtDat,cookie) /** * 挂断正在进行的视频呼叫或视频通话 * 操作成功则回调CRVideo_HangupCallSuccess,失败则回调CRVideo_HangupCallFail。 * @access public * @param {string} callID - 呼叫ID * @param {string} usrExtDat - 自定义扩展参数 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_HungupCall(callID,usrExtDat,cookie) /** * 呼叫他人操作成功响应 * @callback CRVideo.CbProxy~CRVideo_CallSuccess * @param {string} callID - 呼叫全局标识 * @param {string} cookie - 自定义用户数据 */ CRVideo_CallSuccess.callback = function(callID,callback){ } /** * 呼叫他人操作失败响应 * @callback CRVideo.CbProxy~CRVideo_CallFail * @param {string} callID - 呼叫全局标识 * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_CallFail.callback = function(callID,sdkErr,cookie){ } /** * SDK通知自己视频呼叫被对方接受 * @callback CRVideo.CbProxy~CRVideo_NotifyCallAccepted * @param {string} callID - 呼叫全局标识 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallAccepted = function(callID,meetObj,usrExtDat){ } /** * SDK通知自己呼叫被对方拒绝 * @callback CRVideo.CbProxy~CRVideo_NotifyCallRejected * @param {string} callID - 呼叫全局标识 * @param {number} sdkErr - 呼叫被对方拒绝的原因代码,定义见cr/error * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallRejected = function(callID,sdkErr,usrExtDat){ } 2.被叫 被呼叫方 相关API请参考 通知有人呼入，接受/拒绝他人的呼叫，接受/拒绝他人呼叫结果 /** * SDK通知自己被呼叫 * @callback CRVideo.CbProxy~CRVideo_NotifyCallIn * @param {string} callID - 呼叫全局标识 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} callerID - 呼叫人员的标识ID * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallIn.callback = function(callID,meetObj,callerID,usrExtDat){ } 透明传输 独立于会话的传输功能，对SDK透明，发送对象必须要先成功登录 发送命令、文本、文件 收到命令、数据、文件 1.发送命令、文本、文件 小数据走命令接口，大数据走文本接口，命令的发送不可以被取消，也没有进度通知 相关API请参考 发送命令/数据/文件，取消发送，发送命令/数据/文件结果，发送进度，取消发送结果 /** * 发送小块数据(一次性发送不会有进度通知,发送结果事件CRVideo_SendCmdRlst,CRVideo_SendCmd不能被CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} data - 发送的数据 * @returns {string} 分配的任务ID */ var sendCmdID = CRVideo_SendCmd(targetUserId,data); /** * 发送大块数据(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendBufferRlst,取消发送CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} data - 发送的数据 * @returns {string} 分配的任务ID */ var sendBufferID = CRVideo_SendBuffer(targetUserId,data) } /** * 发送文件(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendFileRlst,取消发送CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} fileName - 需要发送的文件名 * @returns {string} 分配的任务ID */ var sendvFileID = CRVideo_SendFile(targetUserId,data) /** * 取消数据发送 * 操作完成则回调CRVideo_CancelSendRlst。 * @access public * @param {string} taskID - 任务ID */ CRVideo_CancelSend(taskID) /** * 发送数据时，SDK通知发送进度 * @callback CRVideo.CbProxy~CRVideo_SendProgress * @param {string} taskID - 发送任务id * @param {number} sendedLen - 已发送的数据长度 * @param {number} totalLen - 需要发送的总长度 * @param {string} cookie - 自定义用户数据 */ CRVideo_SendProgress.callback = function(taskID,sendedLen,totalLen,cookie){ } /** * 发送数据时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendCmdRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendCmdRlst.callback = function(taskID,sdkErr,cookie){ } /** * 发送数据时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendBufferRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendBufferRlst.callback = function(taskID,sdkErr,cookie){ } /** * 发送文件时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendFileRlst * @param {string} taskID - 发送任务id * @param {number} fileName - 文件名 * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendFileRlst.callback = function(taskID,fileName,sdkErr,cookie){ } /** * 取消发送响应 * @callback CRVideo.CbProxy~CRVideo_CancelSendRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_CancelSendRlst.callback = function(taskID,sdkErr,cookie){ } 2.收到命令、数据、文件 收到别人发送数据的通知 相关API请参考 通知有命令/数据/文件发来 /** * SDK通知收到小块数据 * @callback CRVideo.CbProxy~CRVideo_NotifyCmdData * @param {string} sourceUserId - 数据来源 * @param {string} data - 数据 */ CRVideo_NotifyCmdData.callback = function(sourceUserId,data){ } /** * SDK通知收到大块数据 * @callback CRVideo.CbProxy~CRVideo_NotifyBufferData * @param {string} sourceUserId - 数据来源 * @param {string} data - 数据 */ CRVideo_NotifyBufferData.callback = function(sourceUserId,data){ } /** * SDK通知收到文件数据（收到的文件生成在系统临时目录下，请尽快移走对应文件） * @callback CRVideo.CbProxy~CRVideo_NotifyFileData * @param {string} sourceUserId - 数据来源 * @param {string} tmpFile - 临时文件，不需要时，请移除或删除对应文件 * @param {string} orgFileName - 源始文件名 */ CRVideo_NotifyFileData.callback = function(sourceUserId,tmpFile,orgFileName){ } © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 20:41:37 "},"BaseInterface.html":{"url":"BaseInterface.html","title":"基础接口","keywords":"","body":" CloudroomVideoSDK对象 CloudroomVideoSDK是基础控件，负责SDK的初始化和反初始化操作 获取sdk的版本信息 属性 Version string Version 功能:获取sdk的版本信息 返回值:无 参数:无 可读。这个接口在init之前可用 获取sdk所在的目录 属性 sdkPath string sdkPath 功能:获取sdk所在的目录 返回值:无 参数:无 可读。这个接口在init之前可用 设置SDK参数 方法 setSDKParams () void setSDKParams(string jsonStr) 功能:设置SDK参数 返回值:无 参数: jsonStr ------ json格式字符串, 如：{ \"NoCallSvr\" : 1 }具体参数说明： 参数名 取值 功能 NoCallSvr 0/1 (缺省:0) 不需要呼叫业务（可减少登录环节、及通信需求） NoMediaDatToSvr 0/1 (缺省:0) 与服务器无实时流媒体数据（可减少复杂度，加快登录速度） Timeout 10000-120000 网络通信超时时间，单位是毫秒，超出范围时就近取边界值 这个接口在init之前调用有效 设置是否开启日志 方法 enableLog2File () void enableLog2File(int bEnable) 功能:设置是否开启日志 返回值:无 参数: bEnable ------ 1 表示开启日志 0表示不开启日志 SDK中日志功能默认是打开的这个接口在init之前或者之后均可调用 SDK初始化 方法 init () CRVIDEOSDK_ERR_DEF init(string oemid, string sdkFilePath) 功能:SDK初始化 返回值:CRVIDEOSDK_NOERR为成功，否则是失败代码 参数: oemid ------ 开发商ID，没有特别要求可填：CLOUDROOM sdkFilePath ------ sdk配置、临时文件存放位置，可为空 每次init后，都应对一次uninit SDK反初始化 方法 uninit () void uninit() 功能:SDK反初始化 返回值:无 参数:无 设置和获取服务器地址 属性serverAddr string serverAddr 功能: 设置和获取服务器地址 返回值:无 参数:无 可读、可写。支持单个服务器地址（如：www.cloudroom.com）或多个服务器地址串（如：www.cloudroom.com:8080;183.60.47.52:8080;） 文件上传的流量控制 方法 setFileUploadRate () void setFileUploadRate(int maxBytePerSec) 功能:文件上传的流量控制 返回值:无 参数: maxBytePerSec ------ 每秒上传的最大字节数。-1代表不进行流控 SDK默认不开启流控。目前对文件上传控制的功能有：CloudroomVideoMeeting录制文件上传、CloudroomVideoMeeting网盘文件、CloudroomHttpFileMgr文件传输。 文件下载的流量控制 方法 setFileDownloadRate () void setFileDownloadRate(int maxBytePerSec) 功能:文件下载的流量控制 返回值:无 参数: maxBytePerSec ------ 每秒上传的最大字节数。-1代表不进行流控 DK默认不开启流控。目前对文件上传控制的功能有：CloudroomVideoMeeting网盘文件、CloudroomHttpFileMgr文件传输。 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 13:55:52 "},"MeetingMrg.html":{"url":"MeetingMrg.html","title":"会议管理接口","keywords":"","body":" CloudroomVideoMgr对象 登录、呼叫、会议创建管理类，还负责实现呼叫功能 登陆服务器 方法 login （） void login( string authAcnt, string authPswd, string nickName, string privAcnt, string privAuthCode, string cookie) 功能:登陆服务器 返回值:无 参数: authAcnt ----- 云屋鉴权帐号 authPswd ----- 云屋鉴权密码 nickName ----- 昵称 privAcnt ----- 自定义帐号，不需要时传空字符串 privAuthCode ----- 自定义验证码(有复杂要求的，可以使用json格式)，不需要时传空字符串 cookie ----- 自定义数据 (在回调时，回传给调用者)，不需要时传空字符串 成功事件loginSuccess.失败事件loginFail 注销本次登陆 方法 logout () void logout() 功能:注销本次登陆 返回值:无 参数:无 无事件 设置免打扰状态 方法 setDNDStatus () void setDNDStatus(int DNDStatus, string cookie) 功能:设置免打扰状态 返回值:无 参数: DNDStatus ----- 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义 cookie ----- 自定义数据 (在回调时，回传给调用者)，不需要时传空字符串 成功事件setDNDStatusSuccess.失败事件setDNDStatusFail 获取用户在线状态 方法 getUserStatus () void getUserStatus(string cookie) 功能:获取用户在线状态 返回值:无 参数: cookie ----- 自定义数据 (在回调时，回传给调用者)，不需要时传空字符串 将获取企业下所有用户在线状态（包括呼叫会议状态、免打扰状态）.成功事件getUserStatusSuccess.失败事件getUserStatusFail 开启用户的状态推送 方法 startUserStatusNotify () void startUserStatusNotify(string cookie) 功能:开启用户的状态推送 返回值:无 参数: cookie ----- 自定义数据 (在回调时，回传给调用者)，不需要时传空字符串 开启后，企业下所有用户状态有变化时(包括呼叫会议状态、免打扰状态)，都会收到通知。开启后，用户量越大消息量越大，所以请按需开启；在startUserStatusNotify前，应该先通过getUserStatus获取所有用户状态 关闭用户的状态推送 方法 stopUserStatusNotify () void stopUserStatusNotify (string cookie) 功能:关闭用户的状态推送 返回值:无 参数: cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 创建会议 方法 createMeeting () void createMeeting(string meetSubject, int createPswd, string cookie) 功能:创建会议 返回值:无 参数: meetSubject ------ 会议主题（字符长度最大值50） createPswd ------ 是否创建会议密码（=0时：会议无密码，>0时：密码由系统自动生 cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 成功事件createMeetingSuccess.失败事件createMeetingFail 消毁会议 方法 destroyMeeting () void destroyMeeting(int meetID, string cookie) 功能:消毁会议 返回值:无 参数: meetID ------ 会议号 cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 结果请见destroyMeetingRslt 获取会议列表 方法 getMeetings () void getMeetings(string cookie) 功能:获取会议列表 返回值:无 参数: cookie ------ 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 结果请见getMeetingsSuccess 发起呼叫，邀请用户参加视频会话 方法 call () string call(string calledUserID, string meetObj, string usrExtDat, string cookie) 功能:发起呼叫，邀请用户参加视频会话 返回值:本次呼叫标识码（呼叫ID） 参数: calledUserID ------ 被叫用户的账户ID meetObj ------ 会议信息(json结构体请参见MeetInfoObj，空时代表无会议信息，应由被叫创建或提供会议信息) usrExtDat ------ 自定义扩展参数 cookie ------ 自定义扩展参数 成功事件callSuccess，失败事件callFail,呼叫时，对方迟迟不响应，30秒后系统自动结束呼叫 接受对方发起的视频请求，开始进入视频会话 方法 acceptCall () void acceptCall(string callID, string meetObj, string usrExtDat, string cookie) 功能:接受对方发起的视频请求，开始进入视频会话 返回值:无 参数: callID ------ 呼叫标识码 meetObj ------ 会议信息(json结构体请参见MeetInfoObj，如果主叫未提供会议信息时，被叫应创建会议并在此提供给对方。如果主叫已提供，在此可原封不动回传对方，也可传空给对方) usrExtDat ------ 自定义扩展参数 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件acceptCallSuccess.失败事件acceptCallFail 拒绝对方的视频请求 方法 rejectCall () void rejectCall(string callID, string usrExtDat, string cookie) 功能:拒绝对方的视频请求 返回值:无 参数: callID ------ 呼叫标识码 usrExtDat ------ 自定义扩展参数 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件rejectCallSuccess.失败事件rejectCallFail 挂断正在进行的视频呼叫或视频通话 方法 hungupCall () void hungupCall(string callID, string usrExtDat, string cookie) 功能:挂断正在进行的视频呼叫或视频通话 返回值:无 参数: callID ------ 呼叫标识码 usrExtDat ------ 自定义扩展参数 cookie ------ 自定义数据(在回调时，回传给调用者) 成功事件hungupCallSuccess.失败事件hungupCallFail 发送小块数据（50K以内） 方法 sendCmd () string sendCmd(string targetUserId, string data) 功能:发送小块数据（50K以内） 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID data ------ 发送的数据,base64编码 一次性发送，不会有进度通知.发送结果事件sendCmdRlst.sendCmd不能被cancelSend 发送大块数据 方法 sendBuffer () string sendBuffer(string targetUserId, string data) 功能:发送大块数据 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID data ------ 发送的数据,base64编码 分块发送，进度通知事件sendProgress.发送结果事件 sendBufferRlst.取消发送 cancelSend 发送文件 方法 sendFile () string sendFile(string targetUserId, string fileName) 功能:发送文件 返回值:分配的任务ID 参数: targetUserId ------ 目标用户ID fileName ------ 需要发送的文件名 分块发送，进度通知事件sendProgress.发送结果事件sendBufferRlst.取消发送 cancelSend 取消数据发送 方法 cancelSend () void cancelSend(string taskID) 功能:取消数据发送 返回值:无 参数: taskID ------ 任务ID 取消结果通知: 事件 cancelSendRlst 登录成功响应 事件loginSuccess void loginSuccess(string usrID, string cookie) 功能:登录成功响应 参数: usrID ------ 用户账户 cookie ------ 自定义用户数据 登录失败响应 事件loginFail void loginFail(int sdkErr, string cookie) 功能:登录失败响应 参数: sdkErr ------ 操作失败代码，定义见CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 SDK通知自己掉线 事件lineOff void lineOff(int sdkErr) 功能:SDK通知自己掉线 参数: sdkErr ------ 操作失败代码，定义见CRVIDEOSDK_ERR_DEF 客户端设置免打扰状态操作成功响应 事件setDNDStatusSuccess void setDNDStatusSuccess(string cookie) 功能:客户端设置免打扰状态操作成功响应 参数: cookie ------ 自定义用户数据 客户端设置免打扰状态操作失败响应 事件setDNDStatusFail void setDNDStatusFail(int sdkErr, string cookie) 功能:客户端设置免打扰状态操作失败响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 获取所有用户在线状态成功响应 事件getUserStatusSuccess void getUserStatusSuccess (string usersStatus, string cookie) 功能:获取所有用户在线状态成功响应 参数: usersStatus ------ 用户在线状态信息列表， 详见json结构之UserStatusObjs cookie ------ 自定义用户数据 不在列表中的用户，代表离线状态 获取所有用户在线状态失败响应 事件getUserStatusFail void getUserStatusFail(int sdkErr, string cookie) 功能:获取所有用户在线状态失败响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 某个用户状态变化通知 事件notifyUserStatus void notifyUserStatus(string userStatus, string cookie) 功能:某个用户状态变化通知 参数: userStatus ------ 单个用户在线状态信息， 详见json结构之UserStatusObj cookie ------ 自定义用户数据 启动用户状态推送响应 事件startUserStatusNotifyRslt void startUserStatusNotifyRslt(int sdkErr, string cookie) 功能:启动用户状态推送响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 结束用户状态推送响应 事件stopUserStatusNotifyRslt void stopUserStatusNotifyRslt(int sdkErr, string cookie) 功能:结束用户状态推送响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 创建会议成功响应 事件createMeetingSuccess void createMeetingSuccess(string meetObj, string cookie) 功能创建会议成功响应 参数: meetObj ----- 会议信息(json结构体，请参见MeetInfoObj) cookie ------ 自定义用户数据 创建会议失败响应 事件createMeetingFail void createMeetingFail(int sdkErr, string cookie) 功能:创建会议失败响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 结束会议响应 事件destroyMeetingRslt void destroyMeetingRslt(int sdkErr, string cookie) 功能:结束会议响应 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 获取当前会议列表响应 事件getMeetingsSuccess void getMeetingsSuccess(string jsonMeetings, string cookie) 功能:获取当前会议列表响应 参数: jsonMeetings ------ 会议列表json字符串，结构参考MeetInfoObjs cookie ------ 自定义用户数 获取当前会议列表失败 事件getMeetingsFail void getMeetingsFail(int sdkErr, string cookie) 功能:获取当前会议列表失败 参数: sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 呼叫他人操作成功响应 事件callSuccess void callSuccess(string callID, string cookie) 功能:呼叫他人操作成功响应 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 呼叫他人操作失败响应 事件callFail void callFail( string callID, int sdkErr, string cookie) 功能:呼叫他人操作失败响应 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 接受他人呼叫操作成功响应 事件acceptCallSuccess void acceptCallSuccess(string callID, string cookie) 功能:接受他人呼叫操作成功响应 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 接受他人呼叫操作失败响应 事件acceptCallFail void acceptCallFail( string callID, int sdkErr, string cookie) 功能:接受他人呼叫操作失败响应 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 拒绝他人的呼叫成功响应 事件rejectCallSuccess void rejectCallSuccess(string callID, string cookie) 功能:拒绝他人的呼叫成功响应 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 拒绝他人的呼叫失败响应 事件rejectCallFail void rejectCallFail(string callID, int sdkErr, string cookie) 功能:拒绝他人的呼叫失败响应 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 设置用户是否启用多摄像头 事件hungupCallSuccess void hungupCallSuccess(string callID, string cookie) 功能:设置用户是否启用多摄像头 参数: callID ------ 呼叫全局标识 cookie ------ 自定义用户数据 拒绝他人呼叫操作失败响应 事件hungupCallFail void hungupCallFail(string callID, int sdkErr, string cookie) 功能:拒绝他人呼叫操作失败响应 参数: callID ------ 呼叫全局标识 sdkErr ------ 操作失败代码，数值参考CRVIDEOSDK_ERR_DEF cookie ------ 自定义用户数据 SDK通知自己被呼叫 事件notifyCallIn void notifyCallIn(string callID, string meetObj, string callerID, string usrExtDat) 功能:SDK通知自己被呼叫 参数: callID ------ 呼叫全局标识 meetObj ------ 会议信息(json结构体请参见MeetInfoObj，空时代表无会议信息，应由被叫创建或提供会议信息) callerID ------ 呼叫人员的标识ID usrExtDat ------ 自定义扩展参数 SDK通知自己视频呼叫被对方接受 事件notifyCallAccepted void notifyCallAccepted(string callID, string usrExtDat, string meetObj) 功能:SDK通知自己视频呼叫被对方接受 参数: callID ------ 呼叫全局标识 meetObj ------ 会议信息(json结构体请参见MeetInfoObj，空时代表无会议信息) usrExtDat ------ 自定义扩展参数 SDK通知自己呼叫被对方拒绝 事件notifyCallRejected void notifyCallRejected( string callID, int reason, string usrExtDat) 功能:SDK通知自己呼叫被对方拒绝 参数: callID ------ 呼叫全局标识 sdkErr ------ 呼叫被对方拒绝的原因代码，数值参考定义CRVIDEOSDK_ERR_DEF usrExtDat ------ 自定义扩展参数 SDK通知呼叫被挂断 事件notifyCallHungup void notifyCallHungup(string callID, string usrExtDat) 功能:SDK通知呼叫被挂断 参数: callID ------ 呼叫全局标识 usrExtDat ------ 自定义扩展参数 发送数据时，SDK通知发送结果 事件sendCmdRlst void sendCmdRlst(string taskID, int sdkErr, string cookie) 功能:发送数据时，SDK通知发送结果 参数: taskID ------ 发送任务id sdkErr ------ 数值参考CRVIDEOSDK_ERR_DEF cookie ------ 用户自定义数据 发送数据时，SDK通知发送结果 事件sendBufferRlst void sendBufferRlst(string taskID, int sdkErr, string cookie) 功能:发送数据时，SDK通知发送结果 参数: taskID ------ 发送任务id sdkErr ------ 数值参考CRVIDEOSDK_ERR_DEF cookie ------ 用户自定义数据 发送文件时，SDK通知发送结果 5事件sendFileRlst void sendFileRlst(string taskID, string fileName, int sdkErr, string cookie) 功能:发送文件时，SDK通知发送结果 参数: taskID ------ 发送任务id fileName ------ 文件名 sdkErr ------ 数值参考CRVIDEOSDK_ERR_DEF cookie ------ 用户自定义数据 发送数据时，SDK通知发送进度 事件sendProgress void sendProgress(string taskID, int sendedLen, int totalLen, string cookie) 功能:发送数据时，SDK通知发送进度 参数: taskID ------ 发送任务id sendedLen ------ 已发送的数据长度 totalLen ------ 需要发送的总长度 cookie ------ 用户自定义数据 取消发送 事件cancelSendRlst void cancelSendRlst(string taskID, int sdkErr, string cookie) 功能:取消发送 参数: taskID ------ 发送任务id sdkErr ------ 数值参考CRVIDEOSDK_ERR_DEF cookie ------ 用户自定义数据 SDK通知收到小块数据 事件notifyCmdData void notifyCmdData(string sourceUserId, string data) 功能:SDK通知收到小块数据 参数: sourceUserId ------ 数据来源 data ------ 数组数据,base64编码 SDK通知收到大块数据 事件notifyBufferData void notifyBufferData(string sourceUserId, string data) 功能:SDK通知收到大块数据 参数: sourceUserId ------ 数据来源 data ------ 数组数据,base64编码 SDK通知收到文件数据 事件notifyFileData void notifyFileData(string sourceUserId, string tmpFile, string orgFileName) 功能:SDK通知收到文件数据 参数: sourceUserId ------ 数据来源 tmpFile ------ 临时文件，不需要时，请移除或删除对应文件 orgFileName ------ 源始文件名 SDK通知取消发送文件数据 事件notifyCancelSend void notifyCancelSend(string sendId) 功能:SDK通知取消发送文件数据 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 11:55:33 "},"VideoMeeting.html":{"url":"VideoMeeting.html","title":"会议核心接口","keywords":"","body":" CloudroomVideoMeeting对象 CloudroomVideoMeeting是会议核心控件，实现通话建立、音频采集播入、视频采集编解码、屏幕共享、录制、影音播放等 设置、获取麦克风音量大小 属性micVolume int micVolume 功能:设置、获取麦克风音量大小 返回值:无 参数:无 可读、可写.音量等级（0-255） 设置、获取本地扬声器音量 属性speakerVolume int speakerVolume 功能:设置、获取本地扬声器音量 返回值:无 参数:无 可读、可写.音量等级（0-255) 检查屏幕共享是否已开启 属性isScreenShareStarted int isScreenShareStarted 功能:检查屏幕共享是否已开启 返回值:无 参数:无 可读.0：没有开启，1：已经开启 支持的最大屏幕宽度 属性supportMaxScreenWidth int supportMaxScreenWidth 功能:支持的最大屏幕宽度 返回值:无 参数:无 可读 支持的最大屏幕高度 属性supportMaxScreenHeight int supportMaxScreenHeight 功能:支持的最大屏幕高度 返回值:无 参数:无 可读 设置、获取自定义抓屏功能 属性customizeCatchScreen int customizeCatchScreen 功能:设置、获取自定义抓屏功能 返回值:无 参数:无 可读、可写.0：默认抓屏处理；1：自定议抓屏设置自定义抓屏后，sdk需要图像时将产生notiyCatchScreen事件，使用者再通过setCustomizeScreenImg接口送入图像 播放是否静音 属性speakerMute int speakerMute 功能:播放是否静音 返回值:无 参数:无 可读、可写. 对会议内所有声音生效0:不静音 1:静音 当前哪个用户为主视频 属性mainVideo string mainVideo 功能:当前哪个用户为主视频 返回值:无 参数:无 可读、可写 影音播放的音量 属性mediaVolume int mediaVolume 功能: 影音播放的音量 返回值:无 参数:无 可读、可写. 音量等级(0-255) 呼叫成功，双方开始进入本次视频会议 方法 enterMeeting () void enterMeeting(int meetID, string pswd , string userID, string nickName) 功能:呼叫成功，双方开始进入本次视频会议 返回值:无 参数: meetID ------ 视频会议ID pswd ------ 本次会议中的密码（在创建会议时） 响应事件enterMeetingRslt 判断某个用户是否在会议中 方法 isUserInMeeting () int isUserInMeeting(string userID) 功能:判断某个用户是否在会议中 返回值:1：在，0：不在 参数: userID ------ 用户的id 结束会议 方法 stopMeeting () void stopMeeting(int meetID, string cookie) 功能:结束会议 返回值:无 参数: meetID ------ 会议id cookie ------ 自定义数据(在回调时，回传给调用者) 响应事件stopMeetingRslt,会议被他人结束时的回调事件meetingStopped 离开会议 方法 exitMeeting () void exitMeeting() 功能:离开会议 返回值:无 参数:无 他人离开会议的回调事件userLeftMeeting 获取所有用户的信息 方法 getAllMembers () string getAllMembers() 功能:获取所有用户的信息 返回值:json格式的字符串,详见MembersObj说明 参数:无 获取某个用户的信息 方法 getMemberInfo () string getMemberInfo(string userID) 功能:获取某个用户的信息 返回值:json格式的字符串,详见MemberObj说明 参数: userID ------ 用户ID 获取某个用户的昵称 方法 getMemberNickName () string getMemberNickName(string userID) 功能:获取某个用户的昵称 返回值:用户的昵称 参数: userID ------ 用户ID 获取系统上的麦克风列表 方法 getAudioMicNames () string getAudioMicNames() 功能:麦克风列表，以’\\n’分割； 返回值:无 参数:无 获取系统上的扬声器列表 方法 getAudioSpkNames () string getAudioSpkNames() 功能:获取系统上的扬声器列表 返回值:无 参数:无 获取音频参数 方法 getAudioCfg () string getAudioCfg() 功能:获取音频参数 返回值:json格式的字符串,详见AudioCfgObj说明 参数:无 设置音频参数 方法 setAudioCfg () void setAudioCfg(string json) 功能:设置音频参数 返回值:无 参数: json ------ json格式的字符串,详见AudioCfgObj说明 获取用户说话声音大小 方法 getMicEnergy () int getMicEnergy(string userID) 功能:获取用户说话声音大小 返回值:音量大小（0~10) 参数: userID ------ 登录成功后分配的userID 打开用户的麦克风 方法 openMic () void openMic(string userID) 功能:打开用户的麦克风 返回值:无 参数: userID ------ 用户的ID 打开麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到 关闭用户的麦克风 方法 closeMic () void closeMic(string userID) 功能:关闭用户的麦克风 返回值:无 参数: userID ------ 用户的ID 关麦操作是立即生效的，会立即停止采集 获取用户的麦状态 方法 getAudioStatus () int getAudioStatus(string userID) 功能:获取用户的麦状态 返回值:麦克风设备状态，请参见ASTATUS定义无 参数: userID ------ 登录成功后分配的userID 设置摄像头参数 方法 setVideoCfg () void setVideoCfg(string jsonCfg) 功能:设置摄像头参数 返回值:无 参数: jsonCfg ------ json格式的字符串，详见VideoCfgObj说明 获取用户的摄像头状态 方法 getVideoStatus () VSTATUS getVideoStatus(string userID) 功能:获取用户的摄像头状态 返回值:麦克风摄像头状态，请参见VSTATUS定义 参数: userID ------ 用户的ID 打开用户的摄像头，以便本地、远端显示视频图像 方法 openVideo () void openVideo(string userID) 功能:打开用户的摄像头，以便本地、远端显示视频图像 返回值:无 参数: userID ------ 用户的ID 请见事件videoStatusChanged 关闭用户的摄像头 方法 closeVideo () void closeVideo(string userID) 功能:关闭用户的摄像头 返回值:无 参数: userID ------ 用户的ID 请见事件videoStatusChanged 关闭所有用户的麦克风 方法 setAllAudioClose () void setAllAudioClose() 功能:关闭所有用户的麦克风 返回值:无 参数:无 请见事件audioStatusChanged 获取指定用户的最新图像 方法 getVideoImg () string getVideoImg(string userID，int videoID) 功能:获取指定用户的最新图像 返回值:json格式的字符串,详见VideoImgObj说明 参数: userID ------ 用户ID videoID ------ 摄像头ID 设置默认的摄像头 方法 setDefaultVideo () void setDefaultVideo(string userID，long videoID) 功能:设置默认的摄像头 返回值:无 参数: userID ------ 用户ID videoID ------ 摄像头ID videoID，应该从getAllVideoInfo返回值中获取 获取指定用户的默认摄像头 方法 getDefaultVideo () int getDefaultVideo(string userID) 功能:获取指定用户的默认摄像头 返回值:摄像头ID 参数: userID ------ 用户ID 如果用户没有摄像头，返回0 查询用户是否启用多摄像头 方法 getEnableMutiVideo () int getEnableMutiVideo(string userID) 功能:查询用户是否启用多摄像头 返回值: 1表示开启了，0表示未开启 参数: userID ------ 用户ID 设置用户是否启用多摄像头 方法 setEnableMutiVideo () void setEnableMutiVideo(string userID, int bEnable) 功能:设置用户是否启用多摄像头 返回值: 无 参数: userID ------ 用户ID bEnable ------ bEnable: 1表示开启，0表示关闭 获取用户所有的摄像头信息 方法 getAllVideoInfo () string getAllVideoInfo(string userID) 功能:获取用户所有的摄像头信息 返回值: json格式的字符串,详见VideoInfosObj说明 参数: userID ------ 用户ID 获取会议内所有可观看的摄像头 方法 getWatchableVideos () string getWatchableVideos() 功能:获取会议内所有可观看的摄像头 返回值: json格式的字符串,详见VideoIDObjs说明 参数:无 将图片资源设置给sdk 方法 setPicResource () void setPicResource(string picID, string jsonVal) 功能:将图片资源设置给sdk 返回值: 无 参数: picID ------ 资源唯一标识；（可以uuid，也可以序号方式） jsonVal ------ 资源内容，json格式，详见PicResourceObj说明。（注：如果jsonVal为空串，代表移除资源。） 获取当前屏幕共享配置 方法 getScreenShareCfg () string getScreenShareCfg() 功能:获取当前屏幕共享配置 返回值: json格式的字符串,详见ScreenShareCfgObj说明 参数:无 设置当前屏幕共享配置 方法 setScreenShareCfg () void setScreenShareCfg(string json) 功能:设置当前屏幕共享配置 返回值: 无 参数:json格式的字符串,详见ScreenShareCfgObj说明 开启屏幕共享 方法 startScreenShare () void startScreenShare() 功能:开启屏幕共享 返回值: 无 参数:无 响应事件startScreenShareRslt 停止屏幕共享 方法 stopScreenShare () void stopScreenShare() 功能:停止屏幕共享 返回值: 无 参数:无 响应事件stopScreenShareRslt 获取屏幕共享解码图像 方法 getShareScreenDecodeImg () string getShareScreenDecodeImg() 功能:获取屏幕共享解码图像 返回值: json格式的字符串,详见VideoImgObj说明 参数:无 设置自定义的抓屏图像数据 方法 setCustomizeScreenImg () void setCustomizeScreenImg(int format, int width, int height, string dat) 功能:设置自定义的抓屏图像数据 返回值: json格式的字符串,详见VideoImgObj说明 参数: format ------ 参见VIDEO_FORMAT width ------ 图像的宽度 height ------ 图像的高度 dat ------ 承载argb数据,base64编码 当前只支持VFMT_ARGB32格式；如果在收到notiyCatchScreen事件时，暂当前无图像可送时，可送空数据进去(width=0, height=0, dat为空) 设置要录制的视频 方法 setRecordVideos () void setRecordVideos(string json) 功能:设置要录制的视频 返回值:无 参数: json格式的字符串,详见RecordVideosObj说明(录制过程中配置有效) 开启录制 方法 startRecording () int startRecording(string json) 功能:开启录制 返回值: 0：开启失败； 1：开启成功 参数:json 录制参数,json格式的字符串,详见RecordCfgObj说明 停止录制 方法 stopRecording () void stopRecording() 功能:停止录制 返回值: 无 参数:无 开启录制 方法 getRecFileSize () int getRecFileSize() 功能:得到录制结果文件大小 返回值: 无 参数:无 得到录制的时长 方法 getRecDuration () int getRecDuration() 功能:得到录制的时长 返回值: 无 参数:无 设置本地生成的录制文件是否加密 方法 setRecordFileEncrypt () void setRecordFileEncrypt(int encrypt) 功能:设置本地生成的录制文件是否加密 返回值: 无 参数: encrypt ------ 1表示加密 0表示不加密 未加密的录制文件用其他播放器也可播放，加密后只能利用SDK回放功能才可播放。回放接口为playbackRecordFile 取得所有录制文件信息 方法 getAllRecordFiles () string getAllRecordFiles() 功能:取得所有录制文件信息 返回值: json格式的字符串,详见RecordFilesObj说明 参数:无 添加本地文件到录制文件管理中 方法 addFileToRecordMgr () int addFileToRecordMgr (string fileName, string filePath) 功能:添加本地文件到录制文件管理中 返回值: -1：本地文件不存在，0：成功，1：文件已经被添加过 参数: filename ------ 文件名，不含路径 filePath ------ 文件路径，不含文件名 第三方录制文件调用此接口后可进行本地回放和上传到服务器record下 删除本地的录制文件，上传中的文件会被取消上传 方法 removeFromFileMgr () void removeFromFileMgr(string fileName) 功能:删除本地的录制文件，上传中的文件会被取消上传 返回值: 无 参数: filename ------ 文件名，全路径 不影响已上传完成的服务器文件 上传文件 方法 uploadRecordFile () void uploadRecordFile(string filename) 功能:上传文件 返回值: 无 参数: filename ------ 文件名，全路径 取消上传中的录制文件 方法 cancelUploadRecordFile () void cancelUploadRecordFile(string filename) 功能:取消上传中的录制文件 返回值: 无 参数: filename ------ 文件名，全路径 回放录制文件 方法 playbackRecordFiles () void playbackRecordFile(string filename) 功能:回放录制文件 返回值: 无 参数: filename ------ 文件名，全路径 可创建影音控件显示录制内容，功能同接口startPlayMedia如果录制文件被加密，则只能使用playbackRecordFile来回放。 发送IM消息 方法 sendIMmsg () string sendIMmsg(string text, string toUsrID, string cookie) 功能:发送IM消息 返回值: taskID 发送任务id 参数: text ------ 发送的文本消息 toUsrID ------ 目标用户，如果用户ID为空，消息发送给会议内所有用户 cookie ------ 自定义用户数据 发送结果事件sendIMmsgRlst 赋予控制权限 方法 giveCtrlRight () void giveCtrlRight(string userID) 功能:赋予控制权限 返回值: 无 参数: userID ------ 目标用户 控制权限更改通知事件notifyGiveCtrlRight 收回控制权限 方法 releaseCtrlRight () void releaseCtrlRight(string userID) 功能:收回控制权限 返回值: 无 参数: userID ------ 目标用户 收回控制权限通知事件notifyReleaseCtrlRight 发送鼠标控制消息 方法 sendMouseCtrlMsg () void sendMouseCtrlMsg(int msgType, int key, int ptX, int ptY) 功能:发送鼠标控制消息 返回值: 无 参数: msgType ------ 鼠标事件类型 key ------ 鼠标键类型 ptX ------ 鼠标在屏幕中的横坐标 ptY ------ 鼠标在屏幕中的纵坐标 msgType 数值详见MOUSE_MSG_TYPE类型;key 数值详见MOUSE_KEY_TYPE类型 发送键盘控制消息 方法 sendKeyCtrlMsg () void sendKeyCtrlMsg(int keyMsgType, int vk, int bExtendedKey) 功能:发送键盘控制消息 返回值: 无 参数: keyMsgType ------ 键盘事件类型 vk ------ 键盘虚拟键值 bExtendedKey keyMsgType 数值详见KEY_MSG_TYPE类型 功能切换 方法 switchToPage () void switchToPage(int mainPage, string pageID) 功能:功能切换 返回值: 无 参数: mainPage ------ 功能类型 pageID ------ 子页面标识（如创建白板时返回的boardID） bExtendedKey mainPage 数值详见MAIN_PAGE_TYPE类型 获取当前主功能区 方法 getCurrentMainPage () int getCurrentMainPage() 功能:获取当前主功能区 返回值: mainPage数值详见MAIN_PAGE_TYPE类型 参数:无 获取当前子页面 方法 getCurrentSubPage () string getCurrentSubPage () 功能:获取当前子页面 返回值: 返回pageID 参数:无 设置视频墙分屏模式 方法 setVideoWallMode () void setVideoWallMode(int videoWallMode) 功能:设置视频墙分屏模式 返回值: 无 参数: videoWallMode ------ 分屏模式 videoWallModee数值详见VIDEOLAYOUTMODE类型 获取视频墙当前分屏模式 方法 getVideoWallMode () int getVideoWallMode() 功能:获取视频墙当前分屏模式 返回值: videoWallModee数值详见VIDEOLAYOUTMODE类型 参数:无 创建白板 方法 createBoard () string createBoard(string title, int width, int height, int pageCount) 功能:创建白板 返回值: 返回boardID(需要所有参会者同步切到此白板，参见switchToPage) 参数: title ------ 白板名称 width ------ 白板宽度 height ------ 白板高度 pageCount ------ 白板内有多个页（一般空白板1页，文档白板为实际页数） 其他参会者会收到：notifyCreateBoard事件；同时后台会记录下白板数据，新入会者会收到：notifyInitBoards事件注意：创建完白板后，一定要及尽快调用initBoardPageDat初始化各页数据 初始化白板指定页数据 方法 initBoardPageDat () void initBoardPageDat(string boardID, int boardPageNo, string imgID, string elemets) 功能:初始化白板指定页数据 返回值: 无 参数: boardID ------ 白板标识 boardPageNo ------ 白板第几页（0:代表第一页） imgID ------ 白板的背景图片标识(空代表无背影图) elemets ------ 白板的初始图元（空代表无图元，一般在导入历史文件才用到） 关于imgID:imgID非空时, 代表背景的图片ID(建议为uuid)。（对应的文件应通uploadNetDiskFile(imgID, 本地文件名)上传到服务器；）2.其他参会者将收到notifyInitBoardPageDat事件；3.后台会记录下白板的页数据，在新用户入会时，也会收到notifyInitBoardPageDat事件 关闭白板 方法 closeBoard () void closeBoard(string boardID) 功能:关闭白板 返回值: 无 参数: boardID ------ 白板标识 其他参会者将收到notifyCloseBoard事件 创建一个符合云层要求的图元id 方法 createElementID () string createElementID() 功能:创建一个符合云层要求的图元id 返回值: 图元id 参数:无 本地操作；所有白板图元id，必须由此接口创建；（历史文件存储的图元id，在会议内不能再使用，应重新创建） 添加图元信息 方法 addBoardElement () string addBoardElement(string boardID, int boardPageNo, string element) 功能:添加图元信息 返回值: elementID图元标识 参数: boardID ------ 白板标识 boardPageNo ------ 白板的页序号(0为第一页) element ------ element 图元信息，参见json格式之BoardElementObj 其他参会者将收到notifyAddBoardElement事件同时后台会保存图元，新入会者会在notifyInitBoardPageDat中得到这些图元 修改图元信息 方法 modifyBoardElement () string modifyBoardElement(string boardID, int boardPageNo, string element) 功能:修改图元信息 返回值: elementID图元标识 参数: boardID ------ 白板标识 boardPageNo ------ 白板的页序号(0为第一页) element ------ element 图元信息，参见json格式之BoardElementObj 其他参会者将收到notifyAddBoardElement事件同时后台会保存图元，新入会者会在notifyInitBoardPageDat中得到这些图元 删除图元 方法 delBoardElement () void delBoardElement(string boardID, int boardPageNo, string elementIDs) 功能:删除图元 返回值: 无 参数: boardID ------ 白板标识 boardPageNo ------ 白板的页序号(0为第一页) elementIDs ------ 图元id列表，多值时，以“;”分隔，如：“id1;id2” 其他参会者将收到notifyDelBoardElement事件同时后台会保存图元，新入会者会在notifyInitBoardPageDat中得到这些图元 设置鼠标热点消息 方法 setMouseHotSpot () void setMouseHotSpot(string boardID, int boardPageNo, int x, int y) 功能:设置鼠标热点消息 返回值: 无 参数: boardID ------ 白板标识 boardPageNo ------ 白板的页序号(0为第一页) x ------ 屏幕横坐标 y ------ 屏幕纵坐标 获取会议网盘的容量信息 方法 getNetDiskSummary () void getNetDiskSummary() 功能:获取会议网盘的容量信息 返回值: 无 参数:无 调用结果请见事件getNetDiskSummaryRslt 获取网盘用户共享文件列表 方法 getNetDiskFileList () void getNetDiskFileList() 功能:获取网盘用户共享文件列表，即使用makeNetDiskFileID中参数fileType为0的生成的fileID上传的文件 返回值: 无 参数:无 调用结果请见事件getNetDiskFileListRslt 生成网盘文件全局唯一ID 方法 makeNetDiskFileID () string makeNetDiskFileID(int fileType, string newFileName); 功能:生成网盘文件全局唯一ID 返回值: 网盘文件ID，带相对路径前缀的字符串 参数: fileType ------ 文件类型，0:用户共享文件，1:程序使用文件 newFileName ------ 传入的全局唯一文件名，建议带文件后缀 fileType等于0时，为会议网盘共享文件，上传的文件可通过getNetDiskFileList获取到文件列表详情fileType等于1时，用户程序内资源文件，如白板的背景图片，无法获取文件详情两种文件类型都要调用uploadNetDiskFile和downloadNetDiskFile进行上传和下载 上传文件到网盘 方法 uploadNetDiskFile () void uploadNetDiskFile(string fileID, string localFilePath) 功能:上传文件到网盘 返回值: 无 参数: fileID ------ 网盘文件ID localFilePath ------ 本地文件路径,含文件名 从网盘中下载文件 方法 downloadNetDiskFile () void downloadNetDiskFile(string fileID, string localFilePath) 功能:从网盘中下载文件 返回值: 无 参数: fileID ------ 网盘文件ID localFilePath ------ 本地文件路径,含文件名 设置网盘文件传输暂停或继续 方法 setNetDiskTransportPause () void setNetDiskTransportPause(string fileID, bool bTranPause) 功能:设置网盘文件传输暂停或继续 返回值: 无 参数: fileID ------ 网盘文件ID bTranPause ------ 是否暂停 取消网盘文件操作（上传/下载） 方法 cancleNetDiskFile () void cancleNetDiskFile(string fileID) 功能:取消网盘文件操作（上传/下载） 返回值: 无 参数: fileID ------ 网盘文件ID 删除网盘文件 方法 deleteNetDiskFile () void deleteNetDiskFile(string fileID) 功能:删除网盘文件 返回值: 无 参数: fileID ------ 网盘文件ID 配置远程影音共享时，图像质量参数 方法 setMediaCfg () void setMediaCfg (string jsonCfg) 功能:配置远程影音共享时，图像质量参数 返回值: 无 参数: jsonCfg ------ json格式的字符串，详见VideoCfgObj说明 播放影音文件 方法 startPlayMedia () void startPlayMedia(string filename, int bLocPlay, int bPauseWhenFinished) 功能:播放影音文件 返回值: 无 参数: filename ------ 文件名，全路径 bLocPlay ------ 是否仅仅本地播放（1:本地播放，0：会议内播放） bPauseWhenFinished ------ 是否播放完毕自动暂停在最后一帧 如果播放成功，请关注通知事件notifyMediaOpened如果播放失败，请关注通知事件notifyMediaStop 停止影音播放 方法 stopPlayMedia () void stopPlayMedia() 功能:停止影音播放 返回值: 无 参数:无 请关注通知事件notifyMediaStop 暂停播放影音 方法 pausePlayMedia () void pausePlayMedia(int bPause) 功能:暂停播放影音 返回值: 无 参数: bPause ------ 0:播放，1:暂停 设置播放进度 方法 setMediaPlayPos () void setMediaPlayPos(int pos) 功能:设置播放进度 返回值: 无 参数: pos ------ 设置播放位置，单位：毫秒 取得影音文件夹下的所有可播放文件 方法 getAllFilesInMediaPath () string getAllFilesInMediaPath() 功能:取得影音文件夹下的所有可播放文件 返回值: 文件名列表，以’\\n’分割； 参数:无 影音文件夹位于方法init的第二个参数sdkFilePath，sdk会在此文件中建立media的子文件夹，即为影音文件夹 取得影音文件信息 方法 getMediaInfo () string getMediaInfo() 功能:取得影音文件信息 返回值: json格式的字符串,详见MediaInfoObj说明 参数:无 取得影音帧信息 方法 getMediaImg () string getMediaImg(string userID) 功能:取得影音帧信息 返回值: json格式的字符串,详见VideoImgObj说明 参数: userID ----- 用户id 2方通话时呼叫第3方 方法 clientInvite () string clientInvite(string called, string meetObj, string cookie) 功能:2方通话时呼叫第3方 返回值: 本次邀请标识码（邀请ID） 参数: called ----- 被叫用户的账户ID meetObj ----- 当前会议信息json格式的字符串,详见MeetInfoObj说明 cookie ----- 自定义数据(在回调时，回传给调用者) 结果事件clientInviteRslt，根据sdkErr判断是否成功 取消第3方呼叫 方法 clientCancelInvite () void clientCancelInvite(string inviteID, string cookie) 功能:取消第3方呼叫 返回值: 无 参数:邀请标识码（邀请ID） 结果事件clientCancelInviteRslt，根据sdkErr判断是否成功 开始获取语音pcm数据 方法 startGetAudioPCM () int startGetAudioPCM (int aSide,int getType, string jsonParam) 功能:开始获取语音pcm数据 返回值: 整形数值，1：正常，0：失败 参数: aSide ----- 声道类型，0:麦克风，1:扬声器 getType ------ 获取方式，0:回调方式, jsonParam可配置回调的数据大小(320-32000)，如: {\"EachSize\":320}1:保存为文件， jsonParam可配置文件名,如: { \"FileName\" : \"e:\\\\test.pcm\" } 可同时启动\"麦克风\"、\"扬声器\"；一种声道，只能选一种获取方式，以最后的配置为准;采用回调方式后，将定期收到notifyAudioPCMDat事件； 停止获取语音pcm数据 方法 stopGetAudioPCM () void stopGetAudioPCM (int aSide); 功能:停止获取语音pcm数据 返回值: 无 参数: aSide ----- 声道类型，0:麦克风，1:扬声器 某用户进入了会议 事件 enterMeetingRslt void enterMeetingRslt(int sdkErr) 功能:某用户进入了会议 参数: sdkErr ----- 操作结果码, 0代表入会成功, 非0代表入会失败，取值参考CRVIDEOSDK_ERR_DEF 某用户离开了会议 事件 userEnterMeeting void userEnterMeeting(string userID) 功能:某用户离开了会议 参数: 离开会议的用户id 通知结束视频会议结果 事件 stopMeetingRslt void stopMeetingRslt(int code) 功能:通知结束视频会议结果 参数: code ----- 数值参考CRVIDEOSDK_ERR_DEF，值为CRVIDEOSDK_NOERR时结束成功，否则为不成功代码。 SDK通知从会议里掉线了 事件 meetingDropped void meetingDropped() 功能:SDK通知从会议里掉线了，sdk外部收到该通知后可以调用enterMeeting尝试重新入会 （如果用到了呼叫队列，必须调用hungupCall释放本次呼叫） 参数:无 会议已被结束 事件 meetingStopped void meetingStopped() 功能:会议已被结束 参数:无 SDK通知我的网络变化 事件 netStateChanged void netStateChanged(long level) 功能:SDK通知我的网络变化 参数: level ------ 网络状况等级(0~10，10分为最佳网络) SDK通知用户的说话声音强度更新 事件 micEnergyUpdate void micEnergyUpdate( string userID, long oldLevel, long newLevel) 功能:SDK通知用户的说话声音强度更新 参数: userID ------ 用户标识ID oldLevel ------ 原来的说话声音强度(0~10) newLevel ------ 现在的说话声音强度(0~10) SDK通知本地音频设备有变化 事件 audioDevChanged void audioDevChanged() 功能:SDK通知本地音频设备有变化 参数:无 SDK通知打开本地音频状态变化 事件 audioStatusChanged void audioStatusChanged(string userID, int oldStatus, int newStatus) 功能:SDK通知打开本地音频状态变化 参数: userID ------ 会议中设备的所有者 oldLevel ------ 旧状态，数值参考麦克风状态定义ASTATUS newLevel ------ 新状态，数值参考麦克风状态定义ASTATUS 打开摄像头设备操作结果 事件 openVideoDevRslt void openVideoDevRslt(string devID, bool isSucceed) 功能:打开摄像头设备操作结果 参数: devID ------ 摄像头设备ID isSucceed ------ 是否成功 SDK通知打开本地音频状态变化 事件 videoStatusChanged void videoStatusChanged(string userID, int oldStatus, int newStatus) 功能:SDK通知打开本地音频状态变化 参数: userID ------ 会议中设备的所有者 oldLevel ------ 旧状态，数值参考麦克风状态定义ASTATUS newLevel ------ 新状态，数值参考麦克风状态定义ASTATUS 通知用户有新的视频数据 事件 notifyVideoData void notifyVideoData(string userID, int videoID, int frameTime) 功能:通知用户有新的视频数据 参数: userID ------ 用户标识ID videoID ------ 用户的摄像头ID frmTime ------ 图像的创建时间 收到此通知消息后，可通过getVideoImg获取图像显示；(如果之前显示的帧时间和此值一致，说明此帧已显示过，直接忽略即可) SDK通知用户的视频设备有变化 事件 videoDevChanged void videoDevChanged(string userID) 功能:SDK通知用户的视频设备有变化 参数: userID ------ 设备变化的用户ID SDK通知用户的视频默认设备有变化 事件 defVideoChanged void defVideoChanged(string userID，int videoID) 功能:SDK通知用户的视频默认设备有变化 参数: userID ------ 设备变化的用户ID userID ------ 默认设备id 上传录制文件错误通知 事件 uploadRecordFileErr void uploadRecordFileErr(int sdkErr) 功能:上传录制文件错误通知 参数: sdkErr ------ 操作失败代码,数值参考CRVIDEOSDK_ERR_DEF 录制异常，录制将自动停止 事件 recordErr void recordErr(int sdkErr) 功能:录制异常，录制将自动停止 参数: sdkErr ------ 错误信息,数值参考CRVIDEOSDK_ERR_DEF 录制状态更改通知 事件 recordStateChanged void recordStateChanged(int state) 功能:录制状态更改通知 参数: state ------ 录制状态,数值参考RECORD_STATE 开启屏幕共享的响应事件 事件 startScreenShareRslt void startScreenShareRslt(int sdkErr) 功能:开启屏幕共享的响应事件 参数: sdkErr ------ 操作失败代码,数值参考CRVIDEOSDK_ERR_DEF 停止屏幕共享的响应事件 事件 stopScreenShareRslt void stopScreenShareRslt (int sdkErr) 功能:停止屏幕共享的响应事件 参数: sdkErr ------ 操作失败代码,数值参考CRVIDEOSDK_ERR_DEF 通知他人开启了屏幕共享 事件 notifyScreenShareStarted void notifyScreenShareStarted() 功能:通知他人开启了屏幕共享 参数: 无 通知他人停止了屏幕共享 事件 notifyScreenShareStopped void notifyScreenShareStopped() 功能:通知他人停止了屏幕共享 参数: 无 通知对端屏幕图像有变化 事件 notifyScreenShareData void notifyScreenShareData(string userID, string datInfo) 功能:通知对端屏幕图像有变化 参数: userID ------ 对端用户ID datInfo ------ 屏幕大小、变化区域信息，json格式；{\"screenWidth\":1366, \"screenHeight\":768, \"changeLeft\":50, \"changeTop\":50, \"changeWidth\":100 ,\"changeHeight\":100} 自定义抓屏时，SDK通知使用者抓屏 事件 notiyCatchScreen void notiyCatchScreen() 功能:自定义抓屏时，SDK通知使用者抓屏 参数:无 在收到通知时，一定要及时setCustomizeScreenImg，如果没图像时，可以先送入空图像； SDK通知远程控制权限给予了某人 事件 notifyGiveCtrlRight void notifyGiveCtrlRight(string operId, string targetId) 功能:SDK通知远程控制权限给予了某人 参数: operId ------ 操作的用户id targetId ------ 控制权限给予了谁 SDK通知收回远程控制 事件 notifyReleaseCtrlRight void notifyReleaseCtrlRight(string operId, string targetId) 功能:SDK通知收回远程控制 参数: operId ------ 操作的用户id targetId ------ 收回了谁的控制权限 SDK通知屏幕共享区域变化 事件 notifyShareRectChanged void notifyShareRectChanged(int x，int y, int w, int h) 功能:SDK通知屏幕共享区域变化 参数: x，y ------ 位置 w ------ 宽度 h ------ 高度 发送IM消息时，SDK通知使用者发送结果 事件 sendIMmsgRlst void sendIMmsgRlst(string taskID, int sdkErr, string cookie) 功能:发送IM消息时，SDK通知使用者发送结果 参数: taskID ------ 发送任务id sdkErr ------ 数值参考CRVIDEOSDK_ERR_DEF cookie ------ 用户自定义数据 SDK通知收到IM消息 事件 notifyIMmsg void notifyIMmsg(string fromUserID, string text, int sendTime) 功能:SDK通知收到IM消息 参数: fromUserID ------ 消息来源 text ------ 消息内容 sendTime ------ 消息发送时间戳，从1970开始算起 SDK通知功能切换 事件 notifySwitchToPage void notifySwitchToPage(int mainPage，string pageID) 功能:SDK通知功能切换 参数: mainPage ------ 功能类型 pageID ------ 子页面标识 mainPage 数值参见MAIN_PAGE_TYPE SDK通知视频分屏模式切换 事件 notifyVideoWallMode void notifyVideoWallMode(int model) 功能:SDK通知视频分屏模式切换 参数: model ------ 分屏模式 model 数值参见VIDEOLAYOUTMODE SDK通知主视频更改 事件 notifyMainVideoChanged void notifyMainVideoChanged() 功能:SDK通知主视频更改 参数:无 SDK入会后通知会议中已经存在的白板列表 事件 notifyInitBoards void notifyInitBoards(string BoardObjs) 功能:SDK入会后通知会议中已经存在的白板列表 参数: BoardObjs ------ 已经创建好的白板列表, json结构体请参见BoardObjs说明 初始化白板页数据 事件 notifyInitBoardPageDat void notifyInitBoardPageDat(string boardID, int boardPageNo, string imgID, string elementDatas, string operatorID) 功能:初始化白板页数据 参数: boardID ------ 白板标识 boardPageNo ------ 白板页序号 imgID ------ 页背景文件ID（空代表无背景） elementDatas ------ 此页的所有图元, 详见json结构之BoardElementObjs operatorID ------ 初始化用户（为空时，代表入会时后台事件） 初始化白板页数据 事件 notifyCreateBoard void notifyCreateBoard(string jsonBoard，string operatorID) 功能:SDK通知创建白板 参数: jsonBoard ------ 白板信息，详见json格式之BoardObj operatorID ------ 创建白板的用户ID SDK通知添加图元信息 事件 notifyAddBoardElement void notifyAddBoardElement(string boardID, int boardPageNo, string element，string operatorID) 功能:SDK通知添加图元信息 参数: boardID ------ 白板标识 boardPageNo ------ 白板页序号 element ------ 此页的所有图元, 详见json结构之BoardElementObj operatorID ------ 添加图元的用户ID SDK通知图元信息被修改 事件 notifyModifyBoardElement void notifyModifyBoardElement(string boardID, int boardPageNo, string element，string operatorID) 功能:SDK通知图元信息被修改 参数: boardID ------ 白板标识 boardPageNo ------ 白板页序号 element ------ 此页的所有图元, 详见json结构之BoardElementObj operatorID ------ 添加图元的用户ID 应从页内找到旧的图元并替换 SDK通知图元被删除 事件 notifyDelBoardElement void notifyDelBoardElement(string boardID, int boardPageNo, string elementIDs，string operatorID) 功能:SDK通知图元被删除 参数: boardID ------ 白板标识 elementIDs ------ 图元id列表，以 “;”分隔 operatorID ------ 删除图元的用户ID SDK通知鼠标热点消息 事件 notifyMouseHotSpot void notifyMouseHotSpot(string boardID, int boardPageNo, int x, int y，string operatorID) 功能:SDK通知鼠标热点消息 参数: boardID ------ 白板标识 x ------ 屏幕横坐标 y ------ 屏幕纵坐标 operatorID ------ 操作者的用户ID SDK通知获取网盘容量信息结果 事件 getNetDiskSummaryRslt void getNetDiskSummaryRslt(unsigned int diskLimit, unsigned int diskUsed) 功能:SDK通知获取网盘容量信息结果 参数: diskLimit ------ 网盘总容量 diskUsed ------ 网盘已用容量 SDK通知获取网盘文件列表 事件 getNetDiskFileListRslt void getNetDiskFileListRslt(string fileList) 功能:SDK通知获取网盘文件列表 参数: fileList ------ 网盘文件列表，json格式，定义见NetFileObj SDK通知删除网盘文件结果 事件 notifyNetDiskFileDeleteRslt void notifyNetDiskFileDeleteRslt(string fileID, int isSucceed) 功能:SDK通知删除网盘文件结果 参数: fileID ------ 网盘文件id isSucceed ------ 是否成功 1 成功 0 失败 SDK通知网盘空间已满，容量不足 事件 notifyNetDiskIsFull void notifyNetDiskIsFull(); 功能:SDK通知网盘空间已满，容量不足 参数:无 SDK通知网盘上传或下载进度 事件 notifyNetDiskTransforProgress void notifyNetDiskTransforProgress(string fileID, int percent, int isUpload) 功能:SDK通知网盘上传或下载进度 参数: fileID ------ 网盘文件id percent ------ 进度0-100 isUpload ------ 是否是上传 1 成功 0 失败 SDK通知录制文件状态更改 事件 notifyRecordFileStateChanged void notifyRecordFileStateChanged(string fileName, int state) 功能:SDK通知录制文件状态更改 参数: fileName ------ 本地文件路径 state ------ 状态 0 未上传 1 上传中 2已上传 3 上传失败 SDK通知录制文件上传进度 事件 notifyRecordFileUploadProgress void notifyRecordFileUploadProgress(string fileName, int percent) 功能:SDK通知录制文件上传进度 参数: fileName ------ 本地文件路径 percent ------ 进度0-100 SDK通知影音文件打开 事件 notifyMediaOpened void notifyMediaOpened(int totalTime, int width, int height) 功能:SDK通知影音文件打开 参数: totalTime ------ 影音时长(毫秒) width ------ 宽度 height ------ 高度 SDK通知影音开始播放 事件 notifyMediaStart void notifyMediaStart(string userid) 功能:SDK通知影音开始播放 参数: userid ------ 操作者的用户id SDK通知影音播放停止 事件 notifyMediaStop void notifyMediaStop(string userid, int reason) 功能:SDK通知影音播放停止 参数: userid ------ 操作者的用户id reason ------ 播放停止原因 数值参考影音结束原因定义STOP_REASON SDK通知设置鼠标热点消息 事件 notifyMediaPause void notifyMediaPause(string userid, int bPause) 功能:SDK通知设置鼠标热点消息 参数: userid ------ 操作者的用户id bPause ------ 是否暂停 1暂停 0播放 SDK通知播放进度已设置完成 事件 notifyPlayPosSetted void notifyPlayPosSetted(int setPTS) 功能:SDK通知播放进度已设置完成 参数: setPTS ------ 播放进度 SDK通知影音帧数据已解码完毕 事件 notifyMemberMediaData void notifyMemberMediaData(string userid, int curPos) 功能:SDK通知影音帧数据已解码完毕 参数: userid ------ 操作者的用户id curPos ------ 该影音帧的时间，毫秒为单位 收到此通知消息后，可能过getMediaImg获取图像显示；但如果之前显示的帧时戳更大，说明此通知消息已过时，直接忽略即可； SDK通知语音PCM数据 事件 notifyAudioPCMDat void notifyAudioPCMDat(int aSide, string base64PcmDat) 功能:SDK通知语音PCM数据 参数: aSide ------ 声道类型 base64PcmDat ------ PCM数据(base64格式) 第3方呼叫操作结果 事件 clientInviteRslt void clientInviteRslt(string inviteID, int sdkErr, string cookie) 功能:第3方呼叫操作结果 参数: inviteID ------ 邀请标识码（邀请ID） sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 取消第3方呼叫操作结果 事件 clientCancelInviteRslt void clientCancelInviteRslt(string inviteID, int sdkErr, string cookie) 功能:取消第3方呼叫操作结果 参数: inviteID ------ 邀请标识码（邀请ID） sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 SDK通知第3方呼叫状态改变 事件 notifyInviteStatus void notifyInviteStatus(string inviteID, int status) 功能:SDK通知第3方呼叫状态改变 参数: inviteID ------ 邀请标识码（邀请ID） status ------ 0-振铃 1-接通 2-拒绝 3-未应答 4-挂断 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 17:10:38 "},"Queue.html":{"url":"Queue.html","title":"队列管理接口","keywords":"","body":" CloudroomQueue对象 CloudroomQueue是队列控件，实现队列功能 初始化用户队列功能数据 方法 initQueueDat （） void initQueueDat(string cookie) 功能:初始化用户队列功能数据 返回值:无 参数: cookie ----- 自定义数据 (在回调时，回传给调用者) 响应事件initQueueDatRslt初始化成功后，才可获取队列队列相关信息；成功事件loginSuccess.失败事件loginFail 刷新所有队列状态信息 方法 refreshAllQueueStatus () void refreshAllQueueStatus() 功能:刷新所有队列状态信息 返回值:无 参数:无 响应事件queueStatusChanged(当前排队的队列或服务的队列，sdk自动有状态变化回调；其它队列则需要此函数来查询) 获取队列信息 方法 getAllQueueInfo () string getAllQueueInfo（） 功能:获取队列信息 返回值:json格式的字符串，详见说明 参数:无 说明：json中含多个队列信息[{\"queID\":0,\"name\":\"aaa\",\"desc\":\"this is desc\",\"prio\":1}，{\"queID\":0,\"name\":\"bbb\",\"desc\":\"this is desc\",\"prio\":2}，…] key value queID 队列ID name 队列名称 desc 队列描述 prio 优先级，值越小优先级越高 获指定取队列状态 方法 getQueueStatus () string getQueueStatus(int queID) 功能:获指定取队列状态 返回值:json格式的字符串，详见说明 参数: queID ----- 队列id 说明：json格式说明{\"queID\":0,\"agent_num\":12,\"wait_num\":3,\"srv_num\":11} key value queID 队列ID agent_num 坐席数量 wait_num 坐席数量 srv_num 正在服务的客户数量 获取我的排队信息 方法 getQueuingInfo () string getQueuingInfo() 功能:获取我的排队信息 返回值:json格式的字符串，详见说明 参数:无 说明：json格式说明{\"queID\":0,\"position\":3,\"queuingTime\":17} key value queID 队列ID 我排的队列(-1:代表我没有排队；-2:代表我正在会话中,通过getSessionInfo可获取相关信息) position 我的位置 queuingTime 我排队的时长(单位s) 获取我服务的所有队列 方法 getServiceQueues () string getServingQueues() 功能:获取我服务的所有队列 返回值:队列ID列表，以’\\n’分割； 参数:无 获取我的会话信息 方法 getSessionInfo () string getSessionInfo() 功能:获取我的会话信息 返回值:json格式的字符串，详见说明 参数:无 说明：json格式说明{\"callID\":\"0000123\",\"peerID\":\"123\",\"peerName\":\"aaa\",\"bCallAccepted\":1,\"meetingID\":321321, \"meetingPswd\":\"123456\",\"duration\":120} key value callID 会话的呼叫ID peerID 会话的目标用户ID peerName 会话的目标用户昵称 bCallAccepted 呼叫是否被对方接受 0:暂未接受，1:已接受 meetingID 呼叫接受后，分配的会议ID meetingPswd 会议密码 duration 会议密码 客户开始排队 方法 startQueuing () void startQueuing(int queID, string cookie) 功能:客户开始排队 返回值:无 参数: queID ------ 排队的队列ID cookie ------ 自定义数据(在回调时，回传给调用者) 响应事件startQueuingRslt 客户停止排队 方法 stopQueuing () void stopQueuing(string cookie) 功能:客户停止排队 返回值:无 参数: cookie ------ 自定义数据(在回调时，回传给调用者) 响应事件stopQueuingRslt 开始服务某个队列(可以多次调用，开启对多个队列的服务) 方法 startService () void startService(int queID, string cookie) 功能:开始服务某个队列(可以多次调用，开启对多个队列的服务) 返回值:无 参数: queID ------ 排队的队列ID cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件startServiceRslt开启成功后：a. 如果没有开启免打扰，那么系统会自动分配客户：将收到事件[autoAssignUser](#autoAssignUser)；b. 如果开启免打扰，系统就不会分配客户，如需服务客户可调用：[reqAssignUser](#reqAssignUser) 停止服务某个队列 方法 stopService () void stopService(int queID, string cookie) 功能:停止服务某个队列 返回值:无 参数: queID ------ 排队的队列ID cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件stopServiceRslt 接受系统安排的客户 方法 acceptAssignUser () void acceptAssignUser(int queID, string userID, string cookie) 功能:接受系统安排的客户 返回值:无 参数: queID ------ 排队的队列ID userID ------ 队列中的用户ID cookie ------ 用户自定义数据(在回调时，回传给调用者) 拒绝系统安排的客户 方法 rejectAssignUser () void rejectAssignUser(int queID, string userID, string cookie) 功能:拒绝系统安排的客户 返回值:无 参数: queID ------ 排队的队列ID userID ------ 队列中的用户ID cookie ------ 用户自定义数据(在回调时，回传给调用者) 被拒绝的客户将重新回到队列的最前端 请求分配一个客户 方法 reqAssignUser () void reqAssignUser(string cookie) 功能:请求分配一个客户 返回值:无 参数: cookie ------ 用户自定义数据(在回调时，回传给调用者) 响应事件reqAssignUserRslt当关闭免打扰时，系统将自动分配客户，无需调用此函数；当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配 队列初始化操作结果 事件initQueueDatRslt void initQueueDatRslt(int sdkErr, string cookie) 功能:队列初始化操作结果 参数: sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF，CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 分块发送，进度通知事件sendProgress.发送结果事件 sendBufferRlst.取消发送 cancelSend 队列状态变化通知 事件queueStatusChanged void queueStatusChanged(string jsonQueStatus) 功能:队列状态变化通知 参数: jsonQueStatus ------ 新的队列状态，json格式的字符串,详见说明 json格式说明:{\"queID\":0,\"agent_num\":12,\"wait_num\":3,\"srv_num\":11} key value queID 队列id agent_num 坐席数量 wait_num 排队客户数量 srv_num: 正在服务的客户数量 在排队的队列、或服务的队列发生变化时，将有队列状态变化通知到来； 或者在调用refreshAllQueueStatus时，查询到的队列数据有变化时，会有通知到来； 排队信息变化通知 事件queuingInfoChanged void queuingInfoChanged(string jsonQueuingInfo) 功能:排队信息变化通知 参数: jsonQueuingInfo ------ 新的队列信息,json格式的字符串，详见说明 json格式说明{\"queID\":0,\"name\":\"bbb\",\"desc\":\"this is desc\",\"prio\":2} key value queID 队列id name 队列名称 desc 队列描述 prio: 优先级，值越小优先级越高 开始排队操作结果 事件startQueuingRslt void startQueuingRslt(int sdkErr, string cookie) 功能:开始排队操作结果 参数: sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 停止排队操作结果 事件stopQueuingRslt void stopQueuingRslt(int sdkErr, string cookie) 功能:停止排队操作结果 参数: sdkErr ------ 操作结果代码，数值参CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 开始服务队列操作结果 事件startServiceRslt void startServiceRslt(int queID, int sdkErr, string cookie) 功能:开始服务队列操作结果 参数: queID ------ 服务的队列ID sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 停止服务队列操作结果 事件stopServiceRslt void stopServiceRslt(int queID, int sdkErr, string cookie) 功能:停止服务队列操作结果 参数: queID ------ 服务的队列ID sdkErr ------ 操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 系统自动安排客户 事件autoAssignUser void autoAssignUser(string jsonUsr) 功能:系统自动安排客户 参数: jsonUsr ------ 安排的用户，json格式的字符串，详见说明 json格式说明{\"queID\":1,\"usrID\":\"31231231\",\"name\":\"aaa\",\"queuingTime\":\"10\"} key value queID 队列id usrID 用户ID name 用户昵称 queuingTime: 已排队时长(秒) 如果想停止系统的自动分配，请通setDNDStatus设置免打扰功能 系统取消已经安排的客户 cancelAssignUser void cancelAssignUser(int queID, string usrID) 功能:系统取消已经安排的客户 参数: queID ------ 服务的队列 usrID ------ 用户id 请求分配客户操作结果 事件reqAssignUserRslt void reqAssignUserRslt(int sdkErr, string jsonUsr, string cookie) 功能:请求分配客户操作结果 参数: sdkErr ------ 操作结果代码，CRVIDEOSDK_NOERR为成功操作sdkErr操作结果代码，数值参考CRVIDEOSDK_ERR_DEF,CRVIDEOSDK_NOERR为成功操作 cookie ------ 自定义用户数据 json格式说明{\"queID\":1,\"usrID\":\"31231231\",\"name\":\"aaa\",\"queuingTime\":\"10\"} key value queID 队列id usrID 用户ID name 用户昵称 queuingTime: 已排队时长(秒) © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 11:35:50 "},"VideoUi.html":{"url":"VideoUi.html","title":"视频显示接口","keywords":"","body":" CloudroomVideoUI对象 CloudroomVideoUI是视频显示控件，它显示设定的用户的视频 设置显示的目标用户视频 方法 setVideo （） void setVideo(string userID, int videoID) 功能:设置显示的目标用户视频 返回值:无 参数: userID ----- 目标用户ID videoID ----- 目标用户ID 获取当前显示的用户 方法 getUserID () string getUserID() 功能:获取当前显示的用户 返回值:用户ID 参数:无 获取当前显示的用户的视频设备 方法 getVideoID () string getVideoID() 功能:获取当前显示的用户的视频设备 返回值:用户ID 参数:无 拍照 方法 savePic () long savePic(string pathFileName) 功能:拍照 返回值:0:成功； 非0：保存遇到的错误码； 参数: pathFileName ----- 保存为本地路径文件名 拍照 方法 savePicToBase64 () string savePicToBase64(string format); 功能:拍照 返回值:Base64为图片数据字符串，不成功则为空 参数:图片格式，支持bmp, png, gif, jpg, jpeg 清空缓存的图像 方法 clear () void clear() 功能:清空缓存的图像 返回值:无 参数:无 设置显示的视频画面是否保持比例 属性keepAspectRatio bool keepAspectRatio 功能:设置显示的视频画面是否保持比例 参数:无 可读写。true: 保持比例不拉伸， false:不保持比例进行拉伸 检查昵称是否可见 属性visibleNickName int visibleNickName 功能:检查昵称是否可见 参数:无 可读写。0: 可见， 1:不可见 检查图像是否为空 属性isPicEmpty int isPicEmpty 功能:检查图像是否为空 参数:无 可读。0: 有图像， 1:无图像 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 10:20:15 "},"ScreenShareUi.html":{"url":"ScreenShareUi.html","title":"屏幕显示接口","keywords":"","body":" CloudroomScreenShareUI对象 CloudroomScreenShareUI是远端屏幕显示控件 拍照 方法 savePic （） int savePic(string pathFileName) 功能:拍照 返回值:0:成功； 非0：保存遇到的错误码； 参数:无 清空缓存的图像 方法 clear () void clear() 功能:清空缓存的图像 返回值:无 参数:无 设置标注画笔样式 方法 setPenStyle () void setPenStyle(int intRgb, int penWidth) 功能:设置标注画笔样式 返回值:无 参数: intRgba ------ 颜色，排列方式bgr(8:8:8) penWidth ------ 画笔宽度 检查图像是否为空 属性isPicEmpty int isPicEmpty 功能:检查图像是否为空 参数:无 可读。0: 有图像, 1:无图像 开启标注模式 属性enableMarked bool enableMarked 功能:开启标注模式 参数:无 读、写 绘制模式，是否拉伸绘制 属性keepAspectRatio bool keepAspectRatio 功能:绘制模式，是否拉伸绘制 参数:无 读、写 开启控制模式 属性ctrlOpen int ctrlOpen 功能:开启控制模式 参数:无 读、写 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 10:23:33 "},"MediaUi.html":{"url":"MediaUi.html","title":"影音显示接口","keywords":"","body":" CloudroomMediaUI对象 CloudroomMediaUI是影音显示控件 保存播放影音画面到图片文件 方法 savePicToFile （） int savePicToFile(string pathFileName); 功能:保存播放影音画面到图片文件 返回值:0成功，非0失败 参数: pathFileName ------ 本地绝对路径文件名 支持格式：bmp, png, gif, jpg, jpeg 保存播放截图为base64数据字符串 方法 savePicToBase64 () string savePicToBase64(string format); 功能:保存播放截图为base64数据字符串 返回值:Base64字符串 参数: format ------ 支持格式：bmp, png, gif, jpg, jpeg 显示隐藏播放工具条上的界面元素 方法 setToolBarUIElementVisible () void setToolBarUIElementVisible(int UIElement, bool isVisible) 功能:显示隐藏播放工具条上的界面元素 返回值:无 参数: UIElement ------ 界面元素，定义见ToolBarUI isVisible ------ 是否可见 影音控件默认工具条可用 绘制模式，是否拉伸绘制 属性keepAspectRatio bool keepAspectRatio 功能:绘制模式，是否拉伸绘制 参数:无 读、写 工具条是否可用 方法 disableToolBar () void disableToolBar(int bDisable) 功能:工具条是否可用 返回值:0:可用; 非0:不可用 参数:无 影音控件默认工具条可用 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 10:27:37 "},"HttpFileMgr.html":{"url":"HttpFileMgr.html","title":"文件管理接口","keywords":"","body":" CloudroomHttpFileMgr对象 CloudroomHttpFileMgr是http文件上传下载、及文件管理控件 拍照 方法 startMgr （） void startMgr() 功能:启动控件运行 返回值:无 参数:无 在CloudroomVideoSDK Init后方可调用 停止控件 方法 stopMgr () void stopMgr() 功能:停止控件 返回值:无 参数:无 获取本地上传、下载文件信息 方法 getAllTransferInfos () string getAllTransferInfos() 功能:获取本地上传、下载文件信息 返回值:json格式的文件信息，详见说明 参数:无 返回值含多个文件信息，json格式说明：[ { \"bUploadType\" : true, \"filePathName\" : \"D:/CloudroomVideoSDK_file/test.log\", \"fileVersion\" : \"V1.0\",\"httpUrl\" : \"http://10.0.7.130:8080/Upload/\", \"params\" : { }, \"fileSize\" : 53788511, \"finishedSize\" : 53788511, \"state\" : 3 }{…}] key value bUploadType 传输类型，0:下载类型，1:上传类型 filePathName 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”) fileVersion 文件版本（可以填版本号，也可以md5，也可以为空） httpUrl 目标URL params 特殊参数，字典数据。 fileSize 文件大小 finishedSize 已传输大小 state 文件传输状态，详见：HTTP_TRANSFER_STATE params详细说明 decodeCREEFile：取值0或1。此参数仅上传有效，为0时上传原始文件，为1时上传解密的文件 注：fileName路径中要求有“CloudroomVideoSDK”，目的是防止利用sdk上传用户隐私文件、或下载恶意文件到系统目录等。 开始下载/上传文件 方法 startTransferFile() void startTransferFile(string jsonFileInfo) 功能:开始下载/上传文件 返回值:无 参数: jsonFileInfo ------- json格式的文件信息，详见说明 json格式说明：{\"bUploadType\" : true, \"filePathName\" : \"D:/CloudroomVideoSDK_file/test.log\", \"fileVersion\" : \"V1.0\",\"httpUrl\" : \"http://10.0.7.130:8080/Upload/\",\"params\" : { }, \"state\" : 3 } 参数含义，请参见：getAllTransferInfos接口说明。 上传不支持断点续传；下载支持断点续传；如果文件传输完成，且fileVersion一致，下次再请求时会立即报告完成。 取消传输 方法 cancelFileTransfer () void cancelFileTransfer(string fileName) 功能:取消传输 返回值:无 参数: fileName ------ 本地路径文件名 取消时，只是停止了传输任务，不清理记录及断点文件。 删除传输记录及相关文件 方法 rmTransferInfo () void rmTransferInfo(string fileName, int bRemoveLocFile) 功能:删除传输记录及相关文件 返回值:无 参数: fileName ------ 文件名 bRemoveLocFile ------ 是否移除本地文件 此接口将文件从管理器中移除（getAllTransferInfos将不再返回相关信息），如果bRemoveLocFile为1时， 那么上传的源始文件、下载的临时文件或结果文件都将被移除。 通知用户文件状态更改 事件fileStateChanged void fileStateChanged(string fileName, int state) 功能:通知用户文件状态更改 参数: fileName ------ 文件名 state ------ 状态，详见HTTP_TRANSFER_STATE 通知用户文件的下载进度 事件fileProgress void fileProgress(string fileName, int finisedSize, int totalSize) 功能:通知用户文件的下载进度 参数: fileName ------ 文件名 finisedSize ------ 已传输大小 totalSize ------ 已传输大小 通知用户文件传输结束 事件fileFinished void fileFinished(string fileName, int rslt) 功能:通知用户文件传输结束 参数: fileName ------ 文件名 rslt ------ 传输结果，详见：HTTP_TRANSFER_RESULT © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 13:50:48 "},"Constant.html":{"url":"Constant.html","title":"常量定义","keywords":"","body":"常量定义 相关数值及含义定义 错误代码含义 CRVIDEOSDK_ERR_DEF 代码 数值 含义 CRVIDEOSDK_NOERR 0 没有错误 CRVIDEOSDK_UNKNOWERR 1 未知错误 CRVIDEOSDK_OUTOF_MEM 2 内存不足 CRVIDEOSDK_INNER_ERR 3 sdk内部错误 CRVIDEOSDK_MISMATCHCLIENTVER 4 不支持的sdk版本 CRVIDEOSDK_MEETPARAM_ERR 5 参数错误 CRVIDEOSDK_ERR_DATA 6 无效数据 CRVIDEOSDK_ANCTPSWD_ERR 7 帐号密码不正确 CRVIDEOSDK_SERVER_EXCEPTION 8 服务异常 CRVIDEOSDK_LOGINSTATE_ERROR 9 登录状态错误 CRVIDEOSDK_USER_BEEN_KICKOUT 10 登录用户被踢下线 CRVIDEOSDK_NETWORK_INITFAILED 200 网络初始化失败 CRVIDEOSDK_NO_SERVERINFO 201 没有服务器信息 CRVIDEOSDK_NOSERVER_RSP 202 服务器没有响应 CRVIDEOSDK_CREATE_CONN_FAILED 203 创建连接失败 CRVIDEOSDK_SOCKETEXCEPTION 204 socket异常 CRVIDEOSDK_SOCKETTIMEOUT 205 网络超时 CRVIDEOSDK_FORCEDCLOSECONNECTION 206 连接被关闭 CRVIDEOSDK_CONNECTIONLOST 207 连接丢失 CRVIDEOSDK_QUE_ID_INVALID 400 队列ID错误 CRVIDEOSDK_QUE_NOUSER 401 没有用户在排队 CRVIDEOSDK_QUE_USER_CANCELLED 402 排队用户已取消 CRVIDEOSDK_QUE_SERVICE_NOT_START 403 队列服务还未开启 CRVIDEOSDK_ALREADY_OTHERQUE 404 已在其它队列排队(客户只能在一个队列排队) CRVIDEOSDK_INVALID_CALLID 600 无效的呼叫ID CRVIDEOSDK_ERR_CALL_EXIST 601 已在呼叫中 CRVIDEOSDK_ERR_BUSY 602 对方忙 CRVIDEOSDK_ERR_OFFLINE 603 对方不在线 CRVIDEOSDK_ERR_NOANSWER 604 对方无应答 CRVIDEOSDK_ERR_USER_NOT_FOUND 605 用户不存在 CRVIDEOSDK_ERR_REFUSE 606 对方拒接 CRVIDEOSDK_MEETNOTEXIST 800 没有会议不存在或已结束错误 CRVIDEOSDK_AUTHERROR 801 会议密码不正确 CRVIDEOSDK_MEMBEROVERFLOWERROR 802 会议终端数量已满（购买的license不够) CRVIDEOSDK_RESOURCEALLOCATEERROR 803 分配会议资源失败 CRVIDEOSDK_MEETROOMLOCKED 804 会议已加锁 CRVIDEOSDK_CATCH_SCREEN_ERR 900 抓屏失败 CRVIDEOSDK_RECORD_MAX 901 单次录制达到最大时长(8h) CRVIDEOSDK_RECORD_NO_DISK 902 磁盘空间不够 CRVIDEOSDK_SENDFAIL 1000 发送失败 CRVIDEOSDK_CONTAIN_SENSITIVEWORDS 1001 有敏感词语 CRVIDEOSDK_SENDCMD_LARGE 1100 发送信令数据过大 CRVIDEOSDK_SENDBUFFER_LARGE 1101 发送数据过大 CRVIDEOSDK_SENDDATA_TARGETINVALID 1102 目标用户不存在 CRVIDEOSDK_SENDFILE_FILEINERROR 1103 文件错误 CRVIDEOSDK_TRANSID_INVALID 1104 无效的发送id CRVIDEOSDK_RECORDFILE_STATE_ERR 1200 状态错误不可上传/取消上传 CRVIDEOSDK_RECORDFILE_NOT_EXIST 1201 录制文件不存在 麦克风状态 CRVideo_ASTATUS 代码 数值 含义 AUNKNOWN 0 音频状态未知 ANULL 1 没有麦克风设备 ACLOSE 2 麦克风处于关闭状态（软开关） AOPEN 3 麦克风处于打开状态（软开关） AOPENING 4 向服务器发送打开消息中 视频尺寸定义 CRVideo_VIDEO_SHOW_SIZE 代码 数值 分辨率和码率 VIDEO_SZ_80 1 144*80, 最大码率：56kbps VSIZE_SZ_128 2 224*128, 最大码率：72kbps VSIZE_SZ_160 3 288*160, 最大码率：100kbps VSIZE_SZ_192 4 336*192, 最大码率：150kbps VSIZE_SZ_256 5 448*256, 最大码率：200kbps VSIZE_SZ_288 6 512*288, 最大码率：250kbps VSIZE_SZ_320 7 576*320, 最大码率：300kbps VSIZE_SZ_360 8 640*360, 最大码率：350kbps VSIZE_SZ_400 9 720*400, 最大码率：420kbps VSIZE_SZ_480 10 848*480, 最大码率：500kbps VSIZE_SZ_576 11 1024*576, 最大码率：650kbps VSIZE_SZ_720 12 1280*720, 最大码率：1mbps VSIZE_SZ_1080 13 1920*1080, 最大码率：2mbps 视频状态定义 CRVideo_VSTATUS 代码 数值 分辨率和码率 VUNKNOWN 0 视频状态未知 VNULL 1 没有视频设备 VCLOSE 2 视频处于关闭状态（软开关） VOPEN 3 视频处于打开状态（软开关） VOPENING 4 向服务器发送打开消息中 视频图像格式 CRVideo_VIDEO_FORMAT 代码 数值 分辨率和码率 VFMT_YUV420P 0 yuv420p VFMT_ARGB32 1 32-bit ARGB format (0xAARRGGBB) 录制内容类型 CRVideo_REC_VCONTENT_TYPE 代码 数值 分辨率和码率 RECVTP_VIDEO 0 摄像头 RECVTP_PIC 1 图片 RECVTP_SCREEN 2 屏幕 RECVTP_MEDIA 3 影音共享 RECVTP_TIMESTAMP 4 时间戳 录制的状态 CRVideo_RECORD_STATE 代码 数值 分辨率和码率 NO_RECORD 0 录制未启动 STARTING 1 录制正在开启 RECORDING 2 正在录制 PAUSED 3 录制已暂停 STOPPING 4 录制正在结束 录制语音类型 CRVideo_RECORD_AUDIO_TYPE 代码 数值 分辨率和码率 REC_AUDIO_TYPE_NULL 0 不录制任何语音 REC_AUDIO_TYPE_LOC 1 录制本地语音 REC_AUDIO_TYPE_OTHER 2 录制其他人语音 REC_AUDIO_TYPE_ALL 3 录制本地+其他人语音 录制图像类型 CRVideo_RECORD_VIDEO_TYPE 代码 数值 分辨率和码率 REC_VCONTENT_NULL 0 不录制任何图像 RECORD_VIDEO_TYPE_SCREEN 1 录制屏幕 REC_VCONTENT_VIDEOS 3 录制视频图像 录制视频的布局类型 CRVideo_RECORD_VLAYOUT 代码 数值 分辨率和码率 REC_VLAYOUT_GRID 0 表格类型 REC_VLAYOUT_PIP 1 画中画类型(只有在录两个视频时有效) 屏幕共享的编码类型 CRVideo_ENCODE_TYPE 代码 数值 分辨率和码率 ENC_CLOUDROOM 0 云屋科技私有编码格式（清晰度更高，带宽大） ENC_H264 1 (清晰度差一些，带宽小） 鼠标事件类型 CRVideo_MOUSE_MSG_TYPE 代码 数值 分辨率和码率 MOUSE_MOVE 0 鼠标移动 MOUSE_DOWN 1 鼠标键按下 MOUSE_UP 2 鼠标键弹起 MOUSE_DBCLICK 3 鼠标双击 鼠标键类型 CRVideo_MOUSE_KEY_TYPE 代码 数值 分辨率和码率 MOUSEKEY_NULL 0 无 MOUSEKEY_L 1 鼠标左键 MOUSEKEY_M 2 鼠标中键 MOUSEKEY_R 3 鼠标右键 MOUSEKEY_WHEEL 4 鼠标滚轮 MOUSEKEY_X 5 鼠标侧键 键盘事件类型 CRVideo_KEY_MSG_TYPE 代码 数值 分辨率和码率 KEYT_DWON 0 键值按下 KEYT_UP 1 键值弹起 功能类型 CRVideo_MAIN_PAGE_TYPE 代码 数值 分辨率和码率 MAINPAGE_VIDEOWALL 0 视频墙 MAINPAGE_SHARE 1 共享 MAINPAGE_WHITEBOARD 2 白板 视频墙分屏模式 CRVideo_VIDEOLAYOUTMODE 代码 数值 分辨率和码率 VLO_1v1_M 0 互看 VLO_WALL1_M 1 1分屏 VLO_WALL2 2 2分屏 VLO_WALL4 3 4分屏 VLO_WALL5_M 4 5分屏 VLO_WALL6_M 5 6分屏 VLO_WALL9 6 9分屏 VLO_WALL13_M 7 13分屏 VLO_WALL16 8 16分屏 VLO_WALL25 9 25分屏 Http文件传输状态 CRVideo_HTTP_TRANSFER_STAT 代码 数值 含义 HTTPFS_NULL 0 未开始 HTTPFS_QUEUE 1 排队中 HTTPFS_TRANSFERING 2 传输(上传/下载)中 HTTPFS_FINISHED 3 传输完成 Http文件传输结果 CRVideo_HTTP_TRANSFER_RESULT 代码 数值 含义 HTTPR_Success 0 成功 HTTPR_InnerErr 1 内部错误 HTTPR_ParamErr 2 参数错误 HTTPR_NetworkFail 3 网络不通/地址不对 HTTPR_NetworkTimeout 4 超时失败 HTTPR_FileOperationFail 5 文件操作失败 HTTPR_PathNotSupprot 6 不支持的路径 HTTPR_FileTransfering 7 文件正在传输 HTTPR_HTTPERR_BEGIN 1000 http错误码启始 HTTPR_HTTPERR_END 1999 http错误码结束 录制布局 CRVideo_ToolBarUI 代码 数值 含义 BTN_Pause 0 暂停 BTN_Stop 1 停止 录制的内容类型 CRVideo_REC_DATATYPE 代码 数值 含义 REC_AV_DEFAULT 0 录制所有 REC_AUDIO_LOC 1 录制本地音频 REC_AUDIO_OTHER 2 录制其它音频 REC_VIDEO 3 录制视频 影音结束原因 CRVideo_STOP_REASON 代码 数值 含义 MEDIA_CLOSE number 文件关闭 MEDIA_FINI number 播放到文件尾部 MEDIA_FILEOPEN_ERR number 打开文件失败 MEDIA_FORMAT_ERR number 文件格式错误 MEDIA_UNSUPPORT number 影音格式不支持 MEDIA_EXCEPTION number 其他异常 视频尺寸定义 CRVideo_VIDEO_WH_RATE 代码 数值 含义 RATE_16_9 number 16:9宽高比 RATE_4_3 number 4:3宽高比 RATE_1_1 number 1:1宽高比 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 20:14:25 "},"TypeDefinitions.html":{"url":"TypeDefinitions.html","title":"对象结构定义","keywords":"","body":"类型定义 CRVideo_AddFileToRecordMgr 添加本地文件到录制文件管理中 Type: object 参数 类型 说明 fileName string 文件名，不含路径 filePath string 文件路径，不含文件名 CRVideo_AudioCfg 添加本地文件到录制文件管理中 Type: object 参数 类型 说明 micName string 麦克风设备名称 speakerName string 扬声器名称 privEC string 是否开启云屋私有回声消息0：不开启；1：开启 privAgc string 是否开启云屋私有语音自动增益0：不开启；1：开启 CRVideo_FileInfo 排队信息(params详细说明：decodeCREEFile：取值0或1。此参数仅上传有效，为0时上传原始文件，为1时上传解密的文件) Type: object 参数 类型 说明 bUploadType number 传输类型，0:下载类型，1:上传类型 filePathName string 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”) fileVersion string 文件版本（可以填版本号，也可以md5，也可以为空） httpUrl string 目标URL params object 特殊参数，字典数据。 fileSize number 文件大小 finishedSize number 已传输大小 state CRVideo_HTTP_TRANSFER_STAT 文件传输状态，详见：HTTP_TRANSFER_STATE CRVideo_MediaInfoObj 影音文件信息 Type: object 参数 类型 说明 userID string 用户id state number 播放状态 0:播放 1:暂停 2:未播放 mediaName string 影音文件名 CRVideo_MemberInfo 成员信息 Type: object 名称 类型 说明 userID string 用户ID nickname string 昵称 audioStatus CRVideo_ASTATUS 音频状态,数值参考麦克风状态 videoStatus CRVideo_VSTATUS 视频状态,数值参考视频状态定义 CRVideo_QueueInfo 队列信息 Type: object 参数 类型 说明 queID string 队列ID name string 队列名称 desc string 队列描述 prio number 优先级，值越小优先级越高 CRVideo_QueuingInfo 排队信息 Type: object 参数 类型 说明 queID string 队列ID 我排的队列(-1:代表我没有排队；-2:代表我正在会话中,通过GetSessionInfo可获取相关信息) position string 我的位置 queuingTime string 我排队的时长(单位s) CRVideo_RecordFileInfo 录制文件信息 Type: object 参数 类型 说明 fileName string 文件名，全路径 state number 0 没有上传，1上传中，2 上传完毕 uploadPercent number 上传进度，state为1时关注此字段 CRVideo_RecordUploadCfg 上传配置参数 Type: object 参数 类型 说明 type number 0:云屋网盘(默认), 1:http speakerName string 上传地址 CRVideo_RecordVideoInfo 需要录制的视频信息 Type: object 参数 类型 说明 left number 左 top number 上 width number 宽 height number 高 param object 附加参数PropertiesName Type Descriptiontype [CRVideo_REC_VCONTENT_TYP】E](Constant.md#REC_VCONTENT_TYPE) 录制类型 CRVideo_ScreenShareCfgObj 屏幕共享配置对象 Type: object 参数 类型 说明 encodeType number 编码类型,详见屏幕共享的编码类型CRVideo_ENCODE_TYPE catchRect object {\"left\":xx,\"top\":xx,\"width\":xx,\"height\":xx}用于实现区域共享 catchWnd number 共享窗口的窗口句柄，用于实现窗口共享 maxFPS number 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) maxKbps number 最大码率，缺省800kbps CRVideo_SessionInfo 排队信息 Type: object 参数 类型 说明 callID string 会话的呼叫ID peerID string 会话的目标用户ID peerName string 会话的目标用户昵称 bCallAccepted number 呼叫是否被对方接受 0:暂未接受，1:已接受 meetingID number 呼叫接受后，分配的会议ID meetingPswd string 会议密码 duration number 会议持续的时长(单位s) CRVideo_VideoCfg 视频参数 Type: object 参数 类型 说明 sizeType CRVideo_VIDEO_WH_RATE 视频尺寸 fps number 帧率：视频帧率(5~30) maxbps number 视频码率（1~10010001000）;(未配置则使用内部默认值，请参见VIDEO_SHOW_SIZE qp_min number 最佳质量(18~51, 越小质量越好) (未配置则使用内部默认值25) qp_max number 最差质量(18~51, 越大质量越差) (未配置则使用内部默认值36) wh_rate number 视频宽高比(0对应16:9,1对应4:3,2对应1:1) (未配置则使用内部默认值0) wh_rate CRVideo_VIDEO_WH_RATE 视频宽高比例 CRVideo_VideoDeviceInfo 视频设备信息 Type: object 参数 类型 说明 userID string 用户ID videoID string 设备id videoName string 设备名称 CRVideo_VideoIDsObj 视频设备对象 Type: object 参数 类型 说明 userID string 用户ID videoID string 设备id CRVideo_VideoImgObj 视频设备对象 Type: object 参数 类型 说明 format number 视频尺寸，请参见：CRVideo_VIDEO_FORMAT dat string 图像数据Base64编码 width number 图像宽度 height number 图像高度 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-22 20:12:51 "}}
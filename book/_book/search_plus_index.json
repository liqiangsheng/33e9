{"./":{"url":"./","title":"Demo说明","keywords":"","body":"Demo程序介绍 Examples 目录下Demo程序配置和功能简介。 视频会议 JavaScript编写，主要实现了透明传输，创建进入视频会议，用会议号进入视频会议，会议内视频墙、屏幕共享、音视频设置、IM聊天。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的Meeting(web)->index.html 输入服务器地址和用户ID，登录 输入会议主题，创建并进入会议 进入视频会议主界面 第三方进入会议，输入会议号进入 本地双录 JavaScript编写，主要实现本地入会，创建会议，进入会议，会议内录制、上传录制、音视频设置、视频播放、单双摄像头选择。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的RecordDemo(web)->index.html 输入服务器地址和用户ID，登录 点击选择创建并进入会议 进入本地双录主界面 远程双录 JavaScript编写，主要了利用队列系统进行用户分配，然后呼叫分到的用户，双方进入同一个远程会话，创建会议，进入会议，会议内录制、pcm文件录制、上传录制、音视频设置、视频播放、屏幕共享、IM聊天。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的RemoteRecordDemo(web)->index.html 输入服务器地址和用户ID，登录(坐席) 点击开启服务器。等待连接(坐席) 输入服务器地址和用户ID，登录(客户) 点击连接服务器(客户) 等待排队(客户) 进入远程双录主界面(坐席) 进入远程双录主界面(客户) 视频呼叫 JavaScript编写，主要了利用队列系统进行用户分配，然后呼叫分到的用户，双方进入同一个视频会话，创建视频，进入视频，视频内录制、音视频设置、发送文件、截图。 关闭所有浏览器点击安装SDK，然后打开Examples 目录下面的VideoCall(web)->index.html 输入服务器地址和用户ID，登录(坐席) 点击开启服务器。等待连接(坐席) 输入服务器地址和用户ID，登录(客户) 点击连接服务器(客户) 等待排队(客户) 进入远程双录主界面(坐席) 进入远程双录主界面(客户) © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 18:18:19 "},"Explain.html":{"url":"Explain.html","title":"说明","keywords":"","body":"云屋视频SDK参考 此版本适合V3.6版本的SDK 说明 会议SDK结构、SDK开发流程、SDK浏览器开发环境。CloudroomVideo SDK for Web支持的浏览器有：IE8,IE9,IE10,IE11，chrome44及以下(包含chrome44)。 sdk说明 doc(文档说明文件夹） fonts scripts styles callback.js.html CloudroomVideoSDK for Web开发指南.docx（web端开发指南） CRMeet.CbProxy.html CRVideo.CbProxy.html CRVideo.Container.html CRVideo.MediaContainer.html CRVideo.ScreenShareContainer.html CRVideo.VideoContainer.html error.js.html global.html index.html（入口文件） init.js.html live.js.html module-cr_callback.html module-cr_error.html examples(四个demo案例文件夹) Meeting(web)（会议demo） RecordDemo(web)（本地双录demo） RemoteRecordDemo(web)（远程双录demo） VideoCall(web)（视频会议demo） js CloudroomVideoSDK.js（js sdk文件） CloudroomVideoSDK.min.js（js sdk压缩文件） CloudroomVideoSDK_iePatch.js（ie8专用js sdk文件） CloudroomVideoSDK.exe（客户端插件） history.txt（历史版本文件） readme.txt（readme文件 开发准备 JavaScript 的开发工具有很多，开发者可根据自己的喜好进行选择。在此，我们推荐开发者使用 dreamwaver 作为自己的开发工具，本套开发指南也是针对 dreamwaver 开发环境下进行编写的。 安装插件 首先要安装开发插件，CloudroomVideo SDK for Web 提供的所有 JavaScript 接口都是基于这个插件实现，进行web开发之前需要确保插件已经安装成功，双击SDK目录下的开发环境下进行编写的。 选择安装 插件会自动开始安装 完成安装 导入SDK文件 将SDK包js子目录下的CloudroomVideoSDK.js和CloudroomVideoSDK_iePatch.js文件拷贝到自己的web开发环境当中 引用CloudroomVideoSDK.js 如果是IE开发，还需要引用补丁文件 浏览器版本的支持说明 Cloudroom SDK支持chrome 44及以下版本（chrome45版本后不再支持npapi插件），chrome 42以上版本缺省不支持插件，需要手工打开，打开方式如下： 一：在chrome浏览器输入“chrome://flags” 二：启用 三：在chrome浏览器输入“chrome://plugins” 四：找到“CloudroomVideoSDK”，“启用”并勾选“始终允许运行” 五：重启浏览器 基本流程 流程1：（不登录，只参加会议）SDK初始化 -> 设置服务器地址->（参会）-> 反初始化 流程2：（登录后拥有身份，可进行“排队、呼叫、创建会议、参会”等业务）SDK初始化 -> 设置服务器地址-> 登录 ->（排队、呼叫、创建会议、参会）-> 注消 -> 反初始化 SDK初始化 其中oemID为向云屋科技申请的代理商ID，初始化失败会返回对应的错误码 成功返回 SDK反初始化 设置服务器地址   支持单个服务器地址（如：www.cloudroom.com）或多个服务器地址串（如：www.cloudroom.com:8080;183.60.47.52:8080;）,此接口并不会对服务器地址的有效性进行验证，请保证地址准确。 登录   登录会有结果事件通知，成功事件CRVideo_LoginSuccess，失败事件CRVideo_LoginFail，失败事件的错误码参见CloudroomVideoSDK.js文件的详细描述。 注销   退出程序时，必须注销本次登录，然后再进行SDK反初始化操作 呼叫和排队   CloudroomVideo SDK for Web为开发者提供呼叫、排队功能。   SDK目录的examples/VideoCall(web)文件夹为视频呼叫的demo。这个demo主要展示的某坐席用户服务于某个队列，系统把这个队列里的排队用户分配给此坐席用户，经过一系列握手之后，再进行视频通话的功能。 业务流程说明 坐席客户:初始化SDK->登录->取得队列信息->服务于某个队列->接受某个排队用户->创建会议->呼叫排队用户->进入会议->音视频通话->挂断/被挂断->停止服务->注销->卸载SDK 排队客户:初始化SDK->取得队列信息->排队于某个队列->接受呼叫->进入会议->音视频通话->挂断/被挂断->注销->卸载SDK 时序图 坐席客户与排队客户通讯的时序图如下所示:   坐席客户在接受排队用户时，需要创建一个会议，创建成功后把排队用户呼叫进会议中，再进行后面的业务功能操作。用户与用户之间的各种通信功能，如音视频通话，屏幕共享，影音共享等等，必须依托于会议存在。后面还会对会议功能有更详细的说明。 注意事项 A.队列不能由SDK创建，应在Web上先配好; B.一个客服可以服务多个队列，但一个客户只在一个队列排队； C.多个坐席客户可同时服务于一个队列; D.队列有优先级，客服服务多个队列时，将从高优先级的队列服务起。（不同优先级的客户可以通过排队不同队列来实现。 这样比在一个队列插队好，不会引起其他排队用户等待数增加） 会议   CloudroomVideo SDK for Web为开发者提供的音视频通信功能，屏幕共享，影音共享等功能，须在会议里进行。 业务流程说明 创建一个会议:初始化SDK->登录->创建会议->其他用户参加会议->音视频通话、屏幕共享、影音共享等->离开会议->注销->卸载SDK 参加一个会议：(此处用户未登录参会，实际上登录也可参会)初始化SDK->根据会议号加入一个会议->音视频通话、屏幕共享、影音共享等->离开会议->卸载SDK 时序图 一次完整的会议时序图如下所示: 注意事项 A.在SDK初始化且登录会议成功后，才能进行各种会议功能。 B.如果只是参会，可以不登录；（如上图参会者） C.离开会议是没有响应消息的（在网络不通时离开会议也不会退不出去），但“结束会议”时有响应的, 只有收到结束成功消息，才真正算结束成功了。 音视频通讯   CloudroomVideo SDK for Web为开发者提供便捷的音视频通讯接口，通过以下几步的操作，可以在会议中集成音视频交互功能。音视频通讯需在会议里进行。 参会人信息   会议里可以通过接口CRVideo_GetAllMembers获取当前参加会议的所有成员的详细信息，接口如下所示：   会议里可以通过接口CRVideo_GetMemberInfo获取指定成员的详细信息，接口如下所示： 打开音频 先可以通过接口CRVideo_SetAudioCfg设置本地的音频参数，接口如下所示： 通过接口CRVideo_SetMicVolume设置麦克风的音量大小，接口如下所示： 通过接口CRVideo_OpenMic和CRVideo_CloseMic打开和关闭自已或他人的麦克风，接口如下所示： (取得用户麦克风是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 打开视频 计算机可拥有多个摄像头，通过接口CRVideo_GetVideoDevices获取指定用户的视频设备列表(CRVideo_VideoDeviceInfo:用户ID,设备id,设备名称)，接口如下所示： 通过接口CRVideo_SetDefaultVideo设置指定用户的默认摄像头，接口如下所示: 通过接口CRVideo_SetVideoCfg配置视频的清晰度、帧率、码率等； 通过接口CRVideo_OpenVideo和CRVideo_CloseVideo开启或关闭指定用户的摄像头，接口如下所示： (取得用户摄像头是否开启或关闭，可通过接口CRVideo_GetMemberInfo获取) 会议录制 参会过程中可将视频、音频录制成视频。   先通过接口CRVideo_StartRecord开启录制，参数说明请参考截图，接口如下所示：   再通过接口CRVideo_SetRecordVideos，配置录制的视频内容；   可以通过接口CRVideo_StopRecord停止录制，接口如下所示： 其他接口   更多的功能接口，请参考SDK目录的doc文件夹。如图所示，打开doc文件夹下的index.html。 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 18:15:14 "},"IntegratedGuide.html":{"url":"IntegratedGuide.html","title":"集成指南","keywords":"","body":" SDK集成指南 为开发者集成音视频会话及相关高级功能提供相关指导，以下均为 js 代码，详细代码请参考 Examples 目录下 Demo 源代码。 文档中“会议”和“会话”含义等同。 开始音视频会话 快速创建并进入一个简单的音视频会话； 请先准备[说明]中的相关内容：1.安装视频SDK插件, 2.运行环境要求, 3.开发环境配置以及连接相关的麦克风摄像头并确认设备工作正常。 基本步骤如下： 初始化SDK 登录连接视频服务器 创建视频会话 进入会话 打开麦克风/摄像头 有其他人进入会话 退出会话 注销登陆 1. [初始化SDK] 初始化是整个SDK的使用基础，通常在程序启动的时候进行初始化(CRVideo_Init)，退出的时候进行反初始化(CRVideo_Uninit)，整个程序的生命周期中只进行一次初始化和反初始化。 相关API参考请见 初始化/反初始化 SDK内部的组件多为单例组件，整个程序中只能有一个实例，比如“基础组件”，“会议管理组件”，“视频会议组件”，具体请参见各个组件说明。 { //初始化 //\"CLOUDROOM\"为向云屋科技申请的代理商ID //g_location_dir为路径 var init = CRVideo_Init(\"CLOUDROOM\", g_location_dir); //确定初始化 g_init=true; //初始化失败会返回对应的错误码 if(init == CRVideo_WEB_OCX_NOTINSTALLED){ alertLayer(\"ocx未安装\"); }else if(init == CRVideo_OCX_VERSION_NOTUPPORTED){ alertLayer(\"不支持的浏览器\"); }else if(init == CRVideo_WEB_BROWER_NOTUPPORTED){ alertLayer(\"不支持的插件版本\"); }else if(init != 0){ alertLayer(\"CRVideo_init sdkErr\"+\"出错了\"+init); } } 2. [登录连接视频服务器] 设置视频服务器地址，使用云屋授权账号和自定义用户编号登录 相关API请参考 服务器地址，登录/注销 { //服务器名字 g_serverName = $(\"#server_name\").val() //账号 cr_account= $(\"#login_cpyname\").val() ||\"demo@cloudroom.com\"; //md5加密 cr_psw = md5($(\"#login_psd\").val()) || \"e10adc3949ba59abbe56e057f20f883e\"; //昵称 g_nickname = uuid(32,16) //自定义账号 g_userID = uuid(32,16) //设置服务器地址 CRVideo_SetServerAddr(g_serverName) //登录 CRVideo_Login(cr_account, cr_psw, g_nickname, g_userID, \"\") //登陆成功 操作成功则回调CRVideo_LoginSuccess, CRVideo_LoginSuccess.callback = function(userID,cookie){ //登录成功，开始创建视频会话，见下一步 } //登录失败 失败则回调CRVideo_LoginFail CRVideo_LoginFail.callback = function(sdkErr,cookie){ //登录出错，可以弹出错误提示，或调用登录接口再次重试登录 } } 3. [创建视频会话] 输入会议标题，创建一个没有密码的视频会话 相关API请参考 创建/销毁视频会议 { //创建会议 CRVideo_CreateMeeting(\"会议的的主题长度50字内\") //创建会议成功 CRVideo_CreateMeetingSuccess.callback=function(meetObj,cookie){ } //创建会议失败 CRVideo_CreateMeetingFail.callback = function(sdkErr,cookie){ } //监控会议掉线 CRVideo_MeetingDropped.callback=function(){ } //会议掉线 CRVideo_LineOff.callback=function(sdkErr){ } } 4. [进入会话] 用创建成功的会话信息（会议ID和密码）进入会话，其他用户也是利用此会话信息进入该会话。 相关API请参考 进入/退出/结束会议 { //进入会议 //1.会议id 2.会议密码 3.用户id 4.用户昵称 CRVideo_EnterMeeting(g_meetingId,g_meetingPsw,g_userID,g_nickname) //进入会议完成响应 CRVideo_EnterMeetingRslt.callback=function(sdkErr){ // CRVideo_NOERR==没有错误 成功 if(sdkErr == CRVideo_NOERR){ // * 暂未定义 1* @param {string} picID - 2 * @param {object} jsonval - CRVideo_SetPicResource(g_logo_id,{ //资源格式， 可取值：\"yuv420p\"，\"rgb32\"，\"picfile\"，\"picdat\" \"fmt\":\"picdat\", // fmt为\"yuv420p\"时： dat存放的是base64(yuv420p数据)； // fmt为\"rgb32\"时： dat存放的是base64(rgb32数据)； // fmt为\"picfile\"时： dat存放的是“本地文件名”； \"dat\":\"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAWfSURBVHjapJd7bFRFFIfPbLetFYMKvkANBhFbHjaiKKQK4R1SRcHWRFADRgIqJKBYY9SoJCZK1IBgoGKMj2ii8lDRJkIAKYjiA5oYRIj4hwQoBHwCfex2r9+ce9zebrelLLP57Zl77pyZc+Y8Zq5rWVYm6RYPANSBGP2Y5NO7kedboSWgB0iBw6BOAvkK7FNO4MI3LXJGLd4B3y98LxPOhw7uRL4ZbAQvglrJocWy8Ppj1WZpcW+BwUA6QQGYKCm3BZnlyHY7WwWGYXUtKNPtPDPMRokv6F2YqwuK8d8acGkHY/0y/5pM1NJ/CBpcEHj+8+BD4qEcmuiaAmHQ5BFoKxDs1W6Ek/38L8a6bdBTFqI9+L8LOg/+blPC7+ZOMA48Df/ZrrkgyXxJmY6+I6GSgWr4Q8Fx+ovARlAD5kjCrYZ/Lf0CcDMYBIaY3GOgJMt87RBnknxx7pEsyi3Hiqeg67DW5+rfmnqhCyaDqezYy9CJvN+mwdvauiE7E/ro6V2QQHsn12fwf2XyheKCT+j7xV/neQ1+LtXtdu5x+n6BBSzEs8yg/3XGHLcj4w1o6FyBpCvLwl/KxGNZaAT9JSwwD1zJhCPgvwrvED6/G1oIFoKPwZdgQmSOfowdAP2x8xhodsVA2iAhW/HxVPoJsFjLTVIOwH+O53WgN1jBmDdNZgyoaT+P6wskjaRVygi8C3pkKIWv3QnoQNP+BgliCYQPkiu+RJ9n4waB7uB3HetkPRZntp6RbFIl3CmSpZGHIB0DLpUhlGdoNj2vZvBDmopJ/OrcqIza4IOykTF5ukj72hG2BhY/4cLqkHDpN3GWOZQh5C28BHwD7rE6v0CzoW3bYcWmt40dnKWG1KuljeYSZ7U3Fo2BhKtr57tmNxn+SigKugr6s6CHI76tA3PpV4Ej4FuVaX3fANZKk9shJ2OhxbGOsqDZbdUtFDknwp+J5tVovIh+Ff0i5TmNl2aefU14iedRWvkCGU//OpN9R0tyoLWgEv4V4A/bse2ZJTpOnP/CQH+klrcpJCLvk3akYuCFXwA+7Q6Yz33JPgpGI9vAAktN7mHwqRYxkUkZ7vDtJzDfjvCQnaoY7SPSW7Kp3f4EKCfygF5AnOa493OTWhLo+T8J/mvQc7UeBPIBz7UWQ+EM4e4WmuePapYFnBUp+ShUYNKY/4d6K+Z0cApu0iAMNOUo3ZqilWCAjdljbqiJBON6lQvUtU28Gw79y07U++EPBXtdqjytQBFJ9xm9sTlcbOZa2lbb83tgL5hm1zdv/Q9Wlp80N77hjY7phjapeANleUp4ykWqV9ewHUyxvs+WndBK5psG3QJ+A6XwW6C7bdx43k+IS2Ob/EhowDk9WDjPg/MlS3XJCJRjBOtJhhUbw98JbsK61dBdBDHx4bbxvIIx/ay6+kPtcmQHxjPuLffp1gjnuXifYZU/doVzP6yO0ea383vG+Ng5CAoiMePd0TfMBtc/cvtqkXQR9pa5WFy3o3XAbOu/AqYbRYmgkBLcy2p/wO8YpJ4JiizdvFX7LD19PVgG7gTH7dkf6xdosIY3JrHY2BPdAX8nGBKx0Efz22HUOn8R+Rn8aQHFQq7UsiAebrWsRbGR9Pvo+SF8M+guas57RevN+mE2/2ZkNrhUSfoIfxCslNza52BG6BK5ynirwHdW1Br0fhDuqlf4JLrcggJ1cT2jw3aZ5N5uw7bhTDjNlPFX8wpwR3hh1QOu0MYmNW2d7qreiKIZcDatCvhPuCcsmMvsC6tnZMwuLfFCxWy9kqVfrrJozkWRfK3zgV5Ql9B/l74/vi+2wGXL5Qjv/DfHM7yrN0XafJjsN+TW9ANVLy4+4GbZ1u+z8uvj4BpwkY0uz6ZA7s27sUUzu0+E212/rLO33qf7Oj4zy5Pps2+DfT01diJRaNVS238CDAAJMxEnQFPLmQAAAABJRU5ErkJggg==\" }); } 5. [打开麦克风/摄像头] 进入会话成功后，配置并打开自己的麦克风和摄像头 相关API请参考 麦克风/扬声器列表，麦克风设置，摄像头设备列表，视频设置，会议内可观看摄像头列表，开/关摄像头，视频状态，获取/设置默认视频 相关结构定义请参考 音频配置，用户视频信息，用户视频信息列表 { CRVideo_SetEnableMutiVideo(g_userID,true); // 是否可以打开更多的摄像头 传用户ID，bool CRVideo_OpenMic(g_userID) //打开麦克风 传用户ID // 获取系统上的麦克风设备列表// {string[]} 返回麦克风设备字符串列表 var micArr = CRVideo_GetAudioMicNames(); //获取音频参数 {CRVideo_AudioCfg} 返回cfg对象 var audioCfg = CRVideo_GetAudioCfg(); var micArrOptionsStr = \"\"; for(var i = 0;i\"+micArr[i]+\"\" }else{ micArrOptionsStr += \"\"+micArr[i]+\"\" } } micArrOptionsStr = \"默认设备\" + micArrOptionsStr $(micArrOptionsStr).appendTo(\"#mic_select\"); // 获取系统上的扬声器设备列表 // * @access public // * @returns {string[]} 返回扬声器设备列表 var spkerArr =CRVideo_GetAudioSpkNames() var spkerArrOptionsStr = \"\"; for(var i = 0;i\"+spkerArr[i]+\"\" }else{ spkerArrOptionsStr += \"\"+spkerArr[i]+\"\" } } spkerArrOptionsStr = \"默认设备\" + spkerArrOptionsStr $(spkerArrOptionsStr).appendTo(\"#spker_select\") // 设置默认的摄像头 // * @access public // * @param {string} userID - 用户ID // * @param {number} videoID - 摄像头ID CRVideo_SetDefaultVideo(g_userID,$(\"#video_select\").val()) // 获取用户所有的摄像头信息 userID @returns {CRVideo_VideoDeviceInfo[]} 返回设备列表 var videoList = CRVideo_GetAllVideoInfo(g_userID) //更新video配置 function updateVideoCfg(sizeType,fps,qp){ var cfg = {}; cfg.sizeType = sizeType; var fps = parseInt($(\"frame_input\").val()); if(fps20){ fps = 20; } cfg.fps = fps; cfg.maxbps = video_size_arr[sizeType][2]*1000; if(qp == 1){ cfg.qp_min = 22 cfg.qp_max = 36 }else if(qp == 0){ cfg.qp_min = 22 cfg.qp_max = 25 } // 系统视频参数设置 cfg - 设置参数 CRVideo_SetVideoCfg(cfg); // 配置远程影音共享时，图像质量参数 jsonCfg - json格式的字符串，详见VideoCfgOjb说明 CRVideo_SetMediacfg(cfg); } //打开用户的摄像头，以便本地、远端显示视频图像 CRVideo_OpenVideo(g_userID) // * 获取用户的摄像头状态 // * @access public // * @param {string} userID - 用户ID // * @returns {CRVideo_VSTATUS} 麦克风摄像头状态 var vStatus = CRVideo_GetVideoStatus(g_userID) if(vStatus == 0){ this.popup(\"没有可打开的视频设备\") }else if(vStatus == 2){ //打开用户的摄像头，以便本地、远端显示视频图像 CRVideo_OpenVideo(g_userID); }else { // 关闭用户的摄像头 CRVideo_CloseVideo(g_userID); } } 6. [有其他人进入会话] 其他人入会的步骤也是上述的[4、5]步，拿到会议信息后进入到他人创建的会议，此步骤的目的是为了实时关注比自己晚进来的人并刷新摄像头画面显示；如果想要获取之前进来的人，可以调用 CRVideo_GetAllMembers 获取会议成员列表，也可以调用 CRVideo_GetWatchableVideos 获取所有可以观看的摄像头列表进行加载。 相关API请参考 有人进入/离开会议通知，会议内可观看摄像头列表相关结构定义请参考 用户视频信息列表 { * 获取会议内所有可观看的摄像头 * 只有摄像头打开才能被获取到,能获取到自已的和会议里其他人的； * @access public * @returns {CRVideo_VideoIDsObj[]} 对象VideoIDArray */ var videoArr = CRVideo_GetWatchableVideos() * 获取所有用户的信息 * @access public * @return {CRVideo_MemberInfo[]} 返回含多个成员信息 */ var meber = $.parseJSON(CRVideo_GetAllMembers());// 获取所有会员信息 //用户进入会议 相当于第二方监听第三方加入会议 CRVideo_UserEnterMeeting.callback = function(usrID){ 第三方进入的相关操作 } // 通知某用户离开了会议exitMeeting CRVideo_UserLeftMeeting.callback = function(id){ //第三方离开的相关操作 } 至此，一个简单的音视频会话就建立起来了。 7.退出会话 在未注销的情况下可反复的进入退出同一个会议。 相关API请参考 进入/退出/结束会议 { /** * 离开会话 * 他人离开会话的回调事件CRVideo_UserLeftMeeting * @access public */ CRVideo_ExitMeeting() * 某用户离开了会议 * @callback CRVideo.CbProxy~CRVideo_UserLeftMeeting * @param {number} id - 离开会议的用户ID */ CRVideo_UserLeftMeeting.callback=function(用户ID){ } } 8. [注销登陆] 可重复的登录和注销。 相关API请参考 进入/退出/结束会议，登录/注销，初始化/反初始化 { //注销本次登陆 CRVideo_Logout() } 9.反初始化，退出SDK 执行反初始化后SDK功能不再可用。 相关API请参考 初始化/反初始化 { //反初始化 CRVideo_Uninit(); } 添加音视频会话功能 添加会议内的高级功能 音视频控制 进入会话后实现设备的加载、选择、设置 开关麦克风 监控麦克风状态变化 设置麦克风和扬声器音量 监控麦克风声音大小变化 1.开关麦克风 通过传入参数来控制开关的对象，如果是本地机器上的麦克风，需要传入自己的ID，如果要远程开关他人麦克风，则传入对方的ID 相关API请参考 麦克风、扬声器设备的获取，开/关麦克风 /** * 打开自己的麦克风 * 打开自已的麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到； * @param {string} userID - 用户的ID * @access public */ CRVideo_OpenMic(userid); /** * 关闭自己的麦克风 * 关麦操作是立即生效的，本地会立即停止采集； * @access public * @param {string} userID - 登录成功后分配的userID */ CRVideo_CloseMic(userid); 2.监控麦克风状态变化 1. 开关自己或他人的的麦克风都会收到该回调函数 2. 自己的麦克风被他人开关也会收到该回调函数 3. 也可主动获取麦克风状态，一般用于各种判断 相关API请参考 麦克风状态变化 相关结构定义请参考 麦克风状态 //连接状态变化委托 //摄像头列表更新 通知用户的视频设备有变化 CRVideo_VideoDevChanged.callback =function(userID){ } //摄像头状态改变 // 1会话中设备的所有者ID 2旧状态 3新状态 CRVideo_VideoStatusChanged.callback = function(userID,oldStatus,newStatus){ if(g_userID == userID){ /**视频处于打开状态（软开关）*/ /**向服务器发送打开消息中 */ if(newStatus !=CRVideo_VSTATUS.VOPEN && newStatus !=CRVideo_VSTATUS.VOPENING){ CRVideo_OpenVideo(g_userID); } } } /* 视频状态 * @enum { number } */ CRVideo_VSTATUS = { /**视频状态未知*/ VUNKNOWN:0, /**没有视频设备*/ VNULL:1, /**视频处于关闭状态（软开关）*/ VCLOSE:2, /**视频处于打开状态（软开关）*/ VOPEN:3, /**向服务器发送打开消息中 */ VOPENING:4, } 3.设置麦克风和扬声器音量 相关API请参考 麦克风音量,扬声器音量 /** * 设置麦克风音量大小 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ var SetMicVolume = CRVideo_SetMicVolume(level) /** * 设置本地扬声器音量 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ var SetSpeakerVolume = CRVideo_SetSpeakerVolume(value) 4.监控麦克风声音变化 可用来实时展示当前麦克风采集到声音的大小 相关API请参考 麦克风声音变化 //麦克风音量波动 /** * SDK通知用户的说话声音强度更新 * @callback CRVideo.CbProxy~CRVideo_MicEnergyUpdate * @param {string} userID - 用户ID * @param {number} oldLevel - 原来的说话声音强度 * @param {number} newLevel - 现在的说话声音强度 */ CRVideo_MicEnergyUpdate.callback=function(userID ,oldLevel,newLevel){ } 录制 实现摄像头和屏幕录制，并可上传到服务器 录制内容配置 开始、停止录制 录制文件的大小、时长、状态 设置录制文件是否加密 录制文件列表 录制文件列表添加、删除文件 上传、取消上传录制文件 回放录制文件 1.录制内容配置 相关API请参考 录制内容配置 相关结构定义请参考 录制内容配置 /** * 开始录制 * @access public * @param {string} recordPath - 录像存储的路径 * @param {CRVideo_RECORD_AUDIO_TYPE} audioType - 音频类型 * @param {number} frameRate - 帧率，建议不要太高；(取值1~24) * @param {number} recordWidth - 视频宽度 * @param {number} recordHeight - 视频高度 * @param {number} bitRate - 录制的最高码率，当图像变化小时，实际码率会低于此值。建议：640*360: 500000; (500kbps)，1280*720：1000000; (1mbps)，1920*1080: 2000000; (2mbps) * @param {number} defaultQP - 目标质量(推荐:36, 中:28, 高:22) * @param {CRVideo_REC_DATATYPE} recDataType - 录制内容类型（视频+音频） * @param {number} recDataType - 录制内容类型（视频+音频） * @param {number} isUploadOnRecording - 是否录制的同时上传 1为是，0为否 */ CRVideo_StartRecordIng(recordPath,audioType,frameRate,recordWidth,recordHeight,bitRate,defaultQP,recDataType,isUploadOnRecording) 2.开始/停止录制 1. 先开始录制，配置好录制文件信息 2. 然后更新录制内容配置 3. 在录制过程中可以多次更新录制配置，从而变更录制内容 相关API请参考 开始/停止录制 相关结构定义请参考 录制内容类型，录制文件配置 //定义录制文件参数 var cfg = {}； var date = new Date(); var year = date.getFullYear(); var mouth = date.getMonth()+1; var day =date.getDate(); var hour = date.getHours(); var minute = date.getMinutes(); var second = date.getSeconds(); cfg.filePathName = year+'-'+mouth+'-'+day+'-'+hour+'-'+minute+'-'+second+'.mp4';; cfg.recordWidth = 1280; //宽度 cfg.recordHeight = 720; //高度 cfg.frameRate = 15; //帧率 cfg.bitRate = 1000000; //码率 cfg.defaultQP = 24; //清晰度 cfg.recDataType = recDataType; //录制内容 //开始录制 CRVideo_StartRecordIng(cfg) //开始录制后，更新录制配置 updateRecord(); //上方自定义函数 //停止录制 CRVideo_StopRecord(); 3.录制文件的大小、时长、状态 相关API请参考录制文件大小，时长，录制状态变化通知 相关结构定义请参考 错误码定义, 录制状态，通知录制文件状态变化 /** * 获取当前录制的文件大小（以字节为单位） * @access public * @returns {number} 返回录制文件大小（以字节为单位） */ //获取当前录制的文件大小（以字节为单位） var CRVideo_GetRecFileSize = CRVideo_GetRecFileSize() /** * 获取录制的文件时长（以秒为单位） * @access public * @returns {number} 返回录制的文件时长（以秒为单位） */ var CRVideo_GetRecDuration = CRVideo_GetRecDuration() //录制异常，录制将自动停止 CRVideo_RecordErr.callback=function(sdkErr){ //录制发生错误，代码： 见[错误码定义] } // sdk通知录制文件状态更改 fileName本地文件路径 state - 状态 0 未上传 1 上传中 2已上传 CRVideo_NotifyRecordFileStateChanged.callback=function(fileName,state){ //fileName, 文件名 //state, 状态 } 4.设置录制文件是否加密 启动录制时调用，则本次录制是否加密本地录制文件，也可全局配置，这样每一次录制都是加密的。 相关API请参考 设置录制文件是否加密 /** * 设置本地生成的录制文件是否加密 * @access public * @param {number} encrypt - 1表示加密 0表示不加密 */ CRVideo_SetRecordFileEncrypt (encrypt) 5.录制文件列表 相关API请参考 录制文件列表 相关结构定义请参考 录制文件列表 /* 取得所有录制文件信息 * @access public * @return {CRVideo_RecordFileInfo[]} - 返回含多个录制文件信息 */ var g_getAll_videfile_list = CRVideo_GetAllRecordFiles(); 6.录制文件列表添加、删除文件 1. 添加录制文件到录制文件列表，这样此文件便可上传和回放 2. 移除文件时本地文件会被删掉，正在上传的文件会被取消上传，已经上传的文件不受影响 相关API请参考 录制列表添加/删除文件 /** * 第三方录制文件调用此接口后可进行本地回放和上传到服务器record下 * @typedef {object} CRVideo_AddFileToRecordMgr - 添加本地文件到录制文件管理中 * @property {string} fileName - 文件名，不含路径 * @property {string} filePath - 文件路径，不含文件名 * @access public * @return {CRVideo_AddFileToRecordMgr[]} - -1：本地文件不存在，0：成功，1：文件已经被添加过 */ var AddFileToRecordMgr = CRVideo_AddFileToRecordMgr(fileName,filePath); /** * 删除本地的录制文件，上传中的文件会被取消上传 * @access public * @param {string} filename - 文件名，全路径 */ CRVideo_RemoveFromFileMgr(filename) 7.上传、取消上传录制文件 参数是绝对路径文件名 相关API请参考 上传/取消上传录制文件，通知录制文件上传进度，通知录制文件状态变化 相关结构定义请参考 录制文件列表 // /上传文件 filename - 文件名，全路径 CRVideo_UploadRecordFile(fileName); // 取消视频上传的方法 CRVideo_CancelUploadRecordFile(fileName); // 通知录制文件上传进度 fileName - 文件名 percent - 进度0-100 CRVideo_NotifyRecordFileUploadProgress.callback = function(fileName,percent){ // 上传文件：fileName // 上传进度：percent } //sdk通知录制文件状态更改 fileName本地文件路径 state - 状态 0 未上传 1 上传中 2已上传 CRVideo_NotifyRecordFileStateChanged.callback = function(fileName,state){ //fileName, 文件名 //state， 状态 } 8.回放录制文件 此接口需要配合影音共享UI显示组件或者影音播放相关的接口进行画面和声音展示 相关API请参考 回放录制文件 //开始回放 fileName 文件名 CRVideo_PlaybackRecordFile(fileName) 文件上传下载 网盘容量、文件列表 网盘文件操作（上传、下载、暂停、删除） 1.网盘容量、已上传文件列表 获取网盘的使用情况和已经上传到服务器的文件列表 相关API请参考 会议网盘容量，获取网盘文件列表 相关结构定义请参考 网盘文件，网盘文件列表 /** * 获取会议网盘的容量信息 说明：调用结果请见事件getNetDiskSummaryRslt * @access public */ CRVideo_GetNetDiskSummary(public) ; /** * 获取网盘用户共享文件列表，即使用makeNetDiskFileID中参数fileType为0的生成的fileID上传的文件 * @access public */ CRVideo_GetNetDiskFileList(public) /* SDK通知获取网盘容量信息结果 * @callback CRVideo.CbProxy~CRVideo_GetNetDiskSummaryRslt * @param {number} diskLimit - 网盘总容量 * @param {number} diskUsed - 网盘已用容量 */ CRVideo_GetNetDiskSummaryRslt.callback=function(diskLimit,diskUsed){ } /** * SDK通知获取网盘文件列表 * @callback CRVideo.CbProxy~CRVideo_GetNetDiskFileListRslt * @param {string[]} fileList - 网盘文件列表，json格式，定义见NetDiskObjs */ CRVideo_GetNetDiskFileListRslt .callback=function(fileList){ } 2.网盘文件操作 1.上传、下载、删除、暂停（上传下载）、取消操作 2.上传时需要调用SDK接口生成网盘文件ID 相关API请参考 生成网盘文件ID，上传/下载/删除网盘文件，取消网盘文件操作，暂停/继续网盘文件传输，获取网盘容量信息结果，获取网盘文件列表结果，删除网盘文件结果，网盘容量不足通知，通知网盘文件传输进度 /** * 生成网盘文件全局唯一ID * @access public * @param {number} fileType - 文件类型，0:用户共享文件，1:程序使用文件 * @param {string} newFileName - 传入的全局唯一文件名，建议带文件后缀 * 说明：1.fileType等于0时，为会议网盘共享文件，上传的文件可通过; * 2.getNetDiskFileList获取到文件列表详情 * 3.fileType等于1时，用户程序内资源文件，如白板的背景图片，无法获取文件详情 * 4.两种文件类型都要调用uploadNetDiskFile和downloadNetDiskFile进行上传和下载 */ CRVideo_MakeNetDiskFileID(fileType,newFileName) /** * 上传文件到网盘 * @access public * @param {string} fileID - 网盘文件ID * @param {string} localFilePath - 本地文件路径,含文件名 */ CRVideo_Uploadnetdiskfile(fileID,localFilePath) /** * 从网盘中下载文件 * @access public * @param {string} fileID - 网盘文件ID * @param {string} localFilePath - 本地文件路径，全路径 */ CRVideo_Downloadnetdiskfile(fileID,localFilePath) /** * 删除网盘文件 * @access public * @param {string} fileID - 网盘文件ID */ CRVideo_Deletenetdiskfile(fileID) /** * 设置网盘文件传输暂停或继续 * @access public * @param {string} fileID - 网盘文件ID * @param {bool} bTranPause - 是否暂停 */ CRVideo_SetNetDiskTransportPause(fileID,bTranPause) /** * 取消网盘文件操作（上传/下载） * @access public * @param {string} fileID - 网盘文件ID */ CRVideo_Canclenetdiskfile(fileID) /* SDK通知删除网盘文件结果 * @callback CRVideo.CbProxy~CRVideo_NotifyNetDiskFileDeleteRslt * @param {string} fileID - 网盘文件id * @param {number} isSucceed - 是否成功 1 成功 0 失败 */ CRVideo_NotifyNetDiskFileDeleteRslt.callback=function(fileID,isSucceed){ } /* SDK通知网盘上传或下载进度 * @callback CRVideo.CbProxy~CRVideo_NotifyNetDiskTransforProgress * @param {string} fileID - 网盘文件id * @param {number} percent - 进度0-100 * @param {number} isUpload - 是否是上传 1 上传 0 下载 */ CRVideo_NotifyNetDiskTransforProgress.callback=function(fileID,percent,isUpload){ } 屏幕共享 开始、停止共享 远程操作权限 1.开始、停止共享 使用接口启动共享，出现共享内容显示组件后，用组件上的功能开始标注和结束共享。 相关API请参考 屏幕共享配置，开始/停止屏幕共享，开始/停止屏幕共享操作结果，开始/停止屏幕共享通知 相关结构定义请参考 屏幕共享配置 /** * 设置屏幕共享配置 * @access public * @param {CRVideo_ScreenShareCfgObj} jsonCfg 屏幕共享配置 */ CRVideo_SetScreenShareCfg(jsonCfg) /** * 开启屏幕共享 * 操作完成则回调CRVideo_StartScreenShareRslt * @access public */ CRVideo_StartScreenShare() /** * 停止屏幕共享 * @access public */ CRVideo_StopScreenShare() /** * 开启屏幕共享的响应事件 * @callback CRVideo.CbProxy~CRVideo_StartScreenShareRslt * @param {number} sdkErr - 操作失败代码,定义见cr/error */ CRVideo_StartScreenShareRslt.callback=function(sdkErr){ } /** * 停止屏幕共享的响应事件 * @callback CRVideo.CbProxy~CRVideo_StopScreenShareRslt * @param {number} sdkErr - 操作失败代码,定义见cr/error */ CRVideo_StopScreenShareRslt.callback=function(sdkErr){ } /** * 通知他人开启了屏幕共享 * @callback CRVideo.CbProxy~CRVideo_NotifyScreenShareStarted */ CRVideo_NotifyScreenShareStarted.callback=function(){ } /** * 通知他人停止了屏幕共享 * @callback CRVideo.CbProxy~CRVideo_NotifyScreenShareStopped */ CRVideo_NotifyScreenShareStopped.callback=function(){ } 2.远程操作权限 把共享区域的操作控制权限赋予某人，自己也可以获取他人赋予的操作权限 相关API请参考 赋予/收回远程屏幕控制权限，通知赋予/收回屏幕共享操作权限 ```cs /** * SDK通知远程控制权限给予了某人 * @callback CRVideo.CbProxy~CRVideo_NotifyGiveCtrlRight * @param {string} operId - 操作的用户ID * @param {string} targetId - 控制权限给予了谁 */ CRVideo_NotifyGiveCtrlRight.callback=function(operId,targetId){ } /** * SDK通知收回远程控制 * @callback CRVideo.CbProxy~CRVideo_NotifyReleaseCtrlRight * @param {string} operId - 操作的用户ID * @param {string} targetId - 收回了谁的控制权限 */ CRVideo_NotifyReleaseCtrlRight.callback=function(operId,targetId){ } 影音播放共享 播放配置 播放、暂停、停止 设置播放进度 文件列表、播放信息、播放音量 1.播放配置 此配置主要是为了定义共享播放时会议内其他人看到的效果 相关API请参考 影音播放配置 相关结构定义请参考 视频尺寸定义 /** * 配置远程影音共享时，图像质量参数 * @access public * @param {string} jsonCfg - json格式的字符串，详见VideoCfgOjb说明 */ CRVideo_SetMediacfg(jsonCfg); 2.播放、暂停、停止 每次只能播放一个视频，当前播放需要先停止然后才能进行下一个视频播放； 开始播放参数可控制此播放是只有自己可见还是会议内所有人可见。 相关API请参考 开始/暂停/停止影音播放，通知影音打开/播放/暂停/停止，通知更新影音播放进度 /** * 开始播放影音 * @access public * 响应事件 如果播放成功，请关注通知事件notifyMediaOpened 如果播放失败，请关注通知事件notifyMediaStop * @param {string} filename - 文件名，全路径 * @param {number} locPlay - 是否仅仅本地播放（1:本地播放，0：会议内播放） * @param {number} bPauseWhenFinished - 是否播放完毕自动暂停在最后一帧 */ CRVideo_StartPlayMedia(filename,locPlay,bPauseWhenFinished) /** * 暂停或恢复播放影音 * @access public * @param {bool} bPause - ture为暂停，false为恢复 */ CRVideo_PausePlayMedia(bPause) /** * 停止播放影音 * @access public */ CRVideo_StopPlayMedia() 3.设置播放进度 可以通过播放组件上的工具条拖动来调整播放进度，也可以用代码来设置播放的进度 相关API请参考 设置播放进度 /** * 设置播放进度 * @access public * @param {number} pos - 设置播放位置，单位：秒 */ CRVideo_SetMediaplaypos(pos) 4.文件列表、播放信息、播放音量 相关API请参考 影音文件列表，影音播放信息，影音播放音量 相关结构定义请参考 影音文件 /** * 取得播放路径下的所有可播放文件 * @access public * @return {string[]} - 文件名列表； */ var GetAllFilesInMediaPaths = CRVideo_GetAllFilesInMediaPath() /** * 取得影音文件信息 * @access public * @param {string} userID - 用户id * @returns {CRVideo_MediaInfoObj} - 影音文件信息 */ var getmediainfo = CRVideo_Getmediainfo(userID) //设置当前播放的影音声音 var vol = 24; /** * 设置本地扬声器音量 * @access public * @param {number} level - 音量等级（ 取值范围：0~255） * @returns {bool} 设置成功则返回true,否则返回false */ CRVideo_SetSpeakerVolume(value) = vol; 聊天 实现会话内文本聊天，如果需要更加丰富的聊天内容，可自己传输文本格式，并进行相关解析 相关API请参考 发送IM文本消息，通知收到IM消息 /** * 发送IM消息 * 响应事件CRVideo_SendIMmsgRlst * @access public * @param {string} text - 发送的文本消息 * @param {string} UserID - 目标用户，如果用户ID为空，消息发送给会议内所有用户 * @param {string} cookie - 自定义用户数据 * @returns {string} - 任务id */ var CRVideo_SendIMmsgID = CRVideo_SendIMmsg(text,UserID,cookie) /** * 发送IM消息，SDK通知使用者发送结果 * @callback CRVideo.CbProxy~CRVideo_SendIMmsgRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendIMmsgRlst.callback=function(taskID,sdkErr,cookie){ } /** * SDK通知收到IM消息 * @callback CRVideo.CbProxy~CRVideo_NotifyIMmsg * @param {string} fromUserID - 消息来源 * @param {string} text - 消息内容 * @param {number} sendTime - 消息发送时间戳，从1970开始算起 */ CRVideo_NotifyIMmsg.callback=function(fromUserID,text,sendTime){ } 参会成员管理 获取会话内人员及相关信息，得到成员的userID后可以对其进行相关的远程音视频操作 相关API请参考 会议成员列表，会议成员信息 相关结构定义请参考 会议成员 /** * 获取所有用户的信息 //获取所有参会人 * @access public * @return {CRVideo_MemberInfo[]} 返回含多个成员信息 */ var GetAllMembers = CRVideo_GetAllMembers() /** * 获取指定用户的信息 //获取某个参会人的信息 * @access public * @param {string} userID - 用户ID * @return {CRVideo_MemberInfo} info - 返回用户userID的成员信息 */ var GetMemberInfo = CRVideo_GetMemberInfo(userID) 功能页同步 用户会话内同步所有人的功能，包括视频墙、影音共享、屏幕共享、电子白板 相关API请参考 设置/获取会话内主功能页，会话内主功能页切换通知 相关结构定义请参考 主功能类型 /** * 功能切换 * @access public * @param {number} mainPage -功能类型 * @param {string} pageID - 子页面标识（如创建白板时返回的boardID） */ CRVideo_Switchtopage(mainPage,pageID) /* SDK通知功能切换 //当他人切换功能页时，收到通知消息 * @callback CRVideo.CbProxy~CRVideo_NotifySwitchToPage * @param {CRVideo_MAIN_PAGE_TYPE} mainPage - 功能类型 * @param {string} pageID - 子页面标识 */ CRVideo_NotifySwitchToPage.callback = function(mainPage,pageID){ } 队列管理 利用队列功能，实现用户分配。使用队列时通常会有两种角色，坐席和客户，队列模块把排队的客户分配给某个服务队列的坐席。 组件介绍请参考 队列管理组件 初始化队列，获取队列数据 坐席队列操作 坐席请求用户 系统自动给坐席分配用户 客户排队操作 1.初始化队列，获取队列数据 在登录成功后初始化队列数据 相关API请参考 初始化队列，初始化队列结果，查询所有队列 相关结构定义请参考 队列信息 /** * 初始化用户队列功能数据。//可在登录成功后初始化队列数据 * 操作完成回调CRVideo_InitQueueDatRslt，初始化成功后才可获取队列队列相关信息。 * @access public * @param {string} cookie -自定义数据 (在回调时，回传给调用者) */ CRVideo_InitQueueDat(cookie) /** * 队列初始化操作结果 * @callback CRVideo.CbProxy~CRVideo_InitQueueDatRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_InitQueueDatRslt.callback = function(sdkErr,cookie){ /** * @typedef {object} CRVideo_QueStatus - 队列状态 * @property {number} queID - 队列id * @property {number} agent_num - 坐席数量 * @property {number} wait_num - 排队客户数量 * @property {number} srv_num - 正在服务的客户数量 }; 2.坐席队列操作 坐席角色开始和停止服务队列，以及操作后队列状态的变化 相关API请参考 开始/停止服务队列，开始/停止队列服务结果 相关结构定义请参考 队列状态 /** * 开始服务某个队列(可以多次调用，开启对多个队列的服务) //开始服务队列 * 操作回调CRVideo_StartServiceRslt * 开启成功后： * a. 如果没有开启免打挽，那么系统会自动分配客户：VideoCall_Queue_CallBack::autoAssignUser； * b. 如果开启免打挽，系统就不会分配客户，如需服务客户可调用：reqAssignUser。 * @access public * @param {string} queID - 队列ID * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_StartService(queID,cookie) /** * 停止服务某个队列 //停止服务队列 * 操作完成回调CRVideo_StopServiceRslt * @access public * @param {string} queID - queID 队列ID * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StopService(queID,cookie) /** * 获取我服务的所有队列 * @access public * @returns {string[]} 返回我服务的队列列表 */ var GetServingQueues = CRVideo_GetServingQueues() /* 开始服务队列操作结果 * @callback CRVideo.CbProxy~CRVideo_StartServiceRslt * @param {number} queID - 服务的队列ID * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StartServiceRslt.callback = function(queID,sdkErr,cookie){ } /** * 停止服务队列操作结果 * @callback CRVideo.CbProxy~CRVideo_StopServiceRslt * @param {number} queID - 服务的队列ID * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StopServiceRslt.callback = function(queID,sdkErr,cookie){ } /** * 队列状态变化通知 * @callback CRVideo.CbProxy~CRVideo_QueueStatusChanged * @param {CRVideo_QueStatus} queStatus -队列状态 */ CRVideo_QueueStatusChanged.callback=function(queStatus){ /** * @typedef {object} CRVideo_QueInfo - 队列信息 * @property {number} queID - 队列id * @property {number} name - 队列名称 * @property {string} desc - 队列描述 * @property {number} prio - 优先级，值越小优先级越高 */ } 3.坐席请求用户 在设置DND免打扰状下态，系统不再自动分配，需要手动申请用户 相关API请参考 免打扰，设置免打扰结果，请求分配用户，请求分配用户结果 /** * 设置免打扰状态。 * 操作成功则回调CRVideo_SetDNDStatusSuccess,失败则回调CRVideo_SetDNDStatusFail。 * @access public * @param {number} DNDStatus - 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_SetDNDStatus(DNDStatus,cookie) /** * 请求分配一个客户 * 当关闭免打扰时，系统将自动分配客户，无需调用此函数； * 当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配； * @access public * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_ReqAssignUser(cookie) /** * 请求分配客户操作结果 * @callback CRVideo.CbProxy~CRVideo_ReqAssignUserRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {CRVideo_QueUser} user - 队列用户信息 * @param {string} cookie - 自定义用户数 */ CRVideo_ReqAssignUserRslt.callback = function(sdkErr,user,cookie){ } 4.系统自动给坐席分配用户 系统自动分配的用户在坐席还未选择接受或拒绝时，系统可以撤回分配 相关API请参考 自动分配用户通知，接受/拒绝分配的用户，自动分配用户被取消 /* 系统自动安排客户 * @callback CRVideo.CbProxy~CRVideo_AutoAssignUser * @param {CRVideo_QueUser} user - 队列用户信息 * 如果想停止系统的自动分配，请通setDNDStatus设置免打扰功能 */ CRVideo_AutoAssignUser.callback = function(user){ } /** * 响应分配客户操作结果 * @callback CRVideo.CbProxy~CRVideo_ResponseAssignUserRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_ResponseAssignUserRslt.callback = function(sdkErr,cookie){ } /** * 系统取消已经安排的客户 * @callback CRVideo.CbProxy~CRVideo_CancelAssignUser * @param {string} queID - 服务的队列 * @param {string} userid - 用户id */ CRVideo_CancelAssignUser.callback = function(queID,userid){ } 5.客户排队操作 客户选择一个队列进行排队，每次只能排一个队列 相关API请参考 开始/停止排队，开始/停止排队操作结果，队列状态变化，排队信息变化 相关结构定义请参考 队列状态，排队信息 /** * 客户开始排队 * 操作完成回调CRVideo_StartQueuingRslt * @access public * @param {string} queID - queID 队列ID * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StartQueuing(queID,cookie) /** * 客户停止排队 * 操作完成回调CRVideo_StopQueuingRslt * @access public * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者) */ CRVideo_StopQueuing(cookie) /** * 开始排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StartQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_StartQueuingRslt.callback = function(sdkErr,cookie){ } /** * 停止排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StopQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数 */ CRVideo_StopQueuingRslt.callback = function(sdkErr,cookie){ } /** * 队列状态变化通知 * @callback CRVideo.CbProxy~CRVideo_QueueStatusChanged * @param {CRVideo_QueStatus} queStatus -队列状态 */ CRVideo_QueueStatusChanged.callback = function(queStatus){ /** * @typedef {object} CRVideo_QueInfo - 队列信息 * @property {number} queID - 队列id * @property {number} name - 队列名称 * @property {string} desc - 队列描述 * @property {number} prio - 优先级，值越小优先级越高 */ } /** * 排队信息变化通知 * @callback CRVideo.CbProxy~CRVideo_QueuingInfoChanged * @param {CRVideo_QueInfo} queuingInfo - 队列信息 */ CRVideo_QueuingInfoChanged.callback = function(queuingInfo){ /** * 开始排队操作结果 * @callback CRVideo.CbProxy~CRVideo_StartQueuingRslt * @param {number} sdkErr - 操作结果代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ } 呼叫他人 实现用户到用户的呼叫，以此来实现会话信息的分发以及相关信息的传递 主叫 被叫 1.主叫 呼叫发起方 相关API请参考 开始呼叫，挂断呼叫，开始呼叫结果，挂断呼叫结果，通知呼叫被对方接受/拒绝 /** * 发起呼叫，邀请用户参加视频会话。 * 操作成功则回调CRVideo_CallSuccess,失败则回调CRVideo_CallFail。 * 呼叫时，对方迟迟不响应，30秒后系统自动结束呼叫。 * @access public * @param {string} calledUserID - 被叫用户的账户ID * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} usrExtDat - 自定义扩展参数 * @param {string} cookie - 自定义数据(在回调时，回传给调用者) * @returns {string} 返回本次呼叫标识码（呼叫ID） */ var callID =CRVideo_Call(calledUserID,meetObj,usrExtDat,cookie) /** * 挂断正在进行的视频呼叫或视频通话 * 操作成功则回调CRVideo_HangupCallSuccess,失败则回调CRVideo_HangupCallFail。 * @access public * @param {string} callID - 呼叫ID * @param {string} usrExtDat - 自定义扩展参数 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者) */ CRVideo_HungupCall(callID,usrExtDat,cookie) /** * 呼叫他人操作成功响应 * @callback CRVideo.CbProxy~CRVideo_CallSuccess * @param {string} callID - 呼叫全局标识 * @param {string} cookie - 自定义用户数据 */ CRVideo_CallSuccess.callback = function(callID,callback){ } /** * 呼叫他人操作失败响应 * @callback CRVideo.CbProxy~CRVideo_CallFail * @param {string} callID - 呼叫全局标识 * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_CallFail.callback = function(callID,sdkErr,cookie){ } /** * SDK通知自己视频呼叫被对方接受 * @callback CRVideo.CbProxy~CRVideo_NotifyCallAccepted * @param {string} callID - 呼叫全局标识 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallAccepted = function(callID,meetObj,usrExtDat){ } /** * SDK通知自己呼叫被对方拒绝 * @callback CRVideo.CbProxy~CRVideo_NotifyCallRejected * @param {string} callID - 呼叫全局标识 * @param {number} sdkErr - 呼叫被对方拒绝的原因代码,定义见cr/error * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallRejected = function(callID,sdkErr,usrExtDat){ } 2.被叫 被呼叫方 相关API请参考 通知有人呼入，接受/拒绝他人的呼叫，接受/拒绝他人呼叫结果 /** * SDK通知自己被呼叫 * @callback CRVideo.CbProxy~CRVideo_NotifyCallIn * @param {string} callID - 呼叫全局标识 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息 * @param {string} callerID - 呼叫人员的标识ID * @param {string} usrExtDat - 自定义扩展参数 */ CRVideo_NotifyCallIn.callback = function(callID,meetObj,callerID,usrExtDat){ } 透明传输 独立于会话的传输功能，对SDK透明，发送对象必须要先成功登录 发送命令、文本、文件 收到命令、数据、文件 1.发送命令、文本、文件 小数据走命令接口，大数据走文本接口，命令的发送不可以被取消，也没有进度通知 相关API请参考 发送命令/数据/文件，取消发送，发送命令/数据/文件结果，发送进度，取消发送结果 /** * 发送小块数据(一次性发送不会有进度通知,发送结果事件CRVideo_SendCmdRlst,CRVideo_SendCmd不能被CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} data - 发送的数据 * @returns {string} 分配的任务ID */ var sendCmdID = CRVideo_SendCmd(targetUserId,data); /** * 发送大块数据(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendBufferRlst,取消发送CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} data - 发送的数据 * @returns {string} 分配的任务ID */ var sendBufferID = CRVideo_SendBuffer(targetUserId,data) } /** * 发送文件(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendFileRlst,取消发送CRVideo_CancelSend) * @access public * @param {string} targetUserId - 目标用户ID * @param {string} fileName - 需要发送的文件名 * @returns {string} 分配的任务ID */ var sendvFileID = CRVideo_SendFile(targetUserId,data) /** * 取消数据发送 * 操作完成则回调CRVideo_CancelSendRlst。 * @access public * @param {string} taskID - 任务ID */ CRVideo_CancelSend(taskID) /** * 发送数据时，SDK通知发送进度 * @callback CRVideo.CbProxy~CRVideo_SendProgress * @param {string} taskID - 发送任务id * @param {number} sendedLen - 已发送的数据长度 * @param {number} totalLen - 需要发送的总长度 * @param {string} cookie - 自定义用户数据 */ CRVideo_SendProgress.callback = function(taskID,sendedLen,totalLen,cookie){ } /** * 发送数据时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendCmdRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendCmdRlst.callback = function(taskID,sdkErr,cookie){ } /** * 发送数据时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendBufferRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendBufferRlst.callback = function(taskID,sdkErr,cookie){ } /** * 发送文件时，SDK通知发送结果 * @callback CRVideo.CbProxy~CRVideo_SendFileRlst * @param {string} taskID - 发送任务id * @param {number} fileName - 文件名 * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_SendFileRlst.callback = function(taskID,fileName,sdkErr,cookie){ } /** * 取消发送响应 * @callback CRVideo.CbProxy~CRVideo_CancelSendRlst * @param {string} taskID - 发送任务id * @param {number} sdkErr - 操作失败代码,定义见cr/error * @param {string} cookie - 自定义用户数据 */ CRVideo_CancelSendRlst.callback = function(taskID,sdkErr,cookie){ } 2.收到命令、数据、文件 收到别人发送数据的通知 相关API请参考 通知有命令/数据/文件发来 /** * SDK通知收到小块数据 * @callback CRVideo.CbProxy~CRVideo_NotifyCmdData * @param {string} sourceUserId - 数据来源 * @param {string} data - 数据 */ CRVideo_NotifyCmdData.callback = function(sourceUserId,data){ } /** * SDK通知收到大块数据 * @callback CRVideo.CbProxy~CRVideo_NotifyBufferData * @param {string} sourceUserId - 数据来源 * @param {string} data - 数据 */ CRVideo_NotifyBufferData.callback = function(sourceUserId,data){ } /** * SDK通知收到文件数据（收到的文件生成在系统临时目录下，请尽快移走对应文件） * @callback CRVideo.CbProxy~CRVideo_NotifyFileData * @param {string} sourceUserId - 数据来源 * @param {string} tmpFile - 临时文件，不需要时，请移除或删除对应文件 * @param {string} orgFileName - 源始文件名 */ CRVideo_NotifyFileData.callback = function(sourceUserId,tmpFile,orgFileName){ } © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 19:04:55 "},"methods.html":{"url":"methods.html","title":"方法","keywords":"","body":"方法 方法的定义 接受系统安排的客户 CRVideo_AcceptAssignUser(queID, userID, cookie) 参数 类型 含义 queID string 队列ID userID string 队列中的用户ID cookie string 自定义数据 (在回调时，回传给调用者) 接受对方发起的视频请求 CRVideo_AcceptCall(callID, meetObj, usrExtDat, cookie) 参数 类型 含义 callID string 呼叫ID meetObj CRVideo_MeetInfoObj 会议信息 usrExtDat string 自定义扩展参数 cookie string 自定义数据 (在回调时，回传给调用者) 开始进入视频会话 操作成功则回调CRVideo_AcceptCallSuccess,失败则回调CRVideo_AcceptCallFail。 添加图元信息 CRVideo_Addboardelement(boardID, boardPageNo, element) 返回值:elementID ----- 图元标识 参数 类型 含义 boardID string 白板标识 boardPageNo number 白板的页序号(0为第一页) element string 图元信息，参见json格式之BoardElementObj 其他参会者会收到：notifyAddBoardElement事件;同时后台会保存图元，新入会者会在notifyInitBoardPageDat中得到这些图元 第三方录制文件调用此接口后可进行本地回放和上传到服务器record下 CRVideo_AddFileToRecordMgr() 返回值:1：本地文件不存在，0：成功，1：文件已经被添加过 发起呼叫，邀请用户参加视频会话 CRVideo_Call(calledUserID, meetObj, usrExtDat, cookie) 返回值:返回本次呼叫标识码（呼叫ID） 参数 类型 含义 calledUserID string 被叫用户的账户ID meetObj CRVideo_MeetInfoObj 会议信息 usrExtDat string 自定义扩展参数 cookie string 自定义数据(在回调时，回传给调用者) 操作成功则回调CRVideo_CallSuccess,失败则回调CRVideo_CallFail。 呼叫时，对方迟迟不响应，30秒后系统自动结束呼叫 取消传输 CRVideo_CancelFileTransfer() 返回值:无 参数 类型 含义 fileName string 本地路径文件名 取消时，只是停止了传输任务，不清理记录及断点文件 取消数据发送 CRVideo_CancelSend(taskID) 返回值:无 参数 类型 含义 taskID string 任务ID 取消数据发送 操作完成则回调CRVideo_CancelSendRlst 取消上传录像文件 CRVideo_CancelUploadRecordFile(filename) 返回值:无 参数 类型 含义 filename string 文件名，全路径 取消网盘文件操作（上传/下载 CRVideo_Canclenetdiskfile(fileID) 返回值:无 参数 类型 含义 fileID string 网盘文件ID 取消第3方呼叫 CRVideo_ClientCancelInvite(inviteID, cookie) 返回值:无 参数 类型 含义 inviteID string 邀请标识码（邀请ID cookie string 自定义数据 (在回调时，回传给调用者) 结果事件clientCancelInviteRslt，根据sdkErr判断是否成功 2方通话时呼叫第3方 CRVideo_ClientInvite(called, meetObj, cookie) 返回值:本次邀请标识码（邀请ID 参数 类型 含义 called string 被叫用户的账户ID meetObj CRVideo_MeetInfoObj 当前会议信息(json结构体请参见MeetInfoObj) cookie string 自定义数据 (在回调时，回传给调用者) 结果事件CRVideo_ClientInviteRslt，根据sdkErr判断是否成功 关闭白板 CRVideo_Closeboard(boardID) 返回值:无 参数 类型 含义 boardID string 白板标识 其他参会者将收到notifyCloseBoard事件；同时后台会移除对应白板的所有信息 关闭自己的麦克风 CRVideo_CloseMic(userID) 返回值:无 参数 类型 含义 userID string 登录成功后分配的userID 关麦操作是立即生效的，本地会立即停止采集 关闭用户的摄像头 CRVideo_CloseVideo(userID) 返回值:无 参数 类型 含义 userID string 用户ID 创建白板 CRVideo_Createboard(title, width, height, pageCount) 返回值:白板信息 参数 类型 含义 title string 白板名称 width number 白板宽度 height number 白板高度 pageCount number 白板内有多个页（一般空白板1页，文档白板为实际页数 其他参会者会收到：notifyCreateBoard事件;同时后台会记录下白板数据，新入会者会收到：notifyInitBoards事件.注意：创建完白板后，一定要及尽快调用CRVideo_InitBoardPageDat初始化各页数据 创建一个符合云层要求的图元id CRVideo_CreateElementID() 返回值:图元id 本地操作;所有白板图元id，必须由此接口创建；（历史文件存储的图元id，在会议内不能再使用，应重新创建） 创建会议 CRVideo_CreateMeeting(meetSubject, createPswd, cookie) 返回值:无 参数 类型 含义 meetSubject string 会议主题（字符长度最大值50） createPswd number 是否创建会议密码（=0时：会议无密码，>0时：密码由系统自动生成） cookie string 自定义数据 (在回调时，回传给调用者) 操作成功则回调CRVideo_CreateMeetingSuccess,失败则回调CRVideo_CreateMeetingFail 创建screenShare对象 CRVideo_CreatScreenShareObj() 返回值:无 创建media对象 CRVideo_CreatMediaObj() 返回值:无 创建video对象 CRVideo_CreatVideoObj() 返回值:无 删除图元 CRVideo_Delboardelement(boardID, boardPageNo, elementIDs) 返回值:无 参数 类型 含义 boardID string 白板标识 boardPageNo number 白板的页序号(0为第一页) elementIDs string 图元id列表，多值时，以“;”分隔，如：“id1;id2” 说明：其他参会者会收到：notifyDelBoardElement事件;同时后台会移除这些图元，新入会者会在notifyInitBoardPageDat中将不包含这些图元 删除网盘文件 CRVideo_Deletenetdiskfile(fileID) 返回值:无 参数 类型 含义 fileID string 网盘文件ID 结束会话 CRVideo_DestroyMeeting(meetID, cookie) 返回值:无 参数 类型 含义 meetID number 会议id cookie string 自定义数据 (在回调时，回传给调用者) CRVideo_StopMeetingRslt，会话被他人结束回调事件CRVideo_MeetingStopped 从网盘中下载文件 CRVideo_Downloadnetdiskfile(fileID, localFilePath) 返回值:无 参数 类型 含义 fileID string 网盘文件ID localFilePath string 本地文件路径，全路径 呼叫成功 CRVideo_EnterMeeting(meetID, pswd, userID, nickName, cookie) 返回值:无 参数 类型 含义 meetID number 视频会话ID pswd string 本次会议中的密码（系统自动生成，在呼叫回调中取得） userID string 用户id nickName string 昵称 cookie string 自定义数据 (在回调时，回传给调用者) 双方开始进入本次视频会话 操作完成则回调CRVideo_EnterMeetingRslt 离开会话 CRVideo_ExitMeeting() 返回值:无 他人离开会话的回调事件CRVideo_UserLeftMeeting 取得播放路径下的所有可播放文件 CRVideo_GetAllFilesInMediaPath() 返回值:文件名列表(Array.) 获取所有用户的信息 CRVideo_GetAllMembers() 返回值:返回含多个成员信息(Array-CRVideo_MemberInfo) 获取所有队列信息 CRVideo_GetAllQueueInfo() 返回值:返回所有队列信息(Array-CRVideo_QueueInfo) 取得所有录制文件信息 CRVideo_GetAllRecordFiles() 返回值:返回含多个录制文件信息(Array-CRVideo_RecordFileInfo) 获取本地所有上传、下载文件信息 CRVideo_GetAllTransferInfos() 返回值:filelist - 返回文件信息列表 (Array.CRVideo_FileInfo) 获取用户所有的摄像头信息 CRVideo_GetAllVideoInfo() 返回值:返回设备列表(Array.CRVideo_VideoDeviceInfo) 获取音频参数 CRVideo_GetAudioCfg() 返回值:返回cfg对象(CRVideo_AudioCfg) 获取系统上的麦克风设备列表 CRVideo_GetAudioMicNames() 返回值:返回麦克风设备字符串列表(Array.) 获取系统上的扬声器设备列表 CRVideo_GetAudioSpkNames() 返回值:返回扬声器设备列表(Array.) 获取用户的麦状态 麦克风设备状态 CRVideo_GetAudioStatus(userID) 返回值:返回麦克风状态(CRVideo_ASTATUS) 参数 类型 含义 userID string 登录成功后分配的userID 双方开始进入本次视频会话 操作完成则回调CRVideo_EnterMeetingRslt 获取当前主功能区 CRVideo_Getcurrentmainpage() 返回值:功能区(CRVideo_MAIN_PAGE_TYPE) 获取当前子功能区 CRVideo_Getcurrentsubpage() 返回值:jsonSubPage - 子功能区信息(CRVideo_SubPage) 获取指定用户的默认摄像头 CRVideo_GetDefaultVideo(userID) 返回值:返回摄像头ID(number) 参数 类型 含义 userID string 用户ID 查询用户是否启用多摄像头 CRVideo_GetEnableMutiVideo(userID) 返回值:返回用户是否多摄像头(bool) 参数 类型 含义 userID string 用户ID 获取当前哪个用户为主视频 CRVideo_GetMainVideo() 返回值:无 获取音频参数 CRVideo_GetMediacfg() 返回值:cfg (string) 取得影音帧信息 CRVideo_Getmediaimg(userID) 返回值:帧信息(CRVideo_VideoImgObj) 参数 类型 含义 userID string 用户id 取得影音文件信息 CRVideo_Getmediainfo(userID) 返回值:影音文件信息(CRVideo_MediaInfoObj) 参数 类型 含义 userID string 用户id 获取会议列表 CRVideo_GetMeetings(cookie) 返回值:无 参数 类型 含义 cookie string 自定义数据 (在回调时，回传给调用者) 响应事件CRVideo_GetMeetingsSuccess，会话被他人结束回调事件CRVideo_GetMeetingsFail 获取指定用户的信息 CRVideo_GetMemberInfo(userID) 返回值:info - 返回用户userID的成员信息(CRVideo_MemberInfo) 参数 类型 含义 userID string 用户ID 获取某个用户的昵称 CRVideo_GetMemberNickName(userID) 返回值:返回用户userID的昵称(string) 参数 类型 含义 userID string 用户ID 获取用户说话声音大小 CRVideo_GetMicEnergy(userID) 返回值:返回音量（0~10）(number) 参数 类型 含义 userID string 登录成功后分配的userID 获取麦克风音量 CRVideo_GetMicVolume() 返回值:返回麦克风音量（0~255）(number) 获取网盘用户共享文件列表 CRVideo_GetNetDiskFileList() 返回值:无 即使用makeNetDiskFileID中参数fileType为0的生成的fileID上传的文件 获取会议网盘的容量信息 CRVideo_GetNetDiskSummary() 返回值:无 调用结果请见事件getNetDiskSummaryRslt 获取队列状态 CRVideo_GetQueueStatus(queID) 返回值:返回队列信息(CRVideo_QueueInfo) 参数 类型 含义 queID string 队列ID 获取我的排队信息 CRVideo_GetQueuingInfo() 返回值:返回排队信息(CRVideo_QueueInfo) 获取录制的文件时长（以秒为单位） CRVideo_GetRecDuration() 返回值:返回录制的文件时长（以秒为单位）(number) 获取当前录制的文件大小（以字节为单位） CRVideo_GetRecFileSize() 返回值:返回录制文件大小（以字节为单位）(number) 获取当前屏幕共享配置 CRVideo_GetScreenShareCfg() 返回值:屏幕共享配置(CRVideo_ScreenShareCfgObj) 获取服务器地址 CRVideo_GetServerAddr() 返回值:返回服务器地址(string) 获取我服务的所有队列 CRVideo_GetServingQueues() 返回值:返回我服务的队列列表(Array. 获取我的会话信息 CRVideo_GetSessionInfo() 返回值:info - 返回会话信息(CRVideo_SessionInfo) 获取屏幕共享解码图像 CRVideo_GetShareScreenDecodeImg() 返回值:(CRVideo_VideoImgObj) 获取本地扬声器音量 CRVideo_GetSpeakerVolume() 返回值:返回扬声器音量（0~255）(number) 获取本地上传、下载文件信息 CRVideo_GetTransferInfo() 返回值:fileinfo - 返回文件信息(CRVideo_FileInfo) 参数 类型 含义 filePathName string 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”) 获取用户在线状态 CRVideo_GetUserStatus(cookie) 返回值:无 参数 类型 含义 cookie number 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 获取视频参数 CRVideo_GetVideoCfg() 返回值:获取视频参数(CRVideo_VideoCfg) 获取指定用户的最新图像 CRVideo_GetVideoImg() 返回值:返回frame视频数据(CRVideo_VideoImgObj) 参数 类型 含义 userID string 用户ID videoID number 设备id 获取用户的摄像头状态 CRVideo_GetVideoStatus(userID) 返回值:麦克风摄像头状态(CRVideo_VSTATUS) 参数 类型 含义 userID string 用户ID 获取视频墙当前分屏模式 CRVideo_GetVideoWallMode() 返回值:videoWallMode - 分屏模式(CRVideo_VIDEOLAYOUTMODE) 获取会议内所有可观看的摄像头 CRVideo_GetWatchableVideos() 返回值:对象VideoIDArray( Array-CRVideo_VideoIDsObj) 只有摄像头打开才能被获取到,能获取到自已的和会议里其他人的 赋予控制权限 CRVideo_GiveCtrlRight(userID) 返回值:无 参数 类型 含义 userID string 用户ID 挂断正在进行的视频呼叫或视频通话 CRVideo_HungupCall(callID, usrExtDat, cookie) 返回值:无 参数 类型 含义 callID string 呼叫ID usrExtDat string 自定义扩展参数 cookie string 自定义数据 (在回调时，回传给调用者) 操作成功则回调CRVideo_HangupCallSuccess,失败则回调CRVideo_HangupCallFail SDK初始化 CRVideo_Init(oemID, sdkUsePath, statCallSer, statMediaSer, statHttp) 返回值:返回错误码（错误码为CRVideo_NOERR表示没有错误）(number) 参数 类型 含义 oemID string 开发商ID,没有特别要求可填\"CLOUDROOM\" sdkUsePath string sdk配置、临时文件存放位置，可为空 statCallSer number 是否启用callSer模块 0为不启用，1为启用,默认为1 statMediaSer number 是否启用mediaSer模块 0为不启用，1为启用,默认为1 statHttp number 是否启用http模块 0为不启用，1为启用,默认为0 初始化白板指定页数据 CRVideo_InitBoardPageDat(boardID, boardPageNo, imgID, elemets) 返回值:无 参数 类型 含义 boardID string 白板标识 boardPageNo number 白板第几页（0:代表第一页） imgID string 白板的背景图片标识(空代表无背影图) elemets string 白板的初始图元（空代表无图元，一般在导入历史文件才用到） 初始化用户队列功能数据 CRVideo_InitQueueDat(cookie) 返回值:无 参数 类型 含义 cookie string 自定义数据 (在回调时，回传给调用者) 操作完成回调CRVideo_InitQueueDatRslt，初始化成功后才可获取队列队列相关信息 判断某个用户是否在会话中 CRVideo_IsUserInMeeting(userID) 返回值:如果用户存在则返回true,否则返回false(bool) 参数 类型 含义 userID string 用户的id 登录 CRVideo_Login(authAcnt, authPswd, nickName, privAcnt, privAuthCode, cookie) 返回值:无 参数 类型 含义 authAcnt string 云屋鉴权帐号 authPswd string 云屋鉴权密码 nickName string 昵称 privAcnt string 自定义帐号，不需要时传空字符串 privAuthCode string 自定义验证码(有复杂要求的，可以使用json格式)，不需要时传空字符串 cookie string 自定义数据 (在回调时，回传给调用者) 操作成功则回调CRVideo_LoginSuccess,失败则回调CRVideo_LoginFail 注销本次登陆 CRVideo_Logout() 返回值:无 生成网盘文件全局唯一ID CRVideo_MakeNetDiskFileID(fileType, newFileName) 返回值:无 参数 类型 含义 fileType number 文件类型，0:用户共享文件，1:程序使用文件 newFileName string 传入的全局唯一文件名，建议带文件后缀 说明：1.fileType等于0时，为会议网盘共享文件，上传的文件可通过; 2.getNetDiskFileList获取到文件列表详情 3.fileType等于1时，用户程序内资源文件，如白板的背景图片，无法获取文件详情 4.两种文件类型都要调用uploadNetDiskFile和downloadNetDiskFile进行上传和下载 修改图元信息 CRVideo_ModifyBoardElement(boardID, boardPageNo, element) 返回值:elementID图元标识(string) 参数 类型 含义 boardID string 白板标识 boardPageNo number 白板的页序号(0为第一页) element string 图元信息，参见json格式之BoardElementObj 说明：其他参会者会收到：notifyModifyBoardElement事件;同时后台会覆盖对应图元的数据，新入会者会在notifyInitBoardPageDat中得到这些图元 打开自己的麦克风 CRVideo_OpenMic(userID) 返回值:无 参数 类型 含义 userID string 用户的ID 打开自已的麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到 打开用户的摄像头 CRVideo_OpenVideo(userID) 返回值:无 参数 类型 含义 userID string 用户的ID 打开用户的摄像头，以便本地、远端显示视频图像 暂停或恢复播放影音 CRVideo_PausePlayMedia(bPause) 返回值:无 参数 类型 含义 bPause bool ture为暂停，false为恢复 回放录制文件 CRVideo_PlaybackRecordFile(filename) 返回值:无 参数 类型 含义 filename number 文件名，全路径 获取Plugin版本号 CRVideo_PluginVersion() 返回值:返回Plugin版本号(string) 刷新所有队列状态信息 CRVideo_RefreshAllQueueStatus() 返回值:无 操作完成则触发CRVideo_QueueStatusChanged（当前排队的队列，或服务的队列，sdk自动有状态变化回调； 其它队列则需要此函数来查 拒绝系统安排的客户 CRVideo_RejectAssignUser(queID, userID, cookie) 返回值:无 参数 类型 含义 queID string 队列ID userID string 队列中的用户ID cookie string 自定义数据 (在回调时，回传给调用者) 拒绝对方的视频请求 CRVideo_RejectCall(callID, usrExtDat, cookie) 返回值:无 参数 类型 含义 callID string 呼叫ID usrExtDat string 自定义扩展参数 cookie string 自定义数据 (在回调时，回传给调用者) 操作成功则回调CRVideo_RejectCallSuccess,失败则回调CRVideo_RejectCallFail 收回控制权限 CRVideo_ReleaseCtrlRight(userID) 返回值:无 参数 类型 含义 userID string 用户ID 删除本地的录制文件 CRVideo_RemoveFromFileMgr(filename) 返回值:无 参数 类型 含义 filename string 文件名，全路径 上传中的文件会被取消上传 请求分配一个客户 CRVideo_ReqAssignUser(cookie) 返回值:无 参数 类型 含义 cookie string 自定义数据 (在回调时，回传给调用者) 当关闭免打扰时，系统将自动分配客户，无需调用此函数； 当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配 删除传输记录及相关文件 CRVideo_RmTransferInfo() 返回值:无 参数 类型 含义 fileName string 本地路径文件名 bRemoveLocFile number 是否移除本地文件,为1时， 那么上传的源始文件、下载的临时文件或结果文件都将被移除。 获取sdk所在的目录 CRVideo_SdkPath() 返回值:返回sdk所在的目录(string) 参数 类型 含义 fileName string 本地路径文件名 bRemoveLocFile number 是否移除本地文件,为1时， 那么上传的源始文件、下载的临时文件或结果文件都将被移除。 发送大块数据(分块发送 CRVideo_SendBuffer(targetUserId, data) 返回值:分配的任务ID(string) 参数 类型 含义 targetUserId string 目标用户ID data string 发送的数据 进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendBufferRlst,取消发送CRVideo_CancelSend) 发送小块数 CRVideo_SendCmd(targetUserId, data) 返回值:分配的任务ID(string) 参数 类型 含义 targetUserId string 目标用户ID data string 发送的数据 一次性发送不会有进度通知,发送结果事件CRVideo_SendCmdRlst,CRVideo_SendCmd不能被CRVideo_CancelSend) 发送文件(分块发送 CRVideo_SendFile(targetUserId, fileName) 返回值:分配的任务ID(string) 参数 类型 含义 targetUserId string 目标用户ID data string 发送的数据 进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendFileRlst,取消发送CRVideo_CancelSend) 发送IM消息 CRVideo_SendIMmsg(text, UserID, cookie) 返回值:任务id(string) 参数 类型 含义 text string 发送的文本消息 UserID string 目标用户，如果用户ID为空，消息发送给会议内所有用户 cookie string 自定义用户数据 响应事件CRVideo_SendIMmsgRlst 发送键盘控制消息 CRVideo_SendKeyCtrlMsg(keyMsgType, vk, bExtendedKey) 返回值:无 参数 类型 含义 keyMsgType CRVideo_KEY_MSG_TYPE 键盘事件类型 vk number 键盘虚拟键值 bExtendedKey number - 发送鼠标控制消息 CRVideo_SendMouseCtrlMsg(msgType, mouseMsgType, x, y) 返回值:无 参数 类型 含义 msgType CRVideo_MOUSE_MSG_TYPE 鼠标事件类型 mouseMsgType CRVideo_MOUSE_KEY_TYPE 鼠标键类型 x number 鼠标在屏幕中的横坐标 y number 鼠标在屏幕中的纵坐标 关闭所有用户的麦克风 CRVideo_SetAllAudioClose() 返回值:无 系统音频参数设置 CRVideo_SetAudioCfg(cfg) 返回值:无 参数 类型 含义 cfg CRVideo_AudioCfg 设置参数 设置自定义的抓屏图像数据 CRVideo_SetCustomizeScreenImg(format, width, heigh, dat) 返回值:无 参数 类型 含义 format CRVideo_VIDEO_FORMAT 视频格式 width number 图像的宽度 heigh number 图像的高度 dat string 承载argb数据,base64编码 设置默认的摄像头 CRVideo_SetDefaultVideo(userID, videoID) 返回值:无 参数 类型 含义 userID string 用户ID videoID number 摄像头ID 设置免打扰状态 CRVideo_SetDNDStatus(DNDStatus, cookie) 返回值:无 参数 类型 含义 DNDStatus number 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义 cookie string 自定义数据 (在回调时，回传给调用者) 操作成功则回调CRVideo_SetDNDStatusSuccess,失败则回调CRVideo_SetDNDStatusFail。 文件上传的流量控制 CRVideo_SetFileUploadRate(maxbps) 返回值:无 参数 类型 含义 maxbps number 每秒上传的最大字节数，小于等于0表示不开启流控 SDK默认不开启流控,目前对文件上传控制的功能有：录制文件上传、网盘文件上传。 设置当前哪个用户为主视频 CRVideo_SetMainVideo(userID) 返回值:无 参数 类型 含义 userID string 用户ID 配置远程影音共享时，图像质量参数 CRVideo_SetMediacfg(jsonCfg) 返回值:无 参数 类型 含义 jsonCfg string json格式的字符串，详见VideoCfgOjb说明 设置播放进度 CRVideo_SetMediaplaypos(pos) 返回值:无 参数 类型 含义 pos number 设置播放位置，单位：秒 设置麦克风音量大小 CRVideo_SetMicVolume(level) 返回值:设置成功则返回true,否则返回false(bool) 参数 类型 含义 level number 音量等级（ 取值范围：0~255） 设置鼠标热点消息 CRVideo_Setmousehotspot(boardID, boardPageNo, x, y) 返回值:无 参数 类型 含义 boardID string 白板标识 boardPageNo number 白板的页序号(0为第一页) x number 屏幕横坐标 y number 屏幕纵坐标 设置网盘文件传输暂停或继续 CRVideo_SetNetDiskTransportPause(fileID, bTranPause) 返回值:无 参数 类型 含义 fileID string 网盘文件ID bTranPause bool 是否暂停 暂未定义 CRVideo_SetPicResource(picID, jsonval) 返回值:无 参数 类型 含义 picID string - jsonval object - 设置本地生成的录制文件是否加密 CRVideo_SetRecordFileEncrypt(encrypt) 返回值:无 参数 类型 含义 encrypt number 1表示加密 0表示不加密 上传录像文件 CRVideo_SetRecordUploadCfg(jsonCfg) 返回值:无 参数 类型 含义 jsonCfg CRVideo_RecordUploadCfg 上传配置参数 设置录制视频 (录制过程中可随时设置，改变录制内容) CRVideo_SetRecordVideos(value) 返回值:无 参数 类型 含义 value Array-CRVideo_RecordVideoInfo 需要录制的视频数组 设置屏幕共享配置 CRVideo_SetScreenShareCfg(jsonCfg) 返回值:无 参数 类型 含义 jsonCfg CRVideo_ScreenShareCfgObj 屏幕共享配置 设置服务器地址 CRVideo_SetServerAddr(serverList) 返回值:无 参数 类型 含义 serverList string 服务器地址,多个服务器地址使用冒号隔开（如：www.cloudroom.com:8080;183.60.47.52:8080;） 设置本地扬声器音量 CRVideo_SetSpeakerVolume(level) 返回值:设置成功则返回true,否则返回false(bool) 参数 类型 含义 level number 音量等级（ 取值范围：0~255） 系统视频参数设置 CRVideo_SetVideoCfg(cfg) 返回值:无 参数 类型 含义 cfg CRVideo_VideoCfg 设置参数 设置视频墙分屏模式 CRVideo_Setvideowallmode(videoWallMode) 返回值:无 参数 类型 含义 videoWallMode CRVideo_VIDEOLAYOUTMODE 分屏模式 开始获取语音pcm数据 CRVideo_StartGetAudioPCM(aSide, getType, jsonParam) 返回值:返回值 整形数值，1：正常，0：失败(number) 参数 类型 含义 aSide number 声道类型 0:麦克风，1:扬声器 getType number 获取方式 0:回调方式，1:保存为文件 jsonParam string 当getType=0 表示回调方式, jsonParam可配置回调的数据大小(320-32000)，如: {\"EachSize\":320};当getType=1 表示保存为文件，jsonParam可配置文件名,如: { \"FileName\" : \"e:\\test.pcm\" } 开始播放影音 CRVideo_StartPlayMedia(filename, locPlay, bPauseWhenFinished) 返回值:返回值 整形数值，1：正常，0：失败(number) 参数 类型 含义 filename string 文件名，全路径 locPlay number 是否仅仅本地播放（1:本地播放，0：会议内播放） bPauseWhenFinished number 是否播放完毕自动暂停在最后一帧 客户开始排队 CRVideo_StartQueuing(queID, cookie) 返回值:无 参数 类型 含义 queID string queID 队列ID cookie string cookie自定义数据 (在回调时，回传给调用者) 操作完成回调CRVideo_StartQueuingRslt 开始录制 CRVideo_StartRecordIng(recordPath, audioType, frameRate, recordWidth, recordHeight, bitRate, defaultQP, recDataType, recDataType, isUploadOnRecording) 返回值:无 参数 类型 含义 recordPath string 录像存储的路径 audioType CRVideo_RECORD_AUDIO_TYPE 音频类型 frameRate number 帧率，建议不要太高；(取值1~24) recordWidth number 视频宽度 recordHeight number 视频高度 bitRate number 录制的最高码率，当图像变化小时，实际码率会低于此值。建议：640360: 500000; (500kbps)，1280720：1000000; (1mbps)，1920*1080: 2000000; (2mbps) defaultQP number 目标质量(推荐:36, 中:28, 高:22) recDataType CRVideo_REC_DATATYPE 录制内容类型（视频+音频） recDataType number 录制内容类型（视频+音频） isUploadOnRecording number 是否录制的同时上传 1为是，0为否 开始服务某个队列 CRVideo_StartService(queID, cookie) 返回值:无 参数 类型 含义 queID string 队列ID cookie string 自定义数据 (在回调时，回传给调用者 可以多次调用，开启对多个队列的服务) 操作回调CRVideo_StartServiceRslt 开启成功后： a. 如果没有开启免打挽，那么系统会自动分配客户：VideoCall_Queue_CallBack::autoAssignUser； b. 如果开启免打挽，系统就不会分配客户，如需服务客户可调用：reqAssignUser 开始下载/上传文件 CRVideo_StartTransferFile() 返回值:无 参数 类型 含义 fileinfo CRVideo_FileInfo 格式的文件信息 开启用户的状态推送 CRVideo_StartUserStatusNotify(cookie) 返回值:无 参数 类型 含义 cookie number 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 企业下所有用户状态有变化时(包括呼叫会议状态、免打扰状态)，都会收到通知 开启后，用户量越大消息量越大，所以请按需开启 在startUserStatusNotify前，应该先通过getUserStatus获取所有用户状态 停止获取语音pcm数据 CRVideo_StopGetAudioPCM(aSide, 无返回值) 返回值:无 参数 类型 含义 aSide number 声道类型 0:麦克风，1:扬声器 无返回值 停止播放影音 CRVideo_StopPlayMedia() 返回值:无 客户停止排队 CRVideo_StopQueuing(cookie) 返回值:无 参数 类型 含义 cookie string cookie自定义数据 (在回调时，回传给调用者) 操作完成回调CRVideo_StopQueuingRslt 停止录制 CRVideo_StopRecord() 返回值:无 开启屏幕共享 CRVideo_StartScreenShare() 返回值:无 停止屏幕共享 CRVideo_StopScreenShare() 返回值:无 停止服务某个队列 CRVideo_StopService(queID, cookie) 返回值:无 参数 类型 含义 queID string queID 队列ID cookie string cookie自定义数据 (在回调时，回传给调用者) 操作完成回调CRVideo_StopServiceRslt 关闭用户的状态推送 CRVideo_StopUserStatusNotify(cookie) 返回值:无 参数 类型 含义 cookie string 自定义数据(在回调时，回传给调用者)，不需要时传空字符串 功能切换 CRVideo_Switchtopage(mainPage, pageID) 返回值:无 参数 类型 含义 mainPage number 功能类型 pageID string 子页面标识（如创建白板时返回的boardID） SDK反初始化 CRVideo_Uninit() 返回值:无 上传文件到网盘 CRVideo_Uploadnetdiskfile(fileID, localFilePath) 返回值:无 参数 类型 含义 fileID string 网盘文件ID localFilePath string 本地文件路径,含文件名 上传录像文件 CRVideo_UploadRecordFile(filename) 返回值:无 参数 类型 含义 filename string 文件名，全路径 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 19:20:20 "},"callback.html":{"url":"callback.html","title":"回调函数","keywords":"","body":"回调函数 会议创建管理的回调接口 会议管理类的回调接口 队列类的回调接口 sdk回调接口 会议创建管理的回调接口 登录成功响应 CRVideo_LoginSuccess.callback = function(usrID,cookie){} usrID ----- 用户账户 usrID ----- 自定义用户数据 登录失败响应 CRVideo_LoginFail .callback = function(sdkErr,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 SDK通知自己掉线 CRVideo_LineOff.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 客户端设置免打扰状态操作成功响应 CRVideo_SetDNDStatusSuccess.callback = function(cookie){} cookie ----- 自定义用户数据 客户端设置免打扰状态操作失败响应 CRVideo_SetDNDStatusFail.callback = function(sdkErr,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 客获取所有用户在线状态成功响应 CRVideo_GetUserStatusSuccess.callback = function(usersStatus,cookie){} sdkErr ----- 用户在线状态信息列表，userID:用户id,userStatus:用户的在线状态(0 离线 1在线空闲 2 在线忙碌 3在线会议中),DNDType:用户免打扰状态(0代表关闭免打扰， 其它值代表开启免打扰) cookie ----- 自定义用户数据 获取所有用户在线状态失败响应 CRVideo_GetUserStatusFail.callback = function(sdkErr ,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 某个用户状态变化通知 CRVideo_NotifyUserStatus.callback = function(userStatus ,cookie){} userStatus ----- userStatus单个用户在线状态信息 cookie ----- 自定义用户数据 启动用户状态推送响应 CRVideo_StartUserStatusNotifyRslt.callback = function(sdkErr ,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 结束用户状态推送响应 CRVideo_StopUserStatusNotifyRslt.callback = function(sdkErr ,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 创建会议成功响应 CRVideo_CreateMeetingSuccess.callback = function(meetObj,cookie){} meetObj ----- 会议信息 cookie ----- 自定义用户数据 创建会议失败响应 CRVideo_CreateMeetingFail.callback = function(sdkErr ,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 结束会议响应 CRVideo_DestroyMeetingRslt.callback = function(sdkErr ,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 呼叫他人操作成功响应 CRVideo_CallSuccess.callback = function(callID ,cookie){} callID ----- 呼叫全局标识 cookie ----- 自定义用户数据 呼叫他人操作失败响应 CRVideo_CallFail.callback = function(callID,sdkErr,cookie){} callID ----- 呼叫全局标识 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 接受他人呼叫操作成功响应 CRVideo_AcceptCallSuccess.callback = function(callID,cookie){} callID ----- 呼叫全局标识 cookie ----- 自定义用户数据 接受他人呼叫操作失败响应 CRVideo_AcceptCallFail.callback = function(callID,sdkErr,cookie){} callID ----- 呼叫全局标识 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 拒绝他人的呼叫成功响应 CRVideo_RejectCallSuccess.callback = function(callID,cookie){} callID ----- 呼叫全局标识 cookie ----- 自定义用户数据 拒绝他人的呼叫失败响应 CRVideo_RejectCallFail.callback = function(callID,sdkErr,cookie){} callID ----- 呼叫全局标识 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 拒绝他人的呼叫成功响应 CRVideo_HangupCallSuccess.callback = function(callID,cookie){} callID ----- 呼叫全局标识 cookie ----- 自定义用户数据 挂断呼叫操作失败响应 CRVideo_HangupCallFail.callback = function(callID,sdkErr,cookie){} callID ----- 呼叫全局标识 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 SDK通知自己被呼叫 CRVideo_NotifyCallIn.callback = function(callID,meetObj,callerID,usrExtDat){} callID ----- 呼叫全局标识 meetObj ----- 会议信息 callerID ----- 呼叫人员的标识ID usrExtDat ----- 自定义扩展参数 SDK通知自己视频呼叫被对方接受 CRVideo_NotifyCallAccepted.callback = function(callID,meetObj,callerID,usrExtDat){} callID ----- 呼叫全局标识 meetObj ----- 会议信息 usrExtDat ----- 自定义扩展参数 SDK通知自己呼叫被对方拒绝 CRVideo_NotifyCallRejected.callback = function(callID,sdkErr,usrExtDat){} callID ----- 呼叫全局标识 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF usrExtDat ----- 自定义扩展参数 SDK通知自己呼叫被挂断 CRVideo_NotifyCallHungup.callback = function(callID,usrExtDat){} callID ----- 呼叫全局标识 usrExtDat ----- 自定义扩展参数 发送数据时，SDK通知发送结果 CRVideo_SendCmdRlst.callback = function(taskID,sdkErr,cookie){} taskID ----- 发送任务id sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 发送数据时，SDK通知发送结果 CRVideo_SendBufferRlst.callback = function(taskID,sdkErr,cookie){} taskID ----- 发送任务id sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 发送文件时，SDK通知发送结果 CRVideo_SendFileRlst.callback = function(taskID,fileName,sdkErr,cookie){} taskID ----- 发送任务id fileName ----- 文件名 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 发送数据时，SDK通知发送进度 CRVideo_SendProgress.callback = function(taskID,sendedLen,totalLen,cookie){} taskID ----- 发送任务id sendedLen ----- 已发送的数据长度 totalLen ----- 需要发送的总长度 cookie ----- 自定义用户数据 取消发送响应 CRVideo_CancelSendRlst.callback = function(taskID,sdkErr,cookie){} taskID ----- 发送任务id sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 SDK通知收到小块数据 CRVideo_NotifyCmdData.callback = function(sourceUserId,data){} sourceUserId ----- 数据来源 data ----- 数据 SDK通知收到大块数据 CRVideo_NotifyBufferData.callback = function(sourceUserId,data){} sourceUserId ----- 数据来源 data ----- 数据 SDK通知收到文件数据（收到的文件生成在系统临时目录下，请尽快移走对应文件） CRVideo_NotifyFileData.callback = function(sourceUserId,tmpFile,orgFileName){} sourceUserId ----- 数据来源 tmpFile ----- 临时文件，不需要时，请移除或删除对应文件 orgFileName ----- 源始文件名 SDK通知取消发送文件数据 CRVideo_NotifyCancelSend.callback = function(taskID){} taskID ----- 取消的任务id 获取会议列表成功响应 CRVideo_GetMeetingsSuccess.callback = function(cookie){} cookie ----- 自定义用户数据 获取会议列表成功响应 CRVideo_GetMeetingsFail.callback = function(sdkErr,cookie){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 会议管理类的回调接口 进入会议完成响应 CRVideo_EnterMeetingRslt.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 某用户进入了会议 CRVideo_UserEnterMeeting.callback = function(usrID){} usrID ----- 进入会议的用户ID 某用户离开了会议 CRVideo_UserLeftMeeting.callback = function(id){} id ----- 离开会议的用户ID 通知结束视频会议结果 CRVideo_StopMeetingRslt.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 会议已被结束 CRVideo_MeetingStopped.callback = function(){} SDK通知从会议里掉线了 CRVideo_MeetingDropped.callback = function(){} SDK通知我的网络变化 CRVideo_NetStateChanged.callback = function(level){} level ----- 网络状况等级(0~10，10分为最佳网络) SDK通知打开本地音频状态变化 CRVideo_AudioStatusChanged.callback = function(userID,oldStatus,newStatus){} userID ----- 会话中设备的所有者ID oldStatus ----- 旧状态 newStatus ----- 新状态 SDK通知用户的说话声音强度更新 CRVideo_MicEnergyUpdate.callback = function(userID,oldLevel,newLevel){} userID ----- 用户ID oldLevel ----- 原来的说话声音强度 newLevel ----- 现在的说话声音强度 SDK通知打开本地视频状态变化 CRVideo_VideoStatusChanged.callback = function(userID,oldStatus,newStatus){} userID ----- 会话中设备的所有者ID oldStatus ----- 旧状态 newStatus ----- 新状态 SDK通知用户有新的视频数据 CRVideo_NotifyVideoData.callback = function(userID,videoId,frmTime){} userID ----- 用户标识ID videoId ----- 用户的摄像头ID frmTime ----- frmTime 图像的创建时戳 SDK通知用户的视频设备有变化 CRVideo_VideoDevChanged.callback = function(userID){} userID ----- 设备变化的用户ID SDK通知用户的视频默认设备有变化 CRVideo_DefVideoChanged.callback = function(userID,videoID){} userID ----- 设备变化的用户ID videoID ----- 默认设备id SDK通知语音PCM数据 CRVideo_NotifyAudioPCMDat.callback = function(aSide,base64PcmDat){} aSide ----- 声道类型 base64PcmDat ----- PCM数据(base64格式) 录制异常，录制将自动停止 CRVideo_RecordErr.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 录制状态更改通知 CRVideo_RecordStateChanged.callback = function(state){} state ----- 录制状态,数值请参考定义RECORD_STATE 上传录制文件错误通知 CRVideo_UploadRecordFileErr.callback = function(fileName,sdkErr){} fileName ----- 本地文件路径 sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF SDK通知录制文件状态更改 CRVideo_NotifyRecordFileStateChanged.callback = function(fileName,state){} fileName ----- 本地文件路径 state ----- 状态 0 未上传 1 上传中 2已上传 SDK通知上传录制文件进度 CRVideo_NotifyRecordFileUploadProgress.callback = function(fileName,percent){} fileName ----- 文件名 percent ----- 进度0-100 开启屏幕共享的响应事件 CRVideo_StartScreenShareRslt.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 停止屏幕共享的响应事件 CRVideo_StopScreenShareRslt.callback = function(sdkErr){} sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF 通知他人开启了屏幕共享 CRVideo_NotifyScreenShareStarted.callback = function(){} 通知他人停止了屏幕共享 CRVideo_NotifyScreenShareStopped.callback = function(){} 通知对端屏幕图像有变化 CRVideo_NotifyScreenShareData.callback = function(userID,rect){} userID ----- 用户ID rect ----- 变化的区域；（可以只重绘这块区域） 自定义抓屏时，SDK通知使用者抓屏（在收到通知时， 一定要及时CRVideo_SetCustomizeScreenImg，如果没图像时，可以先送入空图像） CRVideo_NotifyCatchScreen.callback = function(){} SDK通知远程控制权限给予了某人 CRVideo_NotifyGiveCtrlRight.callback = function(operId,targetId){} operId ----- 操作的用户ID targetId ----- 控制权限给予了谁 SDK通知收回远程控制 CRVideo_NotifyReleaseCtrlRight.callback = function(operId,targetId){} operId ----- 操作的用户ID targetId ----- 收回了谁的控制权限 发送IM消息，SDK通知使用者发送结果 CRVideo_SendIMmsgRlst.callback = function(taskID,sdkErr,cookie){} taskID ----- 发送任务id sdkErr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数据 SDK通知收到IM消息 CRVideo_NotifyIMmsg.callback = function(fromUserID,text,sendTime){} fromUserID ----- 消息来源 text ----- 消息内容 sendTime ----- 消息发送时间戳，从1970开始算起 SDK通知功能切换 CRVideo_NotifySwitchToPage.callback = function(mainPage,pageID){} mainPage ----- 功能类型 pageID ----- 子页面标识 SDK通知视频分屏模式切换 CRVideo_NotifyVideoWallMode.callback = function(model){} model ----- 分屏模式 SDK通知主视频更改 CRVideo_NotifyMainVideoChanged.callback = function(operId,targetId){} SDK入会后通知会议中已经存在的白板列表 CRVideo_NotifyInitBoards.callback = function(BoardObjs){} BoardObjs ----- 已经创建好的白板列表, json结构体请参见BoardObjs说明 初始化白板页数据 CRVideo_NotifyInitBoardPageDat.callback = function(boardID,boardPageNo,imgID,elementDatas,operatorID){} boardID ----- 白板标识 boardPageNo ----- 白板页序号 imgID ----- 页背景文件ID（空代表无背景） elementDatas ----- 此页的所有图元, 详见json结构之BoardElementObjs operatorID ----- 初始化用户（为空时，代表入会时后台事件） SDK通知创建白板 CRVideo_NotifyCreateBoard.callback = function(jsonBoard,operatorID){} jsonBoard ----- 白板信息，详见json格式之BoardObj operatorID ----- 创建白板的用户ID SDK通知关闭白板 CRVideo_NotifyCreateBoard.callback = function(boardID,operatorID){} boardID ----- 白板标识 operatorID ----- 关闭白板的用户ID SDK通知白板背景 CRVideo_NotifyBoardBkImage.callback = function(subPage,imgFileID,operatorID){} subPage ----- 白板信息 imgFileID ----- 背景图片文件，通过downloadNetDiskFile可下载到本地显示 operatorID ----- 操作用户ID SDK通知添加图元信息 CRVideo_NotifyAddBoardElement.callback = function(boardID,boardPageNo,element,operatorID){} boardID ----- 白板标识 boardPageNo ----- 白板页序号 element ----- 此页的所有图元, 详见json结构之BoardElementObj operatorID ----- 添加图元的用户ID SDK通知图元信息被修改 CRVideo_NotifyModifyBoardElement.callback = function(boardID,boardPageNo,element,operatorID){} boardID ----- 白板标识 boardPageNo ----- 白板页序号 element ----- 此页的所有图元, 详见json结构之BoardElementObj operatorID ----- 添加图元的用户ID SDK通知删除图元 CRVideo_NotifyDelBoardElement.callback = function(boardID,boardPageNo,elementIDs,operatorID){} boardID ----- 白板标识 boardPageNo ----- 白板页序号 elementIDs ----- 图元id列表，以 “;”分隔 operatorID ----- 删除图元的用户ID SDK通知设置鼠标热点消息 CRVideo_NotifyMouseHotSpot.callback = function(boardID,x,y,operatorID){} boardID ----- 白板标识 x ----- 屏幕横坐标 y ----- 屏幕纵坐标 operatorID ----- 操作者的用户ID SDK通知获取网盘容量信息结果 CRVideo_GetNetDiskSummaryRslt.callback = function(diskLimit,diskUsed){} diskLimit ----- 网盘总容量 diskUsed ----- 网盘已用容量 SDK通知获取网盘文件列表 CRVideo_GetNetDiskFileListRslt.callback = function(fileList){} fileList ----- 网盘文件列表，json格式，定义见NetDiskObjs SDK通知网盘空间已满，容量不足 CRVideo_NotifyNetDiskIsFull.callback = function(fileList){} SDK通知删除网盘文件结果 CRVideo_NotifyNetDiskFileDeleteRslt.callback = function(fileID,isSucceed){} fileID ----- 网盘文件id isSucceed ----- 是否成功 1 成功 0 失败 SDK通知网盘上传或下载进度 CRVideo_NotifyNetDiskTransforProgress.callback = function(fileID,percent,isSucceed){} fileID ----- 网盘文件id percent ----- 进度0-100 isSucceed ----- 是否成功 1 成功 0 失败 SDK通知影音文件打开 CRVideo_NotifyMediaOpened.callback = function(totalTime,w,h){} totalTime ----- 影音时长(秒) w ----- 宽度 h ----- 高度 SDK通知影音开始播放 CRVideo_NotifyMediaStart.callback = function(userid){} userid ----- 操作者的用户id SDK通知影音播放停止 CRVideo_NotifyMediaStop.callback = function(userid,reason){} userid ----- 操作者的用户id reason ----- 播放停止原因 SDK通知设置鼠标热点消息 CRVideo_NotifyMediaPause.callback = function(userid,pause){} userid ----- 操作者的用户id pause ----- 是否暂停 1暂停 0播放 SDK通知播放进度已设置完成 CRVideo_NotifyPlayPosSetted.callback = function(setPTS){} setPTS ----- 播放进度 SDK通知影音帧数据已解码完毕 CRVideo_NotifyMemberMediaData.callback = function(userid,curPos){} userid ----- 操作者的用户id curPos ----- 当前播放进度 第3方呼叫操作结果 CRVideo_ClientInviteRslt.callback = function(inviteID,sdkEr,cookie){} inviteID ----- 邀请标识码（邀请ID sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义数据 (在回调时，回传给调用者) 取消第3方呼叫操作结果 CRVideo_ClientCancelInviteRslt.callback = function(inviteID,sdkEr,cookie){} inviteID ----- 邀请标识码(邀请ID) sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF，CRVIDEOSDK_NOERR为成功操作 cookie ----- 自定义数据 (在回调时，回传给调用者) SDK通知第3方呼叫状态改变 CRVideo_NotifyInviteStatus.callback = function(inviteID,status){} inviteID ----- 邀请标识码（邀请ID status ----- 第3方呼叫状态码,0-振铃 1-接通 2-拒绝 3-未应答 4-挂断 队列类的回调接口 队列初始化操作结果 CRVideo_InitQueueDatRslt.callback = function(sdkErr,cookie){} sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义数据 (在回调时，回传给调用者) 队列初始化操作结果 CRVideo_InitQueueDatRslt.callback = function(sdkErr,cookie){ /** * @typedef {object} CRVideo_QueStatus - 队列状态 * @property {number} queID - 队列id * @property {number} agent_num - 坐席数量 * @property {number} wait_num - 排队客户数量 * @property {number} srv_num - 正在服务的客户数量 */ } sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义数据 (在回调时，回传给调用者) 队列状态变化通知 CRVideo_QueueStatusChanged.callback = function(queStatus){ /** * @typedef {object} CRVideo_QueInfo - 队列信息 * @property {number} queID - 队列id * @property {number} name - 队列名称 * @property {string} desc - 队列描述 * @property {number} prio - 优先级，值越小优先级越高 */ } queStatus ----- 队列状态 排队信息变化通知 CRVideo_QueuingInfoChanged.callback = function(queuingInfo){} queuingInfo ----- 队列信息 开始排队操作结果 CRVideo_StartQueuingRslt.callback = function(sdkErr,cookie){} sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数 停止排队操作结果 CRVideo_StopQueuingRslt.callback = function(sdkErr,cookie){} sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数 开始服务队列操作结果 CRVideo_StartServiceRslt.callback = function(queID,sdkErr,cookie){} queID ----- 服务的队列ID sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数 停止服务队列操作结果 CRVideo_StopServiceRslt.callback = function(queID,sdkErr,cookie){} queID ----- 服务的队列ID sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数 响应分配客户操作结果 CRVideo_ResponseAssignUserRslt.callback = function(sdkErr,cookie){ /** * @typedef {object} CRVideo_QueUser - 队列用户信息 * @property {number} queID - 队列ID * @property {string} usrID - 用户ID * @property {string} name - 用户昵称 * @property {string} queuingTime - 已排队时长(秒) * @property {string} param - 用户呼叫时的私有数据 */ } sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF cookie ----- 自定义用户数 系统自动安排客户 CRVideo_AutoAssignUser.callback = function(user){} user ----- 队列用户信息 如果想停止系统的自动分配，请通setDNDStatus设置免打扰功能 请求分配客户操作结果 CRVideo_ReqAssignUserRslt.callback = function(sdkErr,user,cookie){} sdkEr ----- 操作失败代码,定义见CRVIDEOSDK_ERR_DEF user ----- 队列用户信息 cookie ----- 自定义用户数 系统取消已经安排的客户 CRVideo_CancelAssignUser.callback = function(queID,userid){} queID ----- 服务的队列 userid ----- 用户id 通知用户文件状态更改 CRVideo_FileStateChanged.callback = function(fileName,state){} fileName ----- 文件名 state ----- 状态 通知用户文件http响应头 CRVideo_FileHttpRspHeader.callback = function(fileName,rspHeader){} fileName ----- 文件名 rspHeader ----- http响应头 通知用户文件http响应结果 CRVideo_FileHttpRspContent.callback = function(fileName,rspHeader){} fileName ----- 文件名 rspHeader ----- http响应结果 系统取消已经安排的客户 CRVideo_FileProgress.callback = function(fileName,finisedSize,totalSize){} fileName ----- 文件名 finisedSize ----- 已传输大小 finisedSize ----- 文件大小 通知用户文件传输结束 CRVideo_FileFinished.callback = function(fileName,rslt){} fileName ----- 文件名 rslt ----- 传输结果 通知屏幕共享大小改变 CRVideo_NotifyShareRectChanged.callback = function(w,h){} w ----- 宽度 h ----- 高度 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 17:43:50 "},"Constant.html":{"url":"Constant.html","title":"常量定义","keywords":"","body":"常量定义 相关数值及含义定义 错误代码含义 CRVIDEOSDK_ERR_DEF 代码 数值 含义 CRVIDEOSDK_NOERR 0 没有错误 CRVIDEOSDK_UNKNOWERR 1 未知错误 CRVIDEOSDK_OUTOF_MEM 2 内存不足 CRVIDEOSDK_INNER_ERR 3 sdk内部错误 CRVIDEOSDK_MISMATCHCLIENTVER 4 不支持的sdk版本 CRVIDEOSDK_MEETPARAM_ERR 5 参数错误 CRVIDEOSDK_ERR_DATA 6 无效数据 CRVIDEOSDK_ANCTPSWD_ERR 7 帐号密码不正确 CRVIDEOSDK_SERVER_EXCEPTION 8 服务异常 CRVIDEOSDK_LOGINSTATE_ERROR 9 登录状态错误 CRVIDEOSDK_USER_BEEN_KICKOUT 10 登录用户被踢下线 CRVIDEOSDK_NETWORK_INITFAILED 200 网络初始化失败 CRVIDEOSDK_NO_SERVERINFO 201 没有服务器信息 CRVIDEOSDK_NOSERVER_RSP 202 服务器没有响应 CRVIDEOSDK_CREATE_CONN_FAILED 203 创建连接失败 CRVIDEOSDK_SOCKETEXCEPTION 204 socket异常 CRVIDEOSDK_SOCKETTIMEOUT 205 网络超时 CRVIDEOSDK_FORCEDCLOSECONNECTION 206 连接被关闭 CRVIDEOSDK_CONNECTIONLOST 207 连接丢失 CRVIDEOSDK_QUE_ID_INVALID 400 队列ID错误 CRVIDEOSDK_QUE_NOUSER 401 没有用户在排队 CRVIDEOSDK_QUE_USER_CANCELLED 402 排队用户已取消 CRVIDEOSDK_QUE_SERVICE_NOT_START 403 队列服务还未开启 CRVIDEOSDK_ALREADY_OTHERQUE 404 已在其它队列排队(客户只能在一个队列排队) CRVIDEOSDK_INVALID_CALLID 600 无效的呼叫ID CRVIDEOSDK_ERR_CALL_EXIST 601 已在呼叫中 CRVIDEOSDK_ERR_BUSY 602 对方忙 CRVIDEOSDK_ERR_OFFLINE 603 对方不在线 CRVIDEOSDK_ERR_NOANSWER 604 对方无应答 CRVIDEOSDK_ERR_USER_NOT_FOUND 605 用户不存在 CRVIDEOSDK_ERR_REFUSE 606 对方拒接 CRVIDEOSDK_MEETNOTEXIST 800 没有会议不存在或已结束错误 CRVIDEOSDK_AUTHERROR 801 会议密码不正确 CRVIDEOSDK_MEMBEROVERFLOWERROR 802 会议终端数量已满（购买的license不够) CRVIDEOSDK_RESOURCEALLOCATEERROR 803 分配会议资源失败 CRVIDEOSDK_MEETROOMLOCKED 804 会议已加锁 CRVIDEOSDK_CATCH_SCREEN_ERR 900 抓屏失败 CRVIDEOSDK_RECORD_MAX 901 单次录制达到最大时长(8h) CRVIDEOSDK_RECORD_NO_DISK 902 磁盘空间不够 CRVIDEOSDK_SENDFAIL 1000 发送失败 CRVIDEOSDK_CONTAIN_SENSITIVEWORDS 1001 有敏感词语 CRVIDEOSDK_SENDCMD_LARGE 1100 发送信令数据过大 CRVIDEOSDK_SENDBUFFER_LARGE 1101 发送数据过大 CRVIDEOSDK_SENDDATA_TARGETINVALID 1102 目标用户不存在 CRVIDEOSDK_SENDFILE_FILEINERROR 1103 文件错误 CRVIDEOSDK_TRANSID_INVALID 1104 无效的发送id CRVIDEOSDK_RECORDFILE_STATE_ERR 1200 状态错误不可上传/取消上传 CRVIDEOSDK_RECORDFILE_NOT_EXIST 1201 录制文件不存在 麦克风状态 CRVideo_ASTATUS 代码 数值 含义 AUNKNOWN 0 音频状态未知 ANULL 1 没有麦克风设备 ACLOSE 2 麦克风处于关闭状态（软开关） AOPEN 3 麦克风处于打开状态（软开关） AOPENING 4 向服务器发送打开消息中 视频尺寸定义 CRVideo_VIDEO_SHOW_SIZE 代码 数值 分辨率和码率 VIDEO_SZ_80 1 144*80, 最大码率：56kbps VSIZE_SZ_128 2 224*128, 最大码率：72kbps VSIZE_SZ_160 3 288*160, 最大码率：100kbps VSIZE_SZ_192 4 336*192, 最大码率：150kbps VSIZE_SZ_256 5 448*256, 最大码率：200kbps VSIZE_SZ_288 6 512*288, 最大码率：250kbps VSIZE_SZ_320 7 576*320, 最大码率：300kbps VSIZE_SZ_360 8 640*360, 最大码率：350kbps VSIZE_SZ_400 9 720*400, 最大码率：420kbps VSIZE_SZ_480 10 848*480, 最大码率：500kbps VSIZE_SZ_576 11 1024*576, 最大码率：650kbps VSIZE_SZ_720 12 1280*720, 最大码率：1mbps VSIZE_SZ_1080 13 1920*1080, 最大码率：2mbps 视频状态定义 CRVideo_VSTATUS 代码 数值 分辨率和码率 VUNKNOWN 0 视频状态未知 VNULL 1 没有视频设备 VCLOSE 2 视频处于关闭状态（软开关） VOPEN 3 视频处于打开状态（软开关） VOPENING 4 向服务器发送打开消息中 视频图像格式 CRVideo_VIDEO_FORMAT 代码 数值 分辨率和码率 VFMT_YUV420P 0 yuv420p VFMT_ARGB32 1 32-bit ARGB format (0xAARRGGBB) 录制内容类型 CRVideo_REC_VCONTENT_TYPE 代码 数值 分辨率和码率 RECVTP_VIDEO 0 摄像头 RECVTP_PIC 1 图片 RECVTP_SCREEN 2 屏幕 RECVTP_MEDIA 3 影音共享 RECVTP_TIMESTAMP 4 时间戳 录制的状态 CRVideo_RECORD_STATE 代码 数值 分辨率和码率 NO_RECORD 0 录制未启动 STARTING 1 录制正在开启 RECORDING 2 正在录制 PAUSED 3 录制已暂停 STOPPING 4 录制正在结束 录制语音类型 CRVideo_RECORD_AUDIO_TYPE 代码 数值 分辨率和码率 REC_AUDIO_TYPE_NULL 0 不录制任何语音 REC_AUDIO_TYPE_LOC 1 录制本地语音 REC_AUDIO_TYPE_OTHER 2 录制其他人语音 REC_AUDIO_TYPE_ALL 3 录制本地+其他人语音 录制图像类型 CRVideo_RECORD_VIDEO_TYPE 代码 数值 分辨率和码率 REC_VCONTENT_NULL 0 不录制任何图像 RECORD_VIDEO_TYPE_SCREEN 1 录制屏幕 REC_VCONTENT_VIDEOS 3 录制视频图像 录制视频的布局类型 CRVideo_RECORD_VLAYOUT 代码 数值 分辨率和码率 REC_VLAYOUT_GRID 0 表格类型 REC_VLAYOUT_PIP 1 画中画类型(只有在录两个视频时有效) 屏幕共享的编码类型 CRVideo_ENCODE_TYPE 代码 数值 分辨率和码率 ENC_CLOUDROOM 0 云屋科技私有编码格式（清晰度更高，带宽大） ENC_H264 1 (清晰度差一些，带宽小） 鼠标事件类型 CRVideo_MOUSE_MSG_TYPE 代码 数值 分辨率和码率 MOUSE_MOVE 0 鼠标移动 MOUSE_DOWN 1 鼠标键按下 MOUSE_UP 2 鼠标键弹起 MOUSE_DBCLICK 3 鼠标双击 鼠标键类型 CRVideo_MOUSE_KEY_TYPE 代码 数值 分辨率和码率 MOUSEKEY_NULL 0 无 MOUSEKEY_L 1 鼠标左键 MOUSEKEY_M 2 鼠标中键 MOUSEKEY_R 3 鼠标右键 MOUSEKEY_WHEEL 4 鼠标滚轮 MOUSEKEY_X 5 鼠标侧键 键盘事件类型 CRVideo_KEY_MSG_TYPE 代码 数值 分辨率和码率 KEYT_DWON 0 键值按下 KEYT_UP 1 键值弹起 功能类型 CRVideo_MAIN_PAGE_TYPE 代码 数值 分辨率和码率 MAINPAGE_VIDEOWALL 0 视频墙 MAINPAGE_SHARE 1 共享 MAINPAGE_WHITEBOARD 2 白板 视频墙分屏模式 CRVideo_VIDEOLAYOUTMODE 代码 数值 分辨率和码率 VLO_1v1_M 0 互看 VLO_WALL1_M 1 1分屏 VLO_WALL2 2 2分屏 VLO_WALL4 3 4分屏 VLO_WALL5_M 4 5分屏 VLO_WALL6_M 5 6分屏 VLO_WALL9 6 9分屏 VLO_WALL13_M 7 13分屏 VLO_WALL16 8 16分屏 VLO_WALL25 9 25分屏 Http文件传输状态 CRVideo_HTTP_TRANSFER_STAT 代码 数值 含义 HTTPFS_NULL 0 未开始 HTTPFS_QUEUE 1 排队中 HTTPFS_TRANSFERING 2 传输(上传/下载)中 HTTPFS_FINISHED 3 传输完成 Http文件传输结果 CRVideo_HTTP_TRANSFER_RESULT 代码 数值 含义 HTTPR_Success 0 成功 HTTPR_InnerErr 1 内部错误 HTTPR_ParamErr 2 参数错误 HTTPR_NetworkFail 3 网络不通/地址不对 HTTPR_NetworkTimeout 4 超时失败 HTTPR_FileOperationFail 5 文件操作失败 HTTPR_PathNotSupprot 6 不支持的路径 HTTPR_FileTransfering 7 文件正在传输 HTTPR_HTTPERR_BEGIN 1000 http错误码启始 HTTPR_HTTPERR_END 1999 http错误码结束 录制布局 CRVideo_ToolBarUI 代码 数值 含义 BTN_Pause 0 暂停 BTN_Stop 1 停止 录制的内容类型 CRVideo_REC_DATATYPE 代码 数值 含义 REC_AV_DEFAULT 0 录制所有 REC_AUDIO_LOC 1 录制本地音频 REC_AUDIO_OTHER 2 录制其它音频 REC_VIDEO 3 录制视频 影音结束原因 CRVideo_STOP_REASON 代码 数值 含义 MEDIA_CLOSE number 文件关闭 MEDIA_FINI number 播放到文件尾部 MEDIA_FILEOPEN_ERR number 打开文件失败 MEDIA_FORMAT_ERR number 文件格式错误 MEDIA_UNSUPPORT number 影音格式不支持 MEDIA_EXCEPTION number 其他异常 视频尺寸定义 CRVideo_VIDEO_WH_RATE 代码 数值 含义 RATE_16_9 number 16:9宽高比 RATE_4_3 number 4:3宽高比 RATE_1_1 number 1:1宽高比 © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 16:32:18 "},"TypeDefinitions.html":{"url":"TypeDefinitions.html","title":"类型定义","keywords":"","body":"类型定义 CRVideo_AddFileToRecordMgr 添加本地文件到录制文件管理中 Type: object 参数 类型 说明 fileName string 文件名，不含路径 filePath string 文件路径，不含文件名 CRVideo_AudioCfg 添加本地文件到录制文件管理中 Type: object 参数 类型 说明 micName string 麦克风设备名称 speakerName string 扬声器名称 privEC string 是否开启云屋私有回声消息0：不开启；1：开启 privAgc string 是否开启云屋私有语音自动增益0：不开启；1：开启 CRVideo_FileInfo 排队信息(params详细说明：decodeCREEFile：取值0或1。此参数仅上传有效，为0时上传原始文件，为1时上传解密的文件) Type: object 参数 类型 说明 bUploadType number 传输类型，0:下载类型，1:上传类型 filePathName string 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”) fileVersion string 文件版本（可以填版本号，也可以md5，也可以为空） httpUrl string 目标URL params object 特殊参数，字典数据。 fileSize number 文件大小 finishedSize number 已传输大小 state CRVideo_HTTP_TRANSFER_STAT 文件传输状态，详见：HTTP_TRANSFER_STATE CRVideo_MediaInfoObj 影音文件信息 Type: object 参数 类型 说明 userID string 用户id state number 播放状态 0:播放 1:暂停 2:未播放 mediaName string 影音文件名 CRVideo_MemberInfo 成员信息 Type: object 名称 类型 说明 userID string 用户ID nickname string 昵称 audioStatus CRVideo_ASTATUS 音频状态,数值参考麦克风状态 videoStatus CRVideo_VSTATUS 视频状态,数值参考视频状态定义 CRVideo_QueueInfo 队列信息 Type: object 参数 类型 说明 queID string 队列ID name string 队列名称 desc string 队列描述 prio number 优先级，值越小优先级越高 CRVideo_QueuingInfo 排队信息 Type: object 参数 类型 说明 queID string 队列ID 我排的队列(-1:代表我没有排队；-2:代表我正在会话中,通过GetSessionInfo可获取相关信息) position string 我的位置 queuingTime string 我排队的时长(单位s) CRVideo_RecordFileInfo 录制文件信息 Type: object 参数 类型 说明 fileName string 文件名，全路径 state number 0 没有上传，1上传中，2 上传完毕 uploadPercent number 上传进度，state为1时关注此字段 CRVideo_RecordUploadCfg 上传配置参数 Type: object 参数 类型 说明 type number 0:云屋网盘(默认), 1:http speakerName string 上传地址 CRVideo_RecordVideoInfo 需要录制的视频信息 Type: object 参数 类型 说明 left number 左 top number 上 width number 宽 height number 高 param object 附加参数PropertiesName Type Descriptiontype [CRVideo_REC_VCONTENT_TYP】E](Constant.md#REC_VCONTENT_TYPE) 录制类型 CRVideo_ScreenShareCfgObj 屏幕共享配置对象 Type: object 参数 类型 说明 encodeType number 编码类型,详见屏幕共享的编码类型CRVideo_ENCODE_TYPE catchRect object {\"left\":xx,\"top\":xx,\"width\":xx,\"height\":xx}用于实现区域共享 catchWnd number 共享窗口的窗口句柄，用于实现窗口共享 maxFPS number 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) maxKbps number 最大码率，缺省800kbps CRVideo_SessionInfo 排队信息 Type: object 参数 类型 说明 callID string 会话的呼叫ID peerID string 会话的目标用户ID peerName string 会话的目标用户昵称 bCallAccepted number 呼叫是否被对方接受 0:暂未接受，1:已接受 meetingID number 呼叫接受后，分配的会议ID meetingPswd string 会议密码 duration number 会议持续的时长(单位s) CRVideo_VideoCfg 视频参数 Type: object 参数 类型 说明 sizeType CRVideo_VIDEO_WH_RATE 视频尺寸 fps number 帧率：视频帧率(5~30) maxbps number 视频码率（1~10010001000）;(未配置则使用内部默认值，请参见VIDEO_SHOW_SIZE qp_min number 最佳质量(18~51, 越小质量越好) (未配置则使用内部默认值25) qp_max number 最差质量(18~51, 越大质量越差) (未配置则使用内部默认值36) wh_rate number 视频宽高比(0对应16:9,1对应4:3,2对应1:1) (未配置则使用内部默认值0) wh_rate CRVideo_VIDEO_WH_RATE 视频宽高比例 CRVideo_VideoDeviceInfo 视频设备信息 Type: object 参数 类型 说明 userID string 用户ID videoID string 设备id videoName string 设备名称 CRVideo_VideoIDsObj 视频设备对象 Type: object 参数 类型 说明 userID string 用户ID videoID string 设备id CRVideo_VideoImgObj 视频设备对象 Type: object 参数 类型 说明 format number 视频尺寸，请参见：CRVideo_VIDEO_FORMAT dat string 图像数据Base64编码 width number 图像宽度 height number 图像高度 CRVideo_Board 白板信息 Type: object 参数 类型 说明 userID string 用户ID boardID number 白板id title string 白板名称 width number 白板宽度 height number 白板高度 CRVideo_MeetInfoObj 区域 Type: object 参数 类型 说明 ID number 会议号，0时代表会议信息为空 pswd number 会议密码；（空代表会议无密码） subject number 会议主题 pubMeetUrl number 会议公共链接 CRVideo_QueInfo 队列信息 Type: object 参数 类型 说明 queID number 队列id name number 队列名称 desc string 队列描述 prio number 优先级，值越小优先级越高 CRVideo_QueStatus 队列状态 Type: object 参数 类型 说明 queID number 队列id agent_num number 坐席数量 wait_num number 排队客户数量 srv_num number 正在服务的客户数量 CRVideo_QueUser 队列用户信息 Type: object 参数 类型 说明 queID number 队列ID usrID string 用户ID name string 用户昵称 queuingTime string 已排队时长(秒) param string 用户呼叫时的私有数据 CRVideo_Rect 区域 Type: object 参数 类型 说明 left number 区域右上角x坐标 top number 区域右上角y坐标 width number 区域宽度 height number 区域高度 CRVideo_SubPage 队列状态信息 Type: object 参数 类型 说明 userID number 用户ID boardID number 白板id © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 16:48:25 "},"ClassContainer.html":{"url":"ClassContainer.html","title":"容器类","keywords":"","body":"容器类 显示容器的基类 影音播放的呈现容器 屏幕共享播放的呈现容器 视频的呈现容器 CRVideo.Container new Container() 显示容器的基类 Methods handler() object对象 height() 容器的高度 id() id style() 容器的样式 width() 容器的宽度 CRVideo.MediaContainer new MediaContainer() 影音播放的呈现容器 Methods disableToolBar(bDisable) 工具条是否可用 参数 类型 说明 bDisable number 0:可用; 非0:不可用; handler() object对象 继承:CRVideo.Container.handler() height() 容器的高度 继承:CRVideo.Container.height() id() id 继承:CRVideo.Container.id() keepAspectRatio(value) 绘制模式，是否拉伸绘制 参数 类型 说明 value bool true: 保持比例不拉伸， false:不保持比例进行拉伸 savePicToBase64(format) 保存播放影音画面到图片文件 返回值:Base64字符串 (string) 参数 类型 说明 format string 支持格式:bmp, png, gif, jpg, jpeg savePicToFile(pathFileName) 保存播放影音画面到图片文件 返回值:0成功，非0失败 (number) 参数 类型 说明 pathFileName string 本地绝对路径文件名(支持格式：bmp, png, gif, jpg, jpeg) setToolBarUIElementVisible(UIElement, isVisible) 显示隐藏播放工具条上的界面元素 返回值:无 参数 类型 说明 UIElement CRVideo_ToolBarUI 界面元素 isVisible bool 是否可见 style() 容器的样式 继承:CRVideo.Container.style() width() 容器的宽度 继承:CRVideo.Container.width() CRVideo.ScreenShareContainer new ScreenShareContainer() 屏幕共享播放的呈现容器 Methods clear() 清空缓存的图像 ctrlOpen(value) 开启控制模式 返回值:无 参数 类型 说明 value bool true: 开启， false:不开启 enableMarked(value) 开启标注模式 返回值:无 参数 类型 说明 value bool 0: 不开启, 1:开启 isPicEmpty(num) 检查图像是否为空 返回值:无 参数 类型 说明 value bool 0: 有图像, 1:无图像 keepAspectRatio(num) 绘制模式，是否拉伸绘制 返回值:无 参数 类型 说明 value bool true: 保持比例不拉伸， false:不保持比例进行拉伸 savePic(pathFileName) 拍照 返回值:0:成功； 非0：保存遇到的错误码(bool) 参数 类型 说明 pathFileName string 本地绝对路径文件名(支持格式：bmp, png, gif, jpg, jpeg) setPenStyle(intRgba：, penWidth) 设置标注画笔样式 返回值:无 参数 类型 说明 intRgba： num 颜色，排列方式bgr(8:8:8) penWidth num 画笔宽度 CRVideo.VideoContainer new VideoContainer() 视频的呈现容器 继承CRVideo.Container Methods clear() 清理当前图像 getVideoID() 获取当前显示的用户的视频设备 返回值:视频ID (string) getVisibleNickName() 获取是否显示昵称 返回值:否显示昵称 (bool) handler() object对象 继承:CRVideo.Container.handler() height() 容器的高度 继承:CRVideo.Container.height() id() id 继承:CRVideo.Container.id() isPicEmpty() 检查图像是否为空 返回值:图像是否为空 (bool) keepAspectRatio(value) 设置显示的视频画面是否保持比例 参数 类型 说明 value bool true: 保持比例不拉伸， false:不保持比例进行拉伸 savePic(pathFileName) 拍照 返回值:0:成功； 非0：保存遇到的错误码 (bool) 参数 类型 说明 pathFileName string 本地绝对路径文件名(支持格式：bmp, png, gif, jpg, jpeg) savePicToBase64(format) 拍照 返回值:Base64为图片数据字符串，不成功则为空 (string) 参数 类型 说明 format string 图片格式，支持bmp, png, gif, jpg, jpeg setVideo(userID, videoID) 设置显示的目标用户视频 返回值:无 参数 类型 说明 userID string 目标用户ID videoID number 用户的指定视频设备（-1，代表用户的默认视频设备） setVisibleNickName(value) 设置是否显示昵称 返回值:无 参数 类型 说明 value bool 否显示昵称 visibleNickName(value) 检查昵称是否可见 返回值:无 参数 类型 说明 value bool 0: 可见， 1:不可见 style() 容器的样式 继承:CRVideo.Container.style() width() 容器的宽度 继承:CRVideo.Container.width() © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 13:53:30 "},"json.html":{"url":"json.html","title":"Json定义","keywords":"","body":"Json定义 会议对象 MeetInfoObj {\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":} 属性 值 ID 会议号，0：代表会议信息无效 pswd 会议密码；（空代表会议无密码） subject 会议主题 pubMeetUrl 会议公共链接 creator 会议创建者 memberCount 会议内人数 会议对象列表 MeetInfoObjs [{\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":4}, {\"ID\":100, \"pswd\":\"\", \"subject\":\"test\", \"pubMeetUrl\":\"www.cloudroom.com/auzjie\", \"creator\":\"testuser\", \"memberCount\":4},... ] 成员对象 MemberObj {\"userID\":\"111\", \"nickName\":\"aaa\", \"audioStatus\":\"1\", \"videoStatus\":\"1\"} 属性 值 userID 用户ID nickName 用户昵称 audioStatus 音频状态,数值参考麦克风状态ASTATUS videoStatus 视频状态,数值参考视频状态定义VSTATUS 成员对象列表 MembersObj [{\"userID\":\"111\",\"nickName\":\"aaa\",\"audioStatus\":\"\",\"videoStatus\":\"1\"}, {\"userID\":\"222\",\"nickName\":\"bbb\",\"audioStatus\":\"1\",\"videoStatus\":\"1\"}] 音频配置 AudioCfgObj {\"micName\": \"aaa\", \"speakerName\":\"aaa\", \"privEC\":\"0\", \"privAgc\":\"0\"} 属性 值 micName 麦克风设备名称(空代表系统默认设备) speakerName 扬声器名称(空代表系统默认设备) privEC 是否开启云屋私有回声消息0：不开启；1：开启(缺省建议不开启) privAgc 是否开启云屋私有语音自动增益0：不开启；1：开启(缺省建议不开启) 视频配置 VideoCfgObj {\"sizeType\": 1, \"fps\":\"12\"} 属性 值 sizeType 视频尺寸，请参见：VIDEO_SHOW_SIZE fps 帧率：视频帧率(5~30) maxbps 视频码率（1~10010001000）;(未配置则使用内部默认值，请参见VIDEO_SHOW_SIZE) qp_min 最佳质量(18~51, 越小质量越好) (未配置则使用内部默认值25) qp_max 最差质量(18~51, 越大质量越差) (未配置则使用内部默认值36) wh_rate 视频宽高比,取值如下:0 为16:9(未配置时内部默认值)1 为4:3;2 为1:1 我们采用的是vbr编码（由质量+码率，双重控制）： qp范围：质量参数，为的是达到目标质量后，无需花费更大码率提高质量； maxbps码率控制，是为了确保结果一定不大于“目标码率”（体积受控）； 当要超出码率控制时，自动降低质量；当质量达到目标时，自动减少码率甚至无码率输出。 视频帧图像 VideoImgObj { \"format\":1, \"dat\":\"FKLEOFJXKFD…\", \"width\":1024, \"height\":768, \"frameTime\":100} 属性 值 format 图像格式,数值参考视频图像格式VIDEO_FORMAT dat 图像数据Base64编码 width 图像宽度 height 图像高度 frameTime 图像的时戳 用户视频信息 VideoInfoObj {\"userID\":\"111\", \"videoID\":2, \"videoName\":\"camera2\"} 属性 值 userID 用户id videoID 设备id videoName 设备名称 用户视频信息列表 VideoInfosObj [ {\"userID\":\"111\",\"videoID\":1,\"videoName\":\"camera1\"}, {\"userID\":\"111\",\"videoID\":2,\"videoName\":\"camera2\"},... ] 用户视频列表 VideoIDObjs [ {\"userID\":\"111\",\"videoID\":1}, {\"userID\":\"111\",\"videoID\":2},... ] 属性 值 userID 用户id videoID 设备id 屏幕共享配置 ScreenShareCfgObj {\"encodeType\":0, \"maxFPS\":8, \"maxKbps\":800000 } 属性 值 encodeType 编码类型,详见屏幕共享的编码类型ENCODE_TYPE catchRect {\"left\":10,\"top\":10,\"width\":100,\"height\":100}用于实现区域共享 catchWnd 共享窗口的窗口句柄，用于实现窗口共享 maxFPS 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) maxKbps 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降) 录制视频对象列表 RecordVideosObj [ {\"left\":426, \"top\":124, \"width\":409, \"height\":231, \"type\":0, \"keepAspectRatio\":1, \"param\": {\"camid\":\"c90d98e2-e50d-4abe-a318-104271a47cb6.1\"}}, … ] 属性 值 left，top，width，height 在录制中的区域（相对于录像尺寸） type 录制类型REC_VCONTENT_TYPE说明:当type=RECVTP_VIDEO时，表示录制的是摄像头区域，param必需包含:camid：\"用户id.摄像头id\"当type=RECVTP_PIC时，表示指定的图片，param 必须包含:resourceid: xxx; (参见setPicResource)当type=RECVTP_SCREEN时，表示录制的是屏幕，可以增加附加参数:screenid：屏幕序号（-1:表示主屏）;pid：进程号; (0：未指定进程)area：x,y,w,h;（抓屏区域，无此参数时，代表抓全屏）当type= RECVTP_TIMESTAMP时，不用附加任何参数 keepAspectRatio 内容保持原始比例；（0：不保持；1：保持） param 具体值与type相关； 录制文件配置 RecordCfgObj {\"filePathName\":\"D:\\\\1.mp4\", \"recordWidth\":640, \"recordHeight\":320, \"frameRate\":8, \"bitRate\":500000, \"defaultQP\":28, \"recDataType\":1, \"isUploadOnRecording\":0} 属性 值 filePathName 录像存储的路径文件名,使用完整路径 recordWidth 录制结果中视频尺寸宽度 recordHeight 录制结果中视频尺寸高度 frameRate 录制的帧率，取值范围:1-30(值越大,cpu要求更高，推荐15帧) bitRate 录制的最高码率当图像变化小时，实际码率会低于此值。建议:640*360: 500000; (500kbps)1280*720：1000000; (1mbps)1920*1080: 2000000; (2mbps) defaultQP 录制的缺省质量，缺省值：28取值范围：0~51; (0完全无损, 51质量非常差)推荐：高质量取值18, 中质量28， 低质量36 recDataType 录制内容类型，值参考定义REC_DATATYPE isUploadOnRecording 是否边录边上传，0：手动上传；1：边录制边上传； 录制文件列表 RecordFilesObj [ {\"fileName\":\"D:\\\\1.mp4\",\"size\":10240,\"state\":1,\"uploadPercent\":100}, {\"fileName\":\"D:\\\\2.mp4\",\"size\":13140,\"state\":2,\"uploadPercent\":80}, ... ] 属性 值 fileName 文件名，全路径 size 文件大小 state 0:没有上传，1:上传中，2:上传完毕 uploadPercent 录制结果中视频尺寸高度上传进度，state为1时此字段有效 影音文件 MediaInfoObj { \"userID\": \"111\", \"state\":1, mediaName:\"D:\\1.mp4\"} 属性 值 userID 用户id径 state 播放状态 0:播放 1:暂停 2:未播放 mediaName 影音文件名 图片资源 PicResourceObj {\"fmt\":\"picfile\",\"dat\":\"c:\\test.jpg\"} 属性 值 fmt 资源格式，可取值：\"yuv420p\"，\"rgb32\"，\"picfile\"，\"picdat\" dat 资源数据，不同格式时，要提供的数据各不一样：fmt为\"yuv420p\"时： dat存放的是base64(yuv420p数据)；fmt为\"rgb32\"时： dat存放的是base64(rgb32数据)；fmt为\"picfile\"时： dat存放的是“本地文件名”；fmt为\"picdat \"时：dat存放的是base64(图片文件内容)； width 图像宽度(像素), 在fmt为\"yuv420p\"，\"rgb32\"时，需要此参数 height 图像高度(像素), 在fmt为\"yuv420p\"，\"rgb32\"时，需要此参数 白板信息列表 BoardObjs [ { \"boardID\": \"a\",\"title\": \"board\",\"width\": 1024,\"height\": 768,\"pageCount\": 1}, { \"boardID\": \"b\",\"title\": \"board\",\"width\": 1024,\"height\": 768,\"pageCount\": 1}, … ] 白板配置对象 BoardObj { \"boardID\": \"x\", \"title\": \"board\", \"width\": 1024, \"height\": 768, \"pageCount\": 1} 属性 值 boardID 白板标识 title 白板的名字 width、height 白板的宽、高 pageCount 页数(建议白板是一页，文档是实际页面数) 白板图元列表 BoardElementObjs [ { \"elementID\": \"xx\", \"type\":100, \"orderID\":0, \"left\":0, \"top\":0, …} { \"elementID\": \"yy\", \"type\":100, \"orderID\":0, \"left\":100, \"top\":100, …} ] 白板图元 BoardElementObj { \"elementID\": \"xx\", \"type\":100, \"left\":0, \"top\":0, …} 属性 值 elementID 图元id type 图元的类型，值100以下为云屋保留值，100及以上为自定义值 left、top 图元在页内的左上角位置 … 可自由扩展 说明： 1.elementID必须调用createElementID（）获取, 即使是曾经调此接口创建的然后存入了磁盘文件，再次读入会议时，所有elementID也需要重新生重。2.如果要和云屋产品互通，那就需要按云屋的定义取值，可以联系云屋获取相关文档 网盘文件对象 NetFileObj {\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"} 属性 值 ownerID 文件所有者的ID ownerName 文件所有者的名称 name 文件所有者的名称 orgFileName 用户的原始文件名 md5 压缩后的md5(如果不压缩，则原文件md5) ctime 上传时间 size 在服务器上的大小 orgSize 原始文件大小 status 文件状态 网盘文件对象列表 NetFileObjs [{\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"}, {\"ownerID\":\"\", \"ownerName\":\"\", \"name\":\"\", \"orgFileName\":\"\", \"md5\":\"\", \"ctime\":\"\", \"size\":\"\", \"orgSize\":\"\", \"status\":\"\"}] © HeDonghai all right reserved，powered by Gitbook文件修订时间： 2018-01-23 16:08:02 "}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: live.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: live.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>if(window["000a0180686911e78dd0a45d36bb8c5c"] === undefined)
{
	//---------------------------------------
	//
	//私有对象
	//
	//---------------------------------------
	//ocx对象


	CRVideo_Is_ActiveXObject = !!window.ActiveXObject || "ActiveXObject" in window;

	CRVideo_Version_OCX = '303000'
	/**
	 * 录制布局
	 * @enum { number }
	 */
	CRVideo_RECORD_VLAYOUT = 
	{
		/**表格类型*/
		REC_VLAYOUT_GRID:1,
		/**画中画类型(只有在录两个视频时有效)*/
		REC_VLAYOUT_PIP:2
	}
	/**
	 * 录制视频类型
	 * @enum { number }
	 */
	CRVideo_RECORD_VIDEO_TYPE = 
	{
		/**无*/
		REC_VCONTENT_NULL:0,
		/**录制屏幕*/
		RECORD_VIDEO_TYPE_SCREEN:1,
		/**录制摄像头*/
		REC_VCONTENT_VIDEOS:3
	}
	/**
	 * 录制音频类型
	 * @enum { number }
	 */
	CRVideo_RECORD_AUDIO_TYPE = 
	{
		/**无*/
		REC_AUDIO_TYPE_NULL:0,
		/**录制本地*/
		REC_AUDIO_TYPE_LOC:1,
		/**录制他人*/
		REC_AUDIO_TYPE_OTHER:2,
		/**录制所有*/
		REC_AUDIO_TYPE_ALL:3
	}
	/**
	 * 视频尺寸定义
	 * @enum { number }
	 */
	CRVideo_VIDEO_SHOW_SIZE = 
	{
		VIDEO_SZ_80:1,
		VIDEO_SZ_128:2,
		VIDEO_SZ_160:3,
		VIDEO_SZ_192:4,
		VIDEO_SZ_256:5,
		VIDEO_SZ_288:6,
		VIDEO_SZ_320:7,
		VIDEO_SZ_360:8,
		VIDEO_SZ_400:9,
		VIDEO_SZ_480:10,
		VIDEO_SZ_576:11,
		VIDEO_SZ_720:12,
		VIDEO_SZ_1080:13,
	}
    /**
	 * 视频尺寸定义
	 * @enum { number }
	 */
    CRVideo_VIDEO_WH_RATE = 
    {
		/**16:9宽高比*/
		RATE_16_9:0,
		/**4:3宽高比*/
		RATE_4_3:1,
        /**1:1宽高比*/
		RATE_1_1:1,
	}
	/**
	 * 视频图像格式
	 * @enum { number }
	 */
	CRVideo_VIDEO_FORMAT = 
	{
		/**yuv420p*/
		VFMT_YUV420P:0,
		/**32-bit ARGB format (0xAARRGGBB)*/
		VFMT_ARGB32:1,
	}
	/**
	 * 麦克风状态
	 * @enum { number }
	 */
	CRVideo_ASTATUS = 
	{
		/**音频状态未知*/
		AUNKNOWN:0,
		/**没有麦克风设备*/
		ANULL:1,
		/**麦克风处于关闭状态（软开关）*/
		ACLOSE:2,
		/**麦克风处于打开状态（软开关）*/
		AOPEN:3,
		/**向服务器发送打开消息中*/
		AOPENING:4,
	}
	/**
	 * 视频状态
	 * @enum { number }
	 */
	CRVideo_VSTATUS = 
	{
		/**视频状态未知*/
		VUNKNOWN:0,
		/**没有视频设备*/
		VNULL:1,
		/**视频处于关闭状态（软开关）*/
		VCLOSE:2,
		/**视频处于打开状态（软开关）*/
		VOPEN:3,
		/**向服务器发送打开消息中	*/
		VOPENING:4,
	}
	/**
	 * 录制的内容类型
	 * @enum { number }
	 */
	CRVideo_REC_DATATYPE = 
	{
		/**录制所有*/
		REC_AV_DEFAULT:0,
		/**录制本地音频*/
		REC_AUDIO_LOC:1,
		/**录制其它音频*/
		REC_AUDIO_OTHER:2, 
		/**录制视频*/
		REC_VIDEO:4,
	}
	/**
	 * 录制类型
	 * @enum { number }
	 */
	CRVideo_REC_VCONTENT_TYPE = 
	{
		/**摄像头*/
		RECVTP_VIDEO:0,
		/**图像*/
		RECVTP_PIC:1,
		/**屏幕共享*/
		RECVTP_SCREEN:2, 
		/**影音*/
		RECVTP_MEDIA:3,
		/**时间戳水印*/
		RECVTP_TIMESTAMP:4	//时间戳水印，_itemDat中应有：resourceid=xxx;
	}
	/**
	 * 录制的状态
	 * @enum { number }
	 */
	CRVideo_RECORD_STATE = 
	{
		/**录制未启动*/
		NO_RECORD:0,
		/**录制正在开启*/
		STARTING:1,
		/**正在录制*/
		RECORDING:2, 
		/**录制已暂停*/
		PAUSED:3,
		/**录制正在结束*/
		STOPPING:4,
	}

	/**
	 * 视频墙分屏模式
	 * @enum { number }
	 */
	CRVideo_VIDEOLAYOUTMODE = 
	{
		/**互看*/
		VLO_1v1_M:0,
		/**1分屏*/
		VLO_WALL1_M:1,
		/**2分屏*/
		VLO_WALL2:2,
		/**4分屏*/
		VLO_WALL4:3,
		/**5分屏*/
		VLO_WALL5_M:4,
		/**6分屏*/
		VLO_WALL6_M:5,
		/**9分屏*/
		VLO_WALL9:6,
		/**13分屏*/
		VLO_WALL13_M:7,
		/**16分屏*/
		VLO_WALL16:8,
		/**25分屏*/
		VLO_WALL25:9
	}
	/**
	 * 影音结束原因（STOP_REASON）
	 * @enum { number }
	 */
	CRVideo_STOP_REASON = 
	{
		/**文件关闭*/
		MEDIA_CLOSE:0,
		/**播放到文件尾部*/
		MEDIA_FINI:1,
		/**打开文件失败*/
		MEDIA_FILEOPEN_ERR:2,
		/**文件格式错误*/
		MEDIA_FORMAT_ERR:3,
		/**影音格式不支持*/
		MEDIA_UNSUPPORT:4,
		/**其他异常*/
		MEDIA_EXCEPTION:5
	}
	/**
	 * 屏幕共享的编码类型
	 * @enum { number }
	 */
	CRVideo_ENCODE_TYPE = 
	{
		/**云屋科技私有编码格式（清晰度更高，带宽大）*/
		ENC_CLOUDROOM:0,
		/**(清晰度差一些，带宽小)*/
		ENC_H264:1
	}
	/**
	 * 鼠标键类型
	 * @enum { number }
	 */
	CRVideo_MOUSE_KEY_TYPE = 
	{
		/**无*/
		MOUSEKEY_NULL:0,
		/**鼠标左键*/
		MOUSEKEY_L:1,
		/**鼠标中键*/
		MOUSEKEY_M:2,
		/**鼠标右键*/
		MOUSEKEY_R:3,
		/**鼠标滚轮*/
		MOUSEKEY_WHEEL:4,
		/**鼠标侧键*/
		MOUSEKEY_X:5
	}
	/**
	 * 鼠标事件类型
	 * @enum { number }
	 */
	CRVideo_MOUSE_MSG_TYPE = 
	{
		/**鼠标移动*/
		MOUSE_MOVE:0,
		/**鼠标键按下*/
		MOUSE_DOWN:1,
		/**鼠标键弹起*/
		MOUSE_UP:2,
		/**鼠标双击*/
		MOUSE_DBCLICK:3
	}
	/**
	 * 键盘事件类型
	 * @enum { number }
	 */
	CRVideo_KEY_MSG_TYPE = 
	{
		/**键值按下*/
		KEYT_DWON:0,
		/**键值弹起*/
		KEYT_UP:1

	}

	/**
	 * 功能类型
	 * @enum { number }
	 */
	CRVideo_MAIN_PAGE_TYPE = 
	{
		/**视频墙*/
		MAINPAGE_VIDEOWALL:0,
		/**共享*/
		MAINPAGE_SHARE:1,
		/**白板*/
		MAINPAGE_WHITEBOARD:2

	}
	/**
	 * Http文件传输状态
	 * @enum { number }
	 */
	CRVideo_HTTP_TRANSFER_STAT = 
	{
		/**未开始*/
		HTTPFS_NULL:0,
		/**排队中*/
		HTTPFS_QUEUE:1,
		/**传输中*/
		HTTPFS_TRANSFERING:2,
		/**传输完成*/
		HTTPFS_FINISHED:3

	}
	/**
	 * Http文件传输结果
	 * @enum { number }
	 */
	CRVideo_HTTP_TRANSFER_RESULT = 
	{
		/**成功*/
		HTTPR_Success:0,
		/**内部错误*/
		HTTPR_InnerErr:1,
		/**参数错误*/
		HTTPR_ParamErr:2,
		/**网络不通/地址不对*/
		HTTPR_NetworkFail:3,
		/**超时失败*/
		HTTPR_NetworkTimeout:4,
		/**文件操作失败*/
		HTTPR_FileOperationFail:5,
		/**不支持的路径*/
		HTTPR_PathNotSupprot:6,
		/**文件正在传输*/
		HTTPR_FileTransfering:7,
		/**http错误码启始*/
		HTTPR_HTTPERR_BEGIN:1000,
		/**http错误码结束*/
		HTTPR_HTTPERR_END:1999

	}
	/**
	 * SDK初始化
	 * @access public
	 * @param {string} oemID -开发商ID,没有特别要求可填"CLOUDROOM"
	 * @param {string} sdkUsePath -  sdk配置、临时文件存放位置，可为空
	 * @param {number} statCallSer -  是否启用callSer模块 0为不启用，1为启用,默认为1
	 * @param {number} statMediaSer -  是否启用mediaSer模块 0为不启用，1为启用,默认为1
	 * @param {number} statHttp -  是否启用http模块 0为不启用，1为启用,默认为0

	 * @returns {number} 返回错误码（错误码为CRVideo_NOERR表示没有错误）
	 */	
	CRVideo_Init2 = function(sdkUsePath,statCallSer,statMediaSer,statHttp){
		if(statCallSer === undefined)
		{
			statCallSer = 1
		}
		if(statMediaSer === undefined)
		{
			statMediaSer = 1
		}
		if(statHttp === undefined)
		{
			statHttp = 0
		}
		return CRVideo_Init("",sdkUsePath,statCallSer,statMediaSer,statHttp);
	}
	CRVideo_Init = function(oemID,sdkUsePath,statCallSer,statMediaSer,statHttp)
	{
		if(statCallSer === undefined)
		{
			statCallSer = 1
		}
		if(statMediaSer === undefined)
		{
			statMediaSer = 1
		}
		if(statHttp === undefined)
		{
			statHttp = 0
		}
		try
		{
			if(CRVideo._isinit)
			{
				if(!CRVideo.ie || CRVideo.v == 10.0)
				{
					document.body.appendChild(CRVideo._handler)
				}
				return 0
			}
			if(!CRVideo.ie || CRVideo.v == 10.0)
			{
				CRVideo._handler = document.createElement("div");
				
				CRVideo._crSdk =  document.createElement("object");
				CRVideo._crSdk.id = "crVideoObj";
				
				CRVideo._crMgr = document.createElement("object");
				CRVideo._crMgr.id = "crMgrObj"
				
				CRVideo._crMeet =  document.createElement("object");
				CRVideo._crMeet.id = "crMeetObj";
				
				CRVideo._crQueue = document.createElement("object");
				CRVideo._crQueue.id = "crQueueObj"
				
				CRVideo._crHttp = document.createElement("object");
				CRVideo._crHttp.id = "crHttpObj"
                
    			CRVideo._crScreenShare = document.createElement("object");
				CRVideo._crScreenShare.id = "crScreenShareObj"
				
				if (CRVideo_Is_ActiveXObject)
				{
					
					CRVideo._crSdk.classid = "clsid:07EFD662-A1BB-4d8d-9BEE-F7E43E5FEBF5";
					CRVideo._crMgr.classid = "clsid:120AD2B0-68F2-46c6-88D8-52173F501C0F";
					CRVideo._crMeet.classid = "clsid:9E9DD983-A9F8-4dff-B694-B1AE1C708B1E";
					CRVideo._crQueue.classid = "clsid:9AAD199D-A02F-4513-875D-AA81091E44B9";
					CRVideo._crHttp.classid = "clsid:7E44F8C9-7C8D-4004-8F45-D9819D78663C";
                    CRVideo._crScreenShare.classid = "clsid:6FF142C5-8A36-49d7-B627-D60B803550FC";
					

				}else
				{
					
					CRVideo._crSdk.type = "application/x-cloudroom-videosdk"
					CRVideo._crMgr.type = "application/x-cloudroom-videomgr";
					CRVideo._crMeet.type = "application/x-cloudroom-videomeeting";
					CRVideo._crQueue.type = "application/x-cloudroom-queue";
					CRVideo._crHttp.type = "application/x-cloudroom-httpfilemgr";
                    CRVideo._crScreenShare.type = "application/x-cloudroom-screenshareui";
					
				}
				

				CRVideo._handler.appendChild(CRVideo._crSdk);
				CRVideo._crSdk.style.width = "1px";
				CRVideo._crSdk.style.height = "1px";
				

				CRVideo._handler.appendChild(CRVideo._crMgr);
				CRVideo._crMgr.style.width = "1px";
				CRVideo._crMgr.style.height = "1px";
				

				CRVideo._handler.appendChild(CRVideo._crMeet);
				CRVideo._crMeet.style.width = "1px";
				CRVideo._crMeet.style.height = "1px";

	
				CRVideo._handler.appendChild(CRVideo._crQueue);
				CRVideo._crQueue.style.width = "1px";
				CRVideo._crQueue.style.height = "1px";
				

				CRVideo._handler.appendChild(CRVideo._crHttp);
				CRVideo._crHttp.style.width = "1px";
				CRVideo._crHttp.style.height = "1px";
                
    			CRVideo._handler.appendChild(CRVideo._crScreenShare);
				CRVideo._crScreenShare.style.width = "1px";
				CRVideo._crScreenShare.style.height = "1px";

				
				document.body.appendChild(CRVideo._handler)

			}else
			{
				CRVideo._crSdk = document.getElementById("crVideoObj");
				CRVideo._crMgr = document.getElementById("crMgrObj");
				CRVideo._crMeet = document.getElementById("crMeetObj");
				CRVideo._crQueue = document.getElementById("crQueueObj");
				CRVideo._crHttp = document.getElementById("crHttpObj");
                CRVideo._crScreenShare = document.getElementById("crScreenShareObj");
				
			}

			var versionStr = CRVideo._crSdk.Version
			var versionArr = versionStr.split(' ')
			versionArr = versionArr[0].split('.');
			version = versionArr[0]*100*100+versionArr[1]*100+versionArr[2]
			
			if(CRVideo_Version_OCX > version)
			{
				return CRVideo_OCX_VERSION_NOTUPPORTED;
			}

			// 关联回调事件
			if(!CRVideo.ie || CRVideo.v == 10.0)
			{
				//-----------------------------
				//会议创建管理的回调
				//-----------------------------
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'loginSuccess',CRVideo_LoginSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'loginFail',CRVideo_LoginFail);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'lineOff',CRVideo_LineOff);
				
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'setDNDStatusSuccess',CRVideo_SetDNDStatusSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'setDNDStatusFail',CRVideo_SetDNDStatusFail);

				__crVideo_RegisterCallBack(CRVideo._crMgr, 'getUserStatusSuccess',CRVideo_GetUserStatusSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'getUserStatusFail',CRVideo_GetUserStatusFail);

				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyUserStatus',CRVideo_NotifyUserStatus);

				__crVideo_RegisterCallBack(CRVideo._crMgr, 'startUserStatusNotifyRslt',CRVideo_StartUserStatusNotifyRslt);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'stopUserStatusNotifyRslt',CRVideo_StopUserStatusNotifyRslt);
				
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'createMeetingSuccess',CRVideo_CreateMeetingSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'createMeetingFail',CRVideo_CreateMeetingFail);

				__crVideo_RegisterCallBack(CRVideo._crMgr, 'destroyMeetingRslt',CRVideo_DestroyMeetingRslt);
                
                __crVideo_RegisterCallBack(CRVideo._crMgr, 'getMeetingsSuccess',CRVideo_GetMeetingsSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'getMeetingsFail',CRVideo_GetMeetingsFail);
				
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'callSuccess',CRVideo_CallSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'callFail',CRVideo_CallFail);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'acceptCallSuccess',CRVideo_AcceptCallSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'acceptCallFail',CRVideo_AcceptCallFail);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'rejectCallSuccess',CRVideo_RejectCallSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'rejectCallFail',CRVideo_RejectCallFail);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'hangupCallSuccess',CRVideo_HangupCallSuccess);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'hangupCallFail',CRVideo_HangupCallFail);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCallIn',CRVideo_NotifyCallIn);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCallAccepted',CRVideo_NotifyCallAccepted);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCallRejected',CRVideo_NotifyCallRejected);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCallHungup',CRVideo_NotifyCallHungup);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'callMorePartyRslt',CRVideo_CallMorePartyRslt);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'cancelCallMorePartyRslt',CRVideo_CancelCallMorePartyRslt);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCallMorePartyStatus',CRVideo_NotifyCallMorePartyStatus);

				__crVideo_RegisterCallBack(CRVideo._crMgr, 'sendCmdRlst',CRVideo_SendCmdRlst);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'sendBufferRlst',CRVideo_SendBufferRlst);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'sendFileRlst',CRVideo_SendFileRlst);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'sendProgress',CRVideo_SendProgress);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'cancelSendRlst',CRVideo_CancelSendRlst);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCmdData',CRVideo_NotifyCmdData);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyBufferData',CRVideo_NotifyBufferData);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyFileData',CRVideo_NotifyFileData);
				__crVideo_RegisterCallBack(CRVideo._crMgr, 'notifyCancelSend',CRVideo_NotifyCancelSend);
				
				
				
				//-----------------------------
				//会议管理的回调接口
				//-----------------------------
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'enterMeetingRslt',CRVideo_EnterMeetingRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'userEnterMeeting',CRVideo_UserEnterMeeting);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'userLeftMeeting',CRVideo_UserLeftMeeting);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'stopMeetingRslt',CRVideo_StopMeetingRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'meetingStopped',CRVideo_MeetingStopped);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'meetingDropped',CRVideo_MeetingDropped);
				


				__crVideo_RegisterCallBack(CRVideo._crMeet, 'netStateChanged',CRVideo_NetStateChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'audioDevChanged',CRVideo_AudioDevChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'audioStatusChanged',CRVideo_AudioStatusChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'micEnergyUpdate',CRVideo_MicEnergyUpdate);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'videoStatusChanged',CRVideo_VideoStatusChanged);
				
				
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyVideoData',CRVideo_NotifyVideoData);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'videoDevChanged',CRVideo_VideoDevChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'defVideoChanged',CRVideo_DefVideoChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyAudioPCMDat',CRVideo_NotifyAudioPCMDat);
				
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'recordErr',CRVideo_RecordErr);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'recordStateChanged',CRVideo_RecordStateChanged);
				
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'uploadRecordFileErr',CRVideo_UploadRecordFileErr);
																												  
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyRecordFileStateChanged',CRVideo_NotifyRecordFileStateChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyRecordFileUploadProgress',CRVideo_NotifyRecordFileUploadProgress);
				
				
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'startScreenShareRslt',CRVideo_StartScreenShareRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'stopScreenShareRslt',CRVideo_StopScreenShareRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyScreenShareStarted',CRVideo_NotifyScreenShareStarted);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyScreenShareStopped',CRVideo_NotifyScreenShareStopped);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyScreenShareData',CRVideo_NotifyScreenShareData);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyCatchScreen',CRVideo_NotifyCatchScreen);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyGiveCtrlRight',CRVideo_NotifyGiveCtrlRight);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyReleaseCtrlRight',CRVideo_NotifyReleaseCtrlRight);
                
                
                //-----------------------------
				//屏幕共享接口
				//-----------------------------
                __crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyShareRectChanged',CRVideo_NotifyShareRectChanged);	
                
                
                
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'sendIMmsgRlst',CRVideo_SendIMmsgRlst);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyIMmsg',CRVideo_NotifyIMmsg);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifySwitchToPage',CRVideo_NotifySwitchToPage);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyVideoWallMode',CRVideo_NotifyVideoWallMode);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMainVideoChanged',CRVideo_NotifyMainVideoChanged);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyInitBoards',CRVideo_NotifyInitBoards);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyInitBoardPageDat',CRVideo_NotifyInitBoardPageDat);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyCreateBoard',CRVideo_NotifyCreateBoard);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyCloseBoard',CRVideo_NotifyCloseBoard);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyBoardBkImage',CRVideo_NotifyBoardBkImage);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyAddBoardElement',CRVideo_NotifyAddBoardElement);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyModifyBoardElement',CRVideo_NotifyModifyBoardElement);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyDelBoardElement',CRVideo_NotifyDelBoardElement);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMouseHotSpot',CRVideo_NotifyMouseHotSpot);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'getNetDiskSummaryRslt',CRVideo_GetNetDiskSummaryRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'getNetDiskFileListRslt',CRVideo_GetNetDiskFileListRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyNetDiskFileDeleteRslt',CRVideo_NotifyNetDiskFileDeleteRslt);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyNetDiskTransforProgress',CRVideo_NotifyNetDiskTransforProgress);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMediaOpened',CRVideo_NotifyMediaOpened);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMediaStart',CRVideo_NotifyMediaStart);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMediaStop',CRVideo_NotifyMediaStop);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMediaPause',CRVideo_NotifyMediaPause);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyPlayPosSetted',CRVideo_NotifyPlayPosSetted);
				__crVideo_RegisterCallBack(CRVideo._crMeet, 'notifyMemberMediaData',CRVideo_NotifyMemberMediaData);
				
				
				//-----------------------------
				//队列类的回调接口
				//-----------------------------
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'initQueueDatRslt',CRVideo_InitQueueDatRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'queueStatusChanged',CRVideo_QueueStatusChanged);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'queuingInfoChanged',CRVideo_QueuingInfoChanged);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'startQueuingRslt',CRVideo_StartQueuingRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'stopQueuingRslt',CRVideo_StopQueuingRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'startServiceRslt',CRVideo_StartServiceRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'stopServiceRslt',CRVideo_StopServiceRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'responseAssignUserRslt',CRVideo_ResponseAssignUserRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'autoAssignUser',CRVideo_AutoAssignUser);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'reqAssignUserRslt',CRVideo_ReqAssignUserRslt);	
				__crVideo_RegisterCallBack(CRVideo._crQueue, 'cancelAssignUser',CRVideo_CancelAssignUser);	
				
				//-----------------------------
				//http管理接口
				//-----------------------------
				
				__crVideo_RegisterCallBack(CRVideo._crHttp, 'fileStateChanged',CRVideo_FileStateChanged);	
				__crVideo_RegisterCallBack(CRVideo._crHttp, 'fileHttpRspHeader',CRVideo_FileHttpRspHeader);	
				__crVideo_RegisterCallBack(CRVideo._crHttp, 'fileHttpRspContent',CRVideo_FileHttpRspContent);	
				__crVideo_RegisterCallBack(CRVideo._crHttp, 'fileProgress',CRVideo_FileProgress);	
				__crVideo_RegisterCallBack(CRVideo._crHttp, 'fileFinished',CRVideo_FileFinished);	
                
                
                


			}
				
			var setSDKParams = {"NoCallSvr":0,"NoMediaDatToSvr":0}
			if(statCallSer == 0)
			{
				setSDKParams["NoCallSvr"] = 1
			}
			if(statMediaSer == 0)
			{
				setSDKParams["NoMediaDatToSvr"] = 1
			}
			CRVideo._crSdk.setSDKParams(JSON.stringify(setSDKParams))
			
			if(oemID == ""){
				var r = CRVideo._crSdk.init_2(sdkUsePath);
			}else if(oemID === "CLOUDROOM"){
				var r = CRVideo._crSdk.init(oemID,sdkUsePath);
			}
			if(r == 0)
			{
				CRVideo._isinit = true;
				var nuinit_fun = function() {
					CRVideo._crMgr.logout();
				   	CRVideo._crSdk.uninit();
					CRVideo._isinit = false;
				}
				if (window.addEventListener) {                    //所有主流浏览器，除了 IE 8 及更早 IE版本
				    window.addEventListener("beforeunload", nuinit_fun);
				} else if (window.attachEvent) {                  // IE 8 及更早 IE 版本
				    window.attachEvent("onbeforeunload", nuinit_fun);
				};
				
			}
			
			if(statHttp)
			{
				CRVideo._crHttp.startMgr();
			}
			return r
		}catch(e)
		{
		  return CRVideo_WEB_OCX_NOTINSTALLED;
		}
		 
	}
	//回调包装 将json字符转换成json对象
	function __crVideo_CallBack()
	{
		var proxy = this["proxy"];
		if(proxy &amp;&amp; proxy.callback &amp;&amp; typeof(proxy.callback) == "function")
		{
			var numargs = arguments.length;
			var args = [];
			for (i = 0; i &lt; numargs; i++)
			{
			   var arg =  arguments[i]
			   if(arg &amp;&amp; typeof(arg) == 'string')
			   {
				  try
					{
						//console.log(arg);
						var json_arg = JSON.parse(arg);
						var json_type = typeof(json_arg)
						if(json_type == 'object'|| json_type == 'array')
						{
							arg = json_arg
						}					
					}catch(e)
					{
						//console.log(e);
					}
			   }
				args.push(arg);
				
			}
			if(CRVideo.ff)
			{
				setTimeout(proxy.callback.apply(null,args),2000);
			}else
			{
				proxy.callback.apply(null,args);
			}
			
			
		}
	}
	// 注册回调事件
	function __crVideo_RegisterCallBack(obj, name, proxy)
	{
		
		if(CRVideo_Is_ActiveXObject)
		{
			var handler;
			try {
				handler = document.createElement("script");
			} catch(ex) {
				handler = document.createElement('&lt;script>');
			}
			handler.type = "text/javascript"
			var functionName = proxy.name;
			//handler.appendChild(document.createTextNode("function "+obj.id+"::"+name+"(){console.log(arguments.length)}"));
			var funStr = 'try'
						+'\n{'
						+'\n    if('+functionName+'.callback &amp;&amp; typeof('+functionName+'.callback) == "function")'
						+'\n    {'
						+'\n        var numargs = arguments.length;'
						+'\n        var args = [];'
						+'\n        for (i = 0; i &lt; numargs; i++)'
						+'\n        {'
						+'\n           var arg =  arguments[i]'
						+'\n           if(arg &amp;&amp; typeof(arg) == "string")'
						+'\n           {'
						+'\n              try'
						+'\n                {'
						+'\n                    //console.log(arg);'
						+'\n                    var json_arg = JSON.parse(arg);'
						+'\n                    var json_type = typeof(json_arg)'
						+'\n                    if(json_type == "object"|| json_type == "array")'
						+'\n                    {'
						+'\n                        arg = json_arg'
						+'\n                    }'
						+'\n                }catch(e)'
						+'\n                {'
						+'\n                    //console.log(e);'
						+'\n                }'
						+'\n           }'
						+'\n        args.push(arg);'
						+'\n        }'
						+'\n        '+functionName+'.callback.apply(null,args);'
						+'\n    }'
						+'\n}catch(ex)'
						+'\n{'
						+'\n    throw new Error("'+functionName+'("+ex.toString()+")");'
						+'\n}'
			
			handler.appendChild(document.createTextNode("function "+obj.id+"::"+name+"(){\n"+funStr+"\n}"));
			CRVideo._handler.appendChild(handler);
			//window[obj.id+"::"+name] = callbackFun

		}else
		{
			obj[name] = __crVideo_CallBack.bind({"proxy":proxy});
		}
	}
	/**
	 * SDK反初始化
	 * @access public
	 */	
	CRVideo_Uninit = function()
	{
		CRVideo._crSdk.uninit();
	}
	/**
	 * 文件上传的流量控制(SDK默认不开启流控,目前对文件上传控制的功能有：录制文件上传、网盘文件上传。)
	 * @access public
	 * @param {number} maxbps - 每秒上传的最大字节数，小于等于0表示不开启流控
	 */	
	CRVideo_SetFileUploadRate = function(maxbps)
	{
		CRVideo._crSdk.setFileUploadRate(maxbps);
	}
	/**
	 * 获取Plugin版本号
	 * @access public
	 * @returns {string} 返回Plugin版本号
	 */	
	CRVideo_PluginVersion = function()
	{
		return CRVideo._crSdk.Version;
	}
	/**
	 * 获取sdk所在的目录
	 * @access public
	 * @returns {string} 返回sdk所在的目录
	 */	
	CRVideo_SdkPath = function()
	{
		return CRVideo._crSdk.sdkPath;
	}
	/**
	 * 设置服务器地址
	 * @access public
	 * @param {string} serverList -  服务器地址,多个服务器地址使用冒号隔开（如：www.cloudroom.com:8080;183.60.47.52:8080;）;
	 */	
	CRVideo_SetServerAddr = function(serverList)
	{
		CRVideo._crSdk.serverAddr = serverList;
	}
	/**
	 * 获取服务器地址
	 * @access public
	 * @returns {string} 返回服务器地址
	 */	
	CRVideo_GetServerAddr = function()
	{
		return CRVideo._crSdk.serverAddr;
	}







	/**
	 * 登录
	 * 操作成功则回调CRVideo_LoginSuccess,失败则回调CRVideo_LoginFail
	 * @access public
	 * @param {string} authAcnt - 云屋鉴权帐号
	 * @param {string} authPswd - 云屋鉴权密码
	 * @param {string} nickName - 昵称
	 * @param {string} privAcnt - 自定义帐号，不需要时传空字符串
	 * @param {string} privAuthCode -  自定义验证码(有复杂要求的，可以使用json格式)，不需要时传空字符串
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_Login = function(authAcnt,authPswd,nickName,privAcnt,privAuthCode,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(!CRVideo.ie || CRVideo.v == 10.0)
		{
			document.body.appendChild(CRVideo._handler)
		}
		CRVideo._crMgr.login(authAcnt,authPswd,nickName,privAcnt,privAuthCode,cookie);
	}
	/**
	 * 注销本次登陆
	 * @access public
	 */	
	CRVideo_Logout = function()
	{
		if(CRVideo._isinit)
		{
			_containerList = []
			CRVideo._crMgr.logout();
			if(!CRVideo.ie || CRVideo.v == 10.0)
			{
				document.body.removeChild(CRVideo._handler)
			}
		}
		
	}
	/**
	 * 设置免打扰状态。
	 * 操作成功则回调CRVideo_SetDNDStatusSuccess,失败则回调CRVideo_SetDNDStatusFail。
	 * @access public
	 * @param {number} DNDStatus - 0代表关闭免打扰， 其它值代表开启免打扰，含义自由定义
	 * @param {string} cookie -  自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_SetDNDStatus = function(DNDStatus,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.setDNDStatus(DNDStatus,cookie);
	}

	/** 获取用户在线状态,将获取企业下所有用户在线状态（包括呼叫会议状态、免打扰状态）
	 *  操作成功则回调成功事件getUserStatusSuccess  失败则回调getUserStatusFail
	 *  @access public
	 *  @param {number} cookie - 自定义数据(在回调时，回传给调用者)，不需要时传空字符串
	 */	
	 CRVideo_GetUserStatus = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.getUserStatus(cookie);
	}

	/** 开启用户的状态推送
	 *  开启后，企业下所有用户状态有变化时(包括呼叫会议状态、免打扰状态)，都会收到通知
	 *	开启后，用户量越大消息量越大，所以请按需开启
	 *  在startUserStatusNotify前，应该先通过getUserStatus获取所有用户状态
	 *  @access public
	 *  @param {number} cookie - 自定义数据(在回调时，回传给调用者)，不需要时传空字符串
	 */	
	 CRVideo_StartUserStatusNotify = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.startUserStatusNotify(cookie);
	}
	/** 关闭用户的状态推送
	 *  @access public
	 *  @param {number} cookie - 自定义数据(在回调时，回传给调用者)，不需要时传空字符串
	 */	
	 CRVideo_StopUserStatusNotify = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.stopUserStatusNotify(cookie);
	}
	/**
	 * 创建会议
	 * 操作成功则回调CRVideo_CreateMeetingSuccess,失败则回调CRVideo_CreateMeetingFail。
	 * @access public
	 * @param {string} meetSubject - 会议主题（字符长度最大值50）
	 * @param {number} createPswd - 是否创建会议密码（=0时：会议无密码，>0时：密码由系统自动生成）
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_CreateMeeting = function(meetSubject,createPswd,cookie)
	{
		if(createPswd === undefined)
		{
			createPswd = 0;
		}
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.createMeeting(meetSubject,createPswd,cookie);
	}
	/**
	 * 发起呼叫，邀请用户参加视频会话。
	 * 操作成功则回调CRVideo_CallSuccess,失败则回调CRVideo_CallFail。
	 * 呼叫时，对方迟迟不响应，30秒后系统自动结束呼叫。
	 * @access public
	 * @param {string} calledUserID -  被叫用户的账户ID
	 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据(在回调时，回传给调用者)
	 * @returns {string} 返回本次呼叫标识码（呼叫ID）
	 */	
	CRVideo_Call = function(calledUserID,meetObj,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		return CRVideo._crMgr.call(calledUserID,JSON.stringify(meetObj),usrExtDat,cookie);
	}
	/**
	 * 接受对方发起的视频请求，开始进入视频会话
	 * 操作成功则回调CRVideo_AcceptCallSuccess,失败则回调CRVideo_AcceptCallFail。
	 * @access public
	 * @param {string} callID  -  呼叫ID
	 * @param {CRVideo_MeetInfoObj} meetObj - 会议信息
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_AcceptCall = function(callID,meetObj,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		CRVideo._crMgr.acceptCall(callID,JSON.stringify(meetObj),usrExtDat,cookie);
	}
	/**
	 * 拒绝对方的视频请求
	 * 操作成功则回调CRVideo_RejectCallSuccess,失败则回调CRVideo_RejectCallFail。
	 * @access public
	 * @param {string} callID  - 呼叫ID
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_RejectCall = function(callID,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		CRVideo._crMgr.rejectCall(callID,usrExtDat,cookie);
	}
	/**
	 * 挂断正在进行的视频呼叫或视频通话
	 * 操作成功则回调CRVideo_HangupCallSuccess,失败则回调CRVideo_HangupCallFail。
	 * @access public
	 * @param {string} callID  - 呼叫ID
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_HungupCall = function(callID,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		CRVideo._crMgr.hungupCall(callID,usrExtDat,cookie);
	}
	/**
	 * 邀请/取消邀请第三方入会
	 * 操作成功则回调callMorePartyRslt
	 * @access public
	 * @param {string} called  - 被叫用户的账户ID
	 * @param {CRVideo_MeetInfoObj} meetObj 当前会议信息，json结构体请参见MeetInfoObj
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_CallMoreParty = function(called,meetObj,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		return CRVideo._crMgr.callMoreParty(called,JSON.stringify(meetObj),usrExtDat,cookie);
	}
	/**
	 * 功能 取消第3方呼叫
	 * 操作成功则回调数 CRVideo_CancelCallMorePartyRslt
	 * @access public
	 * @param {string} inviteID  - 邀请标识码，邀请ID
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_CancelCallMoreParty= function(inviteID,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined)
		{
			usrExtDat = "";
		}
		CRVideo._crMgr.cancelCallMoreParty(inviteID,usrExtDat,cookie);
	}
	/**
	 * 发送小块数据(一次性发送不会有进度通知,发送结果事件CRVideo_SendCmdRlst,CRVideo_SendCmd不能被CRVideo_CancelSend)
	 * @access public
	 * @param {string} targetUserId  - 目标用户ID
	 * @param {string} data - 发送的数据
	 * @returns {string} 分配的任务ID
	 */	
	CRVideo_SendCmd = function(targetUserId,data)
	{
		return CRVideo._crMgr.sendCmd(targetUserId,data);
	}
	/**
	 * 发送大块数据(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendBufferRlst,取消发送CRVideo_CancelSend)
	 * @access public
	 * @param {string} targetUserId  - 目标用户ID
	 * @param {string} data - 发送的数据
	 * @returns {string} 分配的任务ID
	 */	
	CRVideo_SendBuffer = function(targetUserId,data)
	{
		return CRVideo._crMgr.sendBuffer(targetUserId,data);
	}
	/**
	 * 发送文件(分块发送，进度通知事件CRVideo_SendProgress,发送结果事件CRVideo_SendFileRlst,取消发送CRVideo_CancelSend)
	 * @access public
	 * @param {string} targetUserId  - 目标用户ID
	 * @param {string} fileName - 需要发送的文件名 
	 * @returns {string} 分配的任务ID
	 */	
	CRVideo_SendFile = function(targetUserId,data)
	{
		return CRVideo._crMgr.sendBuffer(targetUserId,data);
	}
	/**
	 * 取消数据发送
	 * 操作完成则回调CRVideo_CancelSendRlst。
	 * @access public
	 * @param {string} taskID - 任务ID
	 */	
	CRVideo_CancelSend = function(targetUserId)
	{
		return CRVideo._crMgr.cancelSend(targetUserId);
	}
	/**
	 * 取消数据发送
	 * 操作完成则回调CRVideo_CancelSendRlst。
	 * @access public
	 * @param {string} taskID - 任务ID
	 */


	/**
	 * 呼叫成功，双方开始进入本次视频会话
	 * 操作完成则回调CRVideo_EnterMeetingRslt。
	 * @access public
	 * @param {number} meetID  - 视频会话ID
	 * @param {string} pswd - 本次会议中的密码（系统自动生成，在呼叫回调中取得）
	 * @param {string} userID  - 用户id
	 * @param {string} nickName - 昵称
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_EnterMeeting = function(meetID,pswd,userID, nickName,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		
		CRVideo._crMeet.enterMeeting(meetID,pswd,userID,nickName,cookie);
	}
	/**
	 * 判断某个用户是否在会话中
	 * @access public
	 * @param {string} userID - 用户的id
	 * @returns {bool} 如果用户存在则返回true,否则返回false
	 */	
	CRVideo_IsUserInMeeting = function(userID)
	{
		return CRVideo._crMeet.isUserInMeeting(userID);
	}
	/**
	 * 结束会话
	 * 响应事件CRVideo_StopMeetingRslt，会话被他人结束回调事件CRVideo_MeetingStopped
	 * @access public
	 * @param {number} meetID - 会议id
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	
	CRVideo_DestroyMeeting = function(meetID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMeet.destroyMeeting(meetID,cookie);
	}
    /**
	 * 获取会议列表
	 * 响应事件CRVideo_GetMeetingsSuccess，会话被他人结束回调事件CRVideo_GetMeetingsFail
     * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 * @access public
	 */	
	CRVideo_GetMeetings = function(cookie)
	{
        if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crMgr.getMeetings(cookie);
	}
	/**
	 * 离开会话
	 * 他人离开会话的回调事件CRVideo_UserLeftMeeting
	 * @access public
	 */	
	CRVideo_ExitMeeting = function()
	{
		CRVideo._crMeet.exitMeeting();
	}
	/**
	 * @typedef {object} CRVideo_MemberInfo - 成员信息
	 * @property {string} userID - 用户ID
	 * @property {string} nickname - 昵称
	 * @property {CRVideo_ASTATUS} audioStatus - 音频状态,数值参考麦克风状态
	 * @property {CRVideo_VSTATUS} videoStatus - 视频状态,数值参考视频状态定义
	 */
	/**
	 * 获取所有用户的信息
	 * @access public
	 * @return {CRVideo_MemberInfo[]} 返回含多个成员信息
	 */	
	CRVideo_GetAllMembers = function()
	{
		return CRVideo._crMeet.getAllMembers();
	}
	/**
	 * 获取指定用户的信息
	 * @access public
	 * @param {string} userID - 用户ID
	 * @return {CRVideo_MemberInfo} info - 返回用户userID的成员信息

	 */	
	CRVideo_GetMemberInfo = function(userID)
	{
		return CRVideo._crMeet.getMemberInfo(userID);
	}	
	/**
	 * 获取某个用户的昵称
	 * @access public
	 * @param {string} userID	 - 用户ID
	 * @returns {string} 返回用户userID的昵称
	 */	
	CRVideo_GetMemberNickName = function(userID)
	{
		return CRVideo._crMeet.getMemberNickName(userID);
	}


	/**
	 * 获取系统上的麦克风设备列表
	 * @access public
	 * @returns {string[]} 返回麦克风设备字符串列表
	 */	
	CRVideo_GetAudioMicNames = function()
	{
		return CRVideo._crMeet.getAudioMicNames().split("\n");;
	}
	/**
	 * 获取系统上的扬声器设备列表
	 * @access public
	 * @returns {string[]} 返回扬声器设备列表
	 */
	CRVideo_GetAudioSpkNames = function()
	{
		return CRVideo._crMeet.getAudioSpkNames().split("\n");
	}
	/**
	 * @typedef {object} CRVideo_AudioCfg - 音频参数
	 * @property {string} micName - 麦克风设备名称
	 * @property {string} speakerName - 扬声器名称
	 * @property {number} privEC - 是否开启云屋私有回声消息0：不开启；1：开启
	 * @property {number} privAgc - 是否开启云屋私有语音自动增益0：不开启；1：开启
	 */
	 /**
	 * 获取音频参数
	 * @access public
	 * @returns {CRVideo_AudioCfg} 返回cfg对象
	 */
	CRVideo_GetAudioCfg = function()
	{
		return JSON.parse(CRVideo._crMeet.getAudioCfg());
	}
	/**
	 * 系统音频参数设置
	 * @access public
	 * @param {CRVideo_AudioCfg} cfg - 设置参数
	 */
	CRVideo_SetAudioCfg = function(cfg)
	{
		CRVideo._crMeet.setAudioCfg(JSON.stringify(cfg));
	}

	/**
	 * 设置麦克风音量大小
	 * @access public
	 * @param {number} level - 音量等级（ 取值范围：0~255）
	 * @returns {bool} 设置成功则返回true,否则返回false
	 */
	CRVideo_SetMicVolume = function(level)
	{
		return CRVideo._crMeet.micVolume = level;
	}

	/**
	 * 获取麦克风音量
	 * @access public
	 * @returns {number} 返回麦克风音量（0~255）
	 */
	CRVideo_GetMicVolume = function()
	{
		return CRVideo._crMeet.micVolume;
	}
	/**
	 * 设置本地扬声器音量
	 * @access public
	 * @param {number} level - 音量等级（ 取值范围：0~255）
	 * @returns {bool} 设置成功则返回true,否则返回false
	 */
	CRVideo_SetSpeakerVolume = function(value)
	{
		return CRVideo._crMeet.speakerVolume = value;
	}
	/**
	 * 获取本地扬声器音量
	 * @access public
	 * @returns {number} 返回扬声器音量（0~255）
	 */
	CRVideo_GetSpeakerVolume = function()
	{
		return CRVideo._crMeet.speakerVolume;
	}
	/**
	 * 获取用户说话声音大小
	 * @access public
	 * @param {string} userID - 登录成功后分配的userID
	 * @returns {number} 返回音量（0~10）
	 */
	CRVideo_GetMicEnergy = function(userID)
	{
		return CRVideo._crMeet.getMicEnergy(userID);
	}
	/**
	 * 打开自己的麦克风
	 * 打开自已的麦克风时，先会进入到AOPENING状态，等服务器处理后才会进入AOPEN状态，此时说话才能被采集到；
	 * @param {string} userID - 用户的ID
	 * @access public
	 */
	CRVideo_OpenMic = function(userid)
	{
		CRVideo._crMeet.openMic(userid);
	}
	/**
	 * 关闭自己的麦克风
	 * 关麦操作是立即生效的，本地会立即停止采集；
	 * @access public
	 * @param {string} userID - 登录成功后分配的userID
	 */
	CRVideo_CloseMic = function(userid)
	{
		CRVideo._crMeet.closeMic(userid);
	}
	/**
	 * 获取用户的麦状态
	 * 麦克风设备状态
	 * @access public
	 * @param {string} userID - 登录成功后分配的userID
	 * @returns {CRVideo_ASTATUS} 返回麦克风状态
	 */
	CRVideo_GetAudioStatus = function(userID)
	{
		return CRVideo._crMeet.getAudioStatus(userID);
	}
	/**
	 * 关闭所有用户的麦克风
	 * @access public
	 */
	CRVideo_SetAllAudioClose = function()
	{
		CRVideo._crMeet.setAllAudioClose();
	}
	/**
	 * @typedef {object} CRVideo_VideoCfg - 视频参数
	 * @property {CRVideo_VIDEO_WH_RATE} sizeType - 视频尺寸
	 * @property {number} fps - 帧率：视频帧率(5~30)
	 * @property {number} maxbps - 视频码率（1~100*1000*1000）;(未配置则使用内部默认值，请参见VIDEO_SHOW_SIZE)
	 * @property {number} qp_min - 最佳质量(18~51, 越小质量越好) (未配置则使用内部默认值25)
	 * @property {number} qp_max - 最差质量(18~51, 越大质量越差) (未配置则使用内部默认值36)
	 * @property {number} wh_rate - 视频宽高比(0对应16:9,1对应4:3,2对应1:1) (未配置则使用内部默认值0)
     * @property {CRVideo_VIDEO_WH_RATE} wh_rate - 视频宽高比例
	 */
	 /**
	 * 系统视频参数设置
	 * @access public
	 * @param {CRVideo_VideoCfg} cfg - 设置参数
	 */
	CRVideo_SetVideoCfg = function(cfg)
	{
		CRVideo._crMeet.setVideoCfg(JSON.stringify(cfg));
	}
	/**
	 * 开始获取语音pcm数据
	 * @access public
	 * @param {number} aSide - 声道类型 0:麦克风，1:扬声器
	 * @param {number} getType - 获取方式 0:回调方式，1:保存为文件
	 * @param {string} jsonParam - 当getType=0 表示回调方式, jsonParam可配置回调的数据大小(320-32000)，如: {"EachSize":320};当getType=1 表示保存为文件，jsonParam可配置文件名,如: { "FileName" : "e:\\test.pcm" }
	 * @returns {number} 返回值 整形数值，1：正常，0：失败
	 */	
	CRVideo_StartGetAudioPCM = function(aSide,getType,jsonParam)
	{
		return CRVideo._crMeet.startGetAudioPCM(aSide,getType,JSON.stringify(jsonParam));
	}
	/**
	 * 停止获取语音pcm数据
	 * @access public
	 * @param {number} aSide - 声道类型 0:麦克风，1:扬声器
	 * @param 无返回值
	 */
	 CRVideo_StopGetAudioPCM = function(aSide)
	{
		CRVideo._crMeet.stopGetAudioPCM(aSide);
	}
	 /**
	 * 获取视频参数
	 * @access public
	 * @returns {CRVideo_VideoCfg} 返回cfg对象
	 */
	CRVideo_GetVideoCfg = function()
	{
		return JSON.parse(CRVideo._crMeet.getVideoCfg());
	}
	/**
	 * 获取用户的摄像头状态
	 * @access public
	 * @param {string} userID - 用户ID
	 * @returns {CRVideo_VSTATUS} 麦克风摄像头状态
	 */
	CRVideo_GetVideoStatus = function(userID)
	{
		return CRVideo._crMeet.getVideoStatus(userID);
	}

	/**
	 * 打开用户的摄像头，以便本地、远端显示视频图像
	 * @access public
	 * @param {string} userID - 用户ID
	 */
	CRVideo_OpenVideo = function(userID)
	{
		CRVideo._crMeet.openVideo(userID);
	}
	/**
	 * 关闭用户的摄像头
	 * @access public
	 * @param {string} userID - 用户ID
	 */
	CRVideo_CloseVideo = function(userID)
	{
		CRVideo._crMeet.closeVideo(userID);
	}
	/**
	 * @typedef {object} CRVideo_VideoImgObj - 视频参数
	 * @property {number} format - 视频尺寸，请参见：CRVideo_VIDEO_FORMAT
	 * @property {string} dat - 图像数据Base64编码
	 * @property {number} width - 图像宽度
	 * @property {number} height - 图像高度
	 */
	/**
	 * 获取指定用户的最新图像
	 * @access public
	 * @property {string} userID - 用户ID
	 * @property {number} videoID - 设备id
	 * @returns {CRVideo_VideoImgObj} 返回frame视频数据
	 */
	CRVideo_GetVideoImg = function(userID,videoID)
	{
		return CRVideo._crMeet.getVideoImg(userID,videoID);
	}

	 /**
	 * 设置默认的摄像头
	 * @access public
	 * @param {string} userID - 用户ID
	 * @param {number} videoID - 摄像头ID
	 */
	CRVideo_SetDefaultVideo = function(userID,videoID)
	{
		CRVideo._crMeet.setDefaultVideo(userID,videoID);
	}
	/**
	 * 获取指定用户的默认摄像头
	 * 如果用户没有摄像头，返回0；
	 * @access public
	 * @param {string} userID - 用户ID
	 * @returns {number} 返回摄像头ID
	 */
	CRVideo_GetDefaultVideo = function(userID)
	{
		return CRVideo._crMeet.getDefaultVideo(userID);
	}
	/**
	 * 查询用户是否启用多摄像头
	 * @access public
	 * @param {string} userID - 用户ID
	 * @returns {bool} 返回用户是否多摄像头
	 */
	CRVideo_GetEnableMutiVideo = function(userID)
	{
		return CRVideo._crMeet.getEnableMutiVideo(userID);
	}
	/**
	 * 设置用户是否打开多摄像头
	 * @access public
	 * @param {string} userID - 登录成功后分配的userID
	 * @param {bool} enable - 是否打开多摄像头
	 */
	CRVideo_SetEnableMutiVideo = function(userID,enable)
	{
		CRVideo._crMeet.setEnableMutiVideo(userID,enable);
	}
	/**
	 * @typedef {object} CRVideo_VideoDeviceInfo - 视频设备信息
	 * @property {string} userID - 用户ID
	 * @property {string} videoID - 设备id
	 * @property {string} videoName - 设备名称
	 */
	/**
	 * 获取用户所有的摄像头信息
	 * @access public
	 * @returns {CRVideo_VideoDeviceInfo[]} 返回设备列表
	 */
	CRVideo_GetAllVideoInfo = function(userID)
	{
		return JSON.parse(CRVideo._crMeet.getAllVideoInfo(userID));
	}
	/**
	 * @typedef {object} CRVideo_VideoIDsObj - 视频设备对象
	 * @property {string} userID - 用户ID
	 * @property {string} videoID - 设备id
	 */
	/**
	 * 获取会议内所有可观看的摄像头
	 * 只有摄像头打开才能被获取到,能获取到自已的和会议里其他人的；
	 * @access public
	 * @returns {CRVideo_VideoIDsObj[]} 对象VideoIDArray
	 */
	CRVideo_GetWatchableVideos = function()
	{
		return CRVideo._crMeet.getWatchableVideos();
	}
	/**
	 * 暂未定义
	 * @access public
	 * @param {string} picID - 
	 * @param {object} jsonval - 
	 */	
	CRVideo_SetPicResource = function(picID,jsonval)
	{
		CRVideo._crMeet.setPicResource(picID,JSON.stringify(jsonval))
	}
	/**
	 * @typedef {object} CRVideo_ScreenShareCfgObj - 屏幕共享配置对象
	 * @property {number} encodeType - 编码类型,详见屏幕共享的编码类型CRVideo_ENCODE_TYPE
	 * @property {object} catchRect - {"left":xx,"top":xx,"width":xx,"height":xx}用于实现区域共享
	 * @property {number} catchWnd - 共享窗口的窗口句柄，用于实现窗口共享
	 * @property {number} maxFPS - 最大帧率, 缺省为8 (当网络发不动时，帧率会自动下降)
	 * @property {number} maxKbps - 最大码率，缺省800kbps
	 */
	/**
	 * 获取当前屏幕共享配置
	 * @access public
	 * @returns {CRVideo_ScreenShareCfgObj} 屏幕共享配置
	 */	
	CRVideo_GetScreenShareCfg = function()
	{
		return JSON.parse(CRVideo._crMeet.getScreenShareCfg())
	}
	/**
	 * 设置屏幕共享配置
	 * @access public
	 * @param {CRVideo_ScreenShareCfgObj} jsonCfg 屏幕共享配置
	 */	
	CRVideo_SetScreenShareCfg = function(jsonCfg)
	{
		CRVideo._crMeet.setScreenShareCfg(JSON.stringify(jsonCfg))
	}
	/**
	 * 开启屏幕共享
	 * 操作完成则回调CRVideo_StartScreenShareRslt
	 * @access public
	 */	
	CRVideo_StartScreenShare = function()
	{
		CRVideo._crMeet.startScreenShare()
	}
	/**
	 * 停止屏幕共享
	 * @access public
	 */	
	CRVideo_StopScreenShare = function()
	{
		CRVideo._crMeet.stopScreenShare()
	}
	/**
	 * 获取屏幕共享解码图像
	 * @access public
	 * @returns {CRVideo_VideoImgObj} 
	 */	
	CRVideo_GetShareScreenDecodeImg = function()
	{
		return CRVideo._crMeet.getShareScreenDecodeImg()
	}
	/**
	 * 设置自定义的抓屏图像数据
	 * @access public
	 * @param {CRVideo_VIDEO_FORMAT} format - 视频格式
	 * @param {number} width - 图像的宽度
	 * @param {number} heigh - 图像的高度
	 * @param {string} dat - 承载argb数据,base64编码
	 */	
	CRVideo_SetCustomizeScreenImg= function(format,width,heigh,dat)
	{
		return CRVideo._crMeet.getShareScreenDecodeImg(format,width,heigh,dat)
	}
	/**
	 * 赋予控制权限
	 * @access public
	 * @param {string} userID -  用户ID
	 */	
	CRVideo_GiveCtrlRight = function(userID)
	{
		return CRVideo._crMeet.giveCtrlRight(userID)
	}
	/**
	 * 收回控制权限
	 * @access public
	 * @param {string} userID -  用户ID
	 */	
	CRVideo_ReleaseCtrlRight= function(userID)
	{
		return CRVideo._crMeet.releaseCtrlRight(userID)
	}
	/**
	 * 发送鼠标控制消息
	 * @access public
	 * @param {CRVideo_MOUSE_MSG_TYPE} msgType -  鼠标事件类型
	 * @param {CRVideo_MOUSE_KEY_TYPE} mouseMsgType -  鼠标键类型
	 * @param {number} x -  鼠标在屏幕中的横坐标
	 * @param {number} y -  鼠标在屏幕中的纵坐标
	 */	
	CRVideo_SendMouseCtrlMsg= function(msgType,mouseMsgType,x,y)
	{
		return CRVideo._crMeet.sendMouseCtrlMsg(msgType,mouseMsgType,x,y)
	}
	/**
	 * 发送键盘控制消息
	 * @access public
	 * @param {CRVideo_KEY_MSG_TYPE} keyMsgType -  键盘事件类型
	 * @param {number} vk -   键盘虚拟键值
	 * @param {number} bExtendedKey -  
	 */	
	CRVideo_SendKeyCtrlMsg= function(keyMsgType,vk,extendedKey)
	{
		return CRVideo._crMeet.sendKeyCtrlMsg(keyMsgType,vk,extendedKey)
	}
	/**
	 * 开始录制
	 * @access public
	 * @param {string} recordPath - 录像存储的路径
	 * @param {CRVideo_RECORD_AUDIO_TYPE} audioType - 音频类型
	 * @param {number} frameRate - 帧率，建议不要太高；(取值1~24)
	 * @param {number} recordWidth - 视频宽度
	 * @param {number} recordHeight - 视频高度
	 * @param {number} bitRate - 录制的最高码率，当图像变化小时，实际码率会低于此值。建议：640*360: 500000; (500kbps)，1280*720：1000000; (1mbps)，1920*1080: 2000000; (2mbps)
	 * @param {number} defaultQP - 目标质量(推荐:36, 中:28,  高:22)
	 * @param {CRVideo_REC_DATATYPE} recDataType - 录制内容类型（视频+音频）
	 * @param {number} recDataType - 录制内容类型（视频+音频）
	 * @param {number} isUploadOnRecording - 是否录制的同时上传 1为是，0为否
	 */	
	CRVideo_StartRecordIng = function(recordPath,audioType,frameRate,recordWidth,recordHeight,bitRate,defaultQP,recDataType,isUploadOnRecording)
	{
		if(recDataType == undefined)
		{
			recDataType = 3;
		}
		if(isUploadOnRecording == undefined)
		{
			isUploadOnRecording = 0;
		}
		var recordCFG = {};
		recordCFG.filePathName = recordPath;
		recordCFG.audioType = audioType;
		recordCFG.frameRate = frameRate;
		recordCFG.recordWidth = recordWidth
		recordCFG.recordHeight = recordHeight
		recordCFG.bitRate = bitRate;;
		recordCFG.defaultQP = defaultQP;;
		recordCFG.recDataType = recDataType;
		recordCFG.isUploadOnRecording = isUploadOnRecording;
		CRVideo._crMeet.startRecording(JSON.stringify(recordCFG));

	}
	/**
	 * @typedef {object} CRVideo_RecordVideoInfo - 需要录制的视频信息
	 * @property {number} left - 左
	 * @property {number} top - 上
	 * @property {number} width - 宽
	 * @property {number} height - 高
	 * @property {object} param - 附加参数
	 * @property {CRVideo_REC_VCONTENT_TYPE} param.type - 录制类型
     * @property {number} keepAspectRatio - 1、表示内容保持比例居中显示，0、表示内容拉伸
	 * @property {string} param.camid - 用户id.摄像头id,示例中c90d98e2-e50d-4abe-a318-104271a47cb6为用户id，1为摄像头id
	 */
	/**
	 * 设置录制视频 (录制过程中可随时设置，改变录制内容)
	 * @access public
	 * @param {CRVideo_RecordVideoInfo[]} value - 需要录制的视频数组
	 */	
	CRVideo_SetRecordVideos = function(value)
	{

		return CRVideo._crMeet.setRecordVideos(JSON.stringify(value));

	}

	/**
	 * 停止录制
	 * @access public
	 */	
	CRVideo_StopRecord = function()
	{

		return CRVideo._crMeet.stopRecording();

	}
	/**
	 * 获取当前录制的文件大小（以字节为单位）
	 * @access public
	 * @returns {number} 返回录制文件大小（以字节为单位）
	 */	
	CRVideo_GetRecFileSize = function()
	{

		return CRVideo._crMeet.getRecFileSize();

	}
	/**
	 * 获取录制的文件时长（以秒为单位）
	 * @access public
	 * @returns {number} 返回录制的文件时长（以秒为单位）
	 */	
	CRVideo_GetRecDuration = function()
	{

		return CRVideo._crMeet.getRecDuration();

	}
	/**
	 * 设置本地生成的录制文件是否加密
	 * @access public
	 * @param {number} encrypt - 1表示加密 0表示不加密
	 */	
	CRVideo_SetRecordFileEncrypt  = function(encrypt)
	{
		CRVideo._crMeet.setRecordFileEncrypt(encrypt)
	}
	/**
	 * @typedef {object} CRVideo_RecordFileInfo - 录制文件信息
	 * @property {string} fileName - 文件名，全路径
	 * @property {number} state - 0 没有上传，1上传中，2 上传完毕
	 * @property {number} uploadPercent - 上传进度，state为1时关注此字段
	 */
	/**
	 * 取得所有录制文件信息
	 * @access public
	 * @return {CRVideo_RecordFileInfo[]} - 返回含多个录制文件信息
	 */	
	CRVideo_GetAllRecordFiles = function()
	{
		return JSON.parse(CRVideo._crMeet.getAllRecordFiles());	
	}
	/**
	 * @typedef {object} CRVideo_AddFileToRecordMgr - 添加本地文件到录制文件管理中
	 * @property {string} fileName - 文件名，不含路径
	 * @property {string} filePath - 文件路径，不含文件名
	 */
	/**
	 * 第三方录制文件调用此接口后可进行本地回放和上传到服务器record下
	 * @access public
	 * @return {CRVideo_AddFileToRecordMgr[]} - -1：本地文件不存在，0：成功，1：文件已经被添加过
	 */	
	CRVideo_AddFileToRecordMgr = function(fileName,filePath)
	{
		return JSON.parse(CRVideo._crMeet.addFileToRecordMgr(fileName,filePath));	
	}
	/**
	 * 删除本地的录制文件，上传中的文件会被取消上传
	 * @access public
	 * @param {string} filename - 文件名，全路径
	 */	
	CRVideo_RemoveFromFileMgr = function(filename)
	{
		CRVideo._crMeet.removeFromFileMgr(filename);	
	}
	/**
	 * @typedef {object} CRVideo_RecordUploadCfg - 上传配置参数
	 * @property {number} type - 0:云屋网盘(默认), 1:http
	 * @property {string} speakerName - 上传地址
	 */
	/**
	 * 上传录像文件
	 * @access public
	 * @param {CRVideo_RecordUploadCfg} jsonCfg - 上传配置参数
	 */	
	CRVideo_SetRecordUploadCfg = function(jsonCfg)
	{
		CRVideo._crMeet.setRecordUploadCfg(JSON.stringify(jsonCfg));
	}												 
	/**
	 * 上传文件在默认位置
	 * @access public			 
	 * @param {string} filename - 文件名，全路径
	 */	
	CRVideo_UploadRecordFile = function(fileName)
	{
		CRVideo._crMeet.uploadRecordFile(fileName);
	}
	/**
	 * 上传文件到服务器指定位置
	 * @access public			 
	 * @param {string} filename - 文件名，全路径
	 * @param {string} svrPathFileName - 服务器路径文件名
	 */	
	CRVideo_UploadRecordFile2 = function(fileName,svrPathFileName)
	{
		CRVideo._crMeet.uploadRecordFile2(fileName,svrPathFileName);
	}

	/**
	 * 取消上传录像文件
	 * @access public
	 * @param {string} filename - 文件名，全路径
	 */	
	CRVideo_CancelUploadRecordFile = function(fileName)
	{
		CRVideo._crMeet.cancelUploadRecordFile(fileName);
	}

	/**
	 * 回放录制文件
	 * @access public
	 * @param {number} filename - 文件名，全路径
	 */	
	CRVideo_PlaybackRecordFile  = function(filename)
	{
		CRVideo._crMeet.playbackRecordFile(filename)
	}
	/**
	 * 发送IM消息
	 * 响应事件CRVideo_SendIMmsgRlst
	 * @access public
	 * @param {string} text - 发送的文本消息
	 * @param {string} UserID - 目标用户，如果用户ID为空，消息发送给会议内所有用户 
	 * @param {string} cookie - 自定义用户数据
	 * @returns {string} - 任务id 
	 */	
	CRVideo_SendIMmsg = function(text,UserID,cookie)
	{
		if(cookie == undefined){
			cookie = "";
		}
		return CRVideo._crMeet.sendIMmsg(text,UserID,cookie);	
	}
	/**
	 * 功能切换
	 * @access public
	 * @param {number} mainPage -功能类型
	 * @param {string} pageID - 子页面标识（如创建白板时返回的boardID）
	 */
	CRVideo_Switchtopage = function(mainPage,pageID)
	{
		CRVideo._crMeet.switchToPage(mainPage,pageID)
	}
	/**
	 * 获取当前主功能区
	 * @access public
	 * @returns {CRVideo_MAIN_PAGE_TYPE} 功能区
	 */
	CRVideo_Getcurrentmainpage = function()
	{
		return CRVideo._crMeet.getCurrentMainPage()
	}
	/**
	 * 获取当前子功能区
	 * @access public
	 * @returns {CRVideo_SubPage} jsonSubPage - 子功能区信息
	 */
	CRVideo_Getcurrentsubpage = function()
	{
		return CRVideo._crMeet.getCurrentSubPage()
	}
	/**
	 * 设置视频墙分屏模式
	 * @access public
	 * @param {CRVideo_VIDEOLAYOUTMODE} videoWallMode - 分屏模式
	 */
	CRVideo_Setvideowallmode = function(videoWallMode)
	{
		CRVideo._crMeet.setVideoWallMode(JSON.stringify(videoWallMode))
	}
	/**
	 * 获取视频墙当前分屏模式
	 * @access public
	 * @returns {CRVideo_VIDEOLAYOUTMODE} videoWallMode - 分屏模式
	 */
	CRVideo_GetVideoWallMode = function()
	{
		return CRVideo._crMeet.getVideoWallMode()
	}
	/**
	 * 创建白板 其他参会者会收到：notifyCreateBoard事件;同时后台会记录下白板数据，新入会者会收到：notifyInitBoards事件.注意：创建完白板后，一定要及尽快调用initBoardPageDat初始化各页数据
	 * @param {string} title -白板名称
	 * @param {number} width - 白板宽度
	 * @param {number} height - 白板高度
	 * @param {number} pageCount - 白板内有多个页（一般空白板1页，文档白板为实际页数）
	 * @returns {CRVideo_SubPage} - 白板信息
	 */
	CRVideo_Createboard = function(title,width,height,pageCount)
	{
		return CRVideo._crMeet.createBoard(title,width,height,pageCount)
	}
	/**
	 * 初始化白板指定页数据 1. 关于imgID:imgID非空时, 代表背景的图片ID(建议为uuid)。（对应的文件应通uploadNetDiskFile(imgID, 本地文件名)上传到服务器；）2.其他参会者将收到notifyInitBoardPageDat事件；3.后台会记录下白板的页数据，在新用户入会时，也会收到notifyInitBoardPageDat事件
	 * @access public
	 * @param {string} boardID - 白板标识
	 * @param {number} boardPageNo - 白板第几页（0:代表第一页）
	 * @param {string} imgID - 白板的背景图片标识(空代表无背影图)
	 * @param {string} elemets - 白板的初始图元（空代表无图元，一般在导入历史文件才用到）
	 */
	CRVideo_InitBoardPageDat = function(boardID,boardPageNo,imgID,elemets)
	{
		CRVideo._crMeet.initBoardPageDat(boardID,boardPageNo,imgID,elemets)
	}
	/**
	 * 关闭白板 其他参会者将收到notifyCloseBoard事件；同时后台会移除对应白板的所有信息；
	 * @access public
	 * @param {string} boardID - 白板标识
	 */
	CRVideo_Closeboard = function(boardID)
	{
		CRVideo._crMeet.closeBoard(boardID)
	}
	/**
	 * 创建一个符合云层要求的图元id 说明：本地操作;所有白板图元id，必须由此接口创建；（历史文件存储的图元id，在会议内不能再使用，应重新创建）
	 * @access public
	 * @returns {string} 图元id
	 */
	CRVideo_CreateElementID = function()
	{
		CRVideo._crMeet.createElementID()
	}
	/**
	 * 添加图元信息 说明：其他参会者会收到：notifyAddBoardElement事件;同时后台会保存图元，新入会者会在notifyInitBoardPageDat中得到这些图元
	 * @access public
	 * @param {string} boardID - 白板标识
	 * @param {number} boardPageNo - 白板的页序号(0为第一页)
	 * @param {string} element - 图元信息，参见json格式之BoardElementObj
	 * @returns {string} elementID图元标识
	 */
	CRVideo_Addboardelement = function(boardID,boardPageNo,element)
	{
		return CRVideo._crMeet.addBoardElement(boardID,boardPageNo,JSON.stringify(element))
	}
	/**
	 * 修改图元信息 说明：其他参会者会收到：notifyModifyBoardElement事件;同时后台会覆盖对应图元的数据，新入会者会在notifyInitBoardPageDat中得到这些图元
	 * @access public
	 * @param {string} boardID - 白板标识
	 * @param {number} boardPageNo - 白板的页序号(0为第一页)
	 * @param {string} element - 图元信息，参见json格式之BoardElementObj
	 * @returns {string} elementID图元标识
	 */
	CRVideo_ModifyBoardElement = function(boardID,boardPageNo,element)
	{
		CRVideo._crMeet.modifyBoardElement(boardID,boardPageNo,JSON.stringify(element))
	}
	/**
	 * 删除图元 说明：其他参会者会收到：notifyDelBoardElement事件;同时后台会移除这些图元，新入会者会在notifyInitBoardPageDat中将不包含这些图元
	 * @access public
	 * @param {string} boardID - 白板标识
	 * @param {number} boardPageNo - 白板的页序号(0为第一页)
	 * @param {string} elementIDs - 图元id列表，多值时，以“;”分隔，如：“id1;id2”
	 */
	CRVideo_Delboardelement = function(boardID,boardPageNo,elementIDs)
	{
		CRVideo._crMeet.delBoardElement(boardID,boardPageNo,JSON.stringify(elementIDs))
	}
	/**
	 * 设置鼠标热点消息
	 * @access public
	 * @param {string} boardID - 白板标识       
	 * @param {number} boardPageNo - 白板的页序号(0为第一页)
	 * @param {number} x - 屏幕横坐标
	 * @param {number} y - 屏幕纵坐标
	 */
	CRVideo_Setmousehotspot = function(boardID,boardPageNo,x,y)
	{
		CRVideo._crMeet.setMouseHotSpot(boardID,boardPageNo,x,y)
	}
	/**
	 * 获取会议网盘的容量信息 说明：调用结果请见事件getNetDiskSummaryRslt
	 * @access public
	 */
	CRVideo_GetNetDiskSummary = function()
	{
		CRVideo._crMeet.getNetDiskSummary()
	}
	/**
	 * 获取网盘用户共享文件列表，即使用makeNetDiskFileID中参数fileType为0的生成的fileID上传的文件
	 * @access public
	 */
	CRVideo_GetNetDiskFileList = function()
	{
		CRVideo._crMeet.getNetDiskFileList()
	}
	/**
	 * 生成网盘文件全局唯一ID
	 * @access public
	 * @param {number} fileType - 文件类型，0:用户共享文件，1:程序使用文件
	 * @param {string} newFileName - 传入的全局唯一文件名，建议带文件后缀
	 * 说明：1.fileType等于0时，为会议网盘共享文件，上传的文件可通过;
	 * 		 2.getNetDiskFileList获取到文件列表详情
	 * 		 3.fileType等于1时，用户程序内资源文件，如白板的背景图片，无法获取文件详情
	 * 		 4.两种文件类型都要调用uploadNetDiskFile和downloadNetDiskFile进行上传和下载
	 */
	CRVideo_MakeNetDiskFileID = function(fileType,newFileName)
	{
		return CRVideo._crMeet.makeNetDiskFileID(fileType,newFileName)
	}
	/**
	 * 上传文件到网盘
	 * @access public
	 * @param {string} fileID - 网盘文件ID
	 * @param {string} localFilePath - 本地文件路径,含文件名
	 */
	CRVideo_Uploadnetdiskfile = function(fileID,localFilePath)
	{
		CRVideo._crMeet.uploadNetDiskFile(fileID,localFilePath)
	}
	/**
	 * 设置网盘文件传输暂停或继续
	 * @access public
	 * @param {string} fileID - 网盘文件ID
	 * @param {bool} bTranPause - 是否暂停
	 */
	CRVideo_SetNetDiskTransportPause = function(fileID,bTranPause)
	{
		CRVideo._crMeet.setNetDiskTransportPause(fileID,bTranPause)
	}
	/**
	 * 从网盘中下载文件
	 * @access public
	 * @param {string} fileID - 网盘文件ID
	 * @param {string} localFilePath - 本地文件路径，全路径
	 */
	CRVideo_Downloadnetdiskfile = function(fileID,localFilePath)
	{
		CRVideo._crMeet.downloadNetDiskFile(fileID,localFilePath)
	}
	/**
	 * 取消网盘文件操作（上传/下载）
	 * @access public
	 * @param {string} fileID - 网盘文件ID
	 */
	CRVideo_Canclenetdiskfile = function(fileID)
	{
		CRVideo._crMeet.cancleNetDiskFile(fileID)
	}
	/**
	 * 删除网盘文件
	 * @access public
	 * @param {string} fileID - 网盘文件ID
	 */
	CRVideo_Deletenetdiskfile = function(fileID)
	{
		CRVideo._crMeet.deleteNetDiskFile(fileID)
	}
	/**
	 * 配置远程影音共享时，图像质量参数
	 * @access public
	 * @param {string} jsonCfg - json格式的字符串，详见VideoCfgOjb说明
	 */
	CRVideo_SetMediacfg = function(jsonCfg)
	{
		return CRVideo._crMeet.setMediaCfg(JSON.stringify(jsonCfg))
	}
	/**
	 * 暂无描述
	 * @access public
	 * @returns {string}
	 */
	CRVideo_GetMediacfg = function()
	{
		return CRVideo._crMeet.getMediaCfg()
	}
	/**
	 * 开始播放影音
	 * @access public
	 * 响应事件 如果播放成功，请关注通知事件notifyMediaOpened 如果播放失败，请关注通知事件notifyMediaStop
	 * @param {string} filename  - 文件名，全路径
	 * @param {number} locPlay  - 是否仅仅本地播放（1:本地播放，0：会议内播放）
	 * @param {number} bPauseWhenFinished  - 是否播放完毕自动暂停在最后一帧
	 */
	CRVideo_StartPlayMedia = function(filename,locPlay,bPauseWhenFinished)
	{
		if(bPauseWhenFinished == undefined)
		{
			bPauseWhenFinished = 0
		}
		if(locPlay == undefined)
		{
			locPlay = 0
		}
		CRVideo._crMeet.startPlayMedia(filename,locPlay,bPauseWhenFinished)
	}
	/**
	 * 停止播放影音
	 * @access public
	 */	
	CRVideo_StopPlayMedia = function()
	{
		CRVideo._crMeet.stopPlayMedia()
	}
	/**
	 * 暂停或恢复播放影音
	 * @access public
	 * @param {bool} bPause - ture为暂停，false为恢复
	 */	
	CRVideo_PausePlayMedia = function(bPause)
	{
		CRVideo._crMeet.pausePlayMedia(bPause)
	}
	/**
	 * 设置播放进度
	 * @access public
	 * @param {number} pos - 设置播放位置，单位：秒
	 */
	CRVideo_SetMediaplaypos = function(pos)
	{
		CRVideo._crMeet.setMediaPlayPos(pos)
	}
	/**
	 * @typedef {object} CRVideo_MediaInfoObj - 影音文件信息
	 * @property {string} userID - 用户id
	 * @property {number} state - 播放状态 0:播放 1:暂停 2:未播放
	 * @property {string} mediaName - 影音文件名
	 */
	/**
	 * 取得影音文件信息
	 * @access public
	 * @param {string} userID - 用户id
	 * @returns {CRVideo_MediaInfoObj} - 影音文件信息
	 */
	CRVideo_Getmediainfo = function(userID)
	{
		return CRVideo._crMeet.getMediaInfo(userID)
	}
	/**
	 * 取得影音帧信息
	 * @access public
	 * @param {string} userID - 用户id
	 * @returns {CRVideo_VideoImgObj} - 帧信息
	 */
	CRVideo_Getmediaimg = function(userID)
	{
		return CRVideo._crMeet.getMediaImg(userID)
	}
	/**
	 * 取得播放路径下的所有可播放文件
	 * @access public
	 * @return {string[]} - 文件名列表；
	 */	
	CRVideo_GetAllFilesInMediaPath  = function()
	{
		return CRVideo._crMeet.getAllFilesInMediaPath().split("\n");
	}
    /**
	 * 2方通话时呼叫第3方 结果事件CRVideo_ClientInviteRslt，根据sdkErr判断是否成功
	 * @access public
	 * @param {string} called  - 被叫用户的账户ID
	 * @param {CRVideo_MeetInfoObj} meetObj - 当前会议信息(json结构体请参见MeetInfoObj)
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
     * @return {string} - 本次邀请标识码（邀请ID）
	 */	

	// CRVideo_ClientInvite  = function(called,meetObj,cookie)
	// {
 //        if(cookie === undefined)
	// 	{
	// 		cookie = "";
	// 	}
	// 	return CRVideo._crMeet.clientInvite(called,JSON.stringify(meetObj),cookie);
	// }
	 /**
	 * 取消第3方呼叫 结果事件clientCancelInviteRslt，根据sdkErr判断是否成功
	 * @access public
	 * @param {string} inviteID  - 邀请标识码（邀请ID
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */	

	// CRVideo_ClientCancelInvite  = function(inviteID,cookie)
	// {
 //        if(cookie === undefined)
	// 	{
	// 		cookie = "";
	// 	}
	// 	CRVideo._crMeet.clientCancelInvite(inviteID,cookie);
	// }
	/**
	 * 设置当前哪个用户为主视频
	 * @access public
	 * @param {string} userID - 用户ID
	 */
	CRVideo_SetMainVideo = function(userID)
	{
	    CRVideo._crMeet.mainVideo = userID;
	}
	/**
	 * 获取当前哪个用户为主视频
	 * @access public
	 */
	CRVideo_GetMainVideo = function()
	{
	    return CRVideo._crMeet.mainVideo;
	}
	//----------------------------------------
	//
	//排队接口
	//
	//---------------------------------------
	/**
	 * 初始化用户队列功能数据。
	 * 操作完成回调CRVideo_InitQueueDatRslt，初始化成功后才可获取队列队列相关信息。
	 * @access public
	 * @param {string} cookie -自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_InitQueueDat = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.initQueueDat(cookie);
	}
	/**
	 * 刷新所有队列状态信息。
	 * 操作完成则触发CRVideo_QueueStatusChanged（当前排队的队列，或服务的队列，sdk自动有状态变化回调； 其它队列则需要此函数来查询）。
	 * @access public
	 */
	CRVideo_RefreshAllQueueStatus = function()
	{
		CRVideo._crQueue.refreshAllQueueStatus();
	}
	/**
	 * @typedef {object} CRVideo_QueueInfo - 队列信息
	 * @property {string} queID - 队列ID
	 * @property {string} name - 队列名称
	 * @property {string} desc - 队列描述
	 * @property {number} prio - 优先级，值越小优先级越高
	 */
	/**
	 * 获取所有队列信息
	 * @access public
	 * @returns {CRVideo_QueueInfo[]} 返回所有队列信息
	 */
	CRVideo_GetAllQueueInfo = function()
	{
		return JSON.parse(CRVideo._crQueue.getAllQueueInfo());
	}
	/**
	 * 获取队列状态
	 * @access public
	 * @param {string} queID  - 队列ID
	 * @returns {CRVideo_QueueInfo} 返回队列信息
	 */
	CRVideo_GetQueueStatus = function(queId)
	{
		return JSON.parse(CRVideo._crQueue.getQueueStatus(queId));
	}
	/**
	 * @typedef {object} CRVideo_QueuingInfo - 排队信息
	 * @property {string} queID - 队列ID 我排的队列(-1:代表我没有排队；-2:代表我正在会话中,通过GetSessionInfo可获取相关信息)
	 * @property {string} position - 我的位置
	 * @property {string} queuingTime - 我排队的时长(单位s)
	 */
	/**
	 * 获取我的排队信息
	 * @access public
	 * @returns {CRVideo_QueuingInfo} 返回排队信息
	 */
	CRVideo_GetQueuingInfo = function()
	{
		return JSON.parse(CRVideo._crQueue.getQueuingInfo());
	}
	/**
	 * 获取我服务的所有队列
	 * @access public
	 * @returns {string[]} 返回我服务的队列列表
	 */
	CRVideo_GetServingQueues = function()
	{
		return CRVideo._crQueue.getServingQueues().split("\n");;
	}
	/**
	 * @typedef {object} CRVideo_SessionInfo - 排队信息
	 * @property {string} callID - 会话的呼叫ID
	 * @property {string} peerID - 会话的目标用户ID
	 * @property {string} peerName - 会话的目标用户昵称
	 * @property {number} bCallAccepted - 呼叫是否被对方接受 0:暂未接受，1:已接受
	 * @property {number} meetingID - 呼叫接受后，分配的会议ID
	 * @property {string} meetingPswd - 会议密码
	 * @property {number} duration - 会议持续的时长(单位s)
	 */
	/**
	 * 获取我的会话信息
	 * @access public
	 * @returns {CRVideo_SessionInfo} info - 返回会话信息

	 */
	CRVideo_GetSessionInfo = function()
	{
		return JSON.parse(CRVideo._crQueue.getSessionInfo());
	}
	/**
	 * 客户开始排队
	 * 操作完成回调CRVideo_StartQueuingRslt
	 * @access public
	 * @param {string} queID  - queID 队列ID
	 * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_StartQueuing = function(queID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.startQueuing(queID,cookie);
	}
	/**
	 * 客户开始排队
	 * 操作完成回调CRVideo_StartQueuingRslt
	 * @access public
	 * @param {number} queID  - queID 队列ID
	 * @param {string} usrExtDat - 自定义扩展参数
	 * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_StartQueuing2 = function(queID,usrExtDat,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		if(usrExtDat === undefined){
			usrExtDat = "";
		}
		CRVideo._crQueue.startQueuing2(queID,usrExtDat,cookie);
	}
	/**
	 * 客户停止排队
	 * 操作完成回调CRVideo_StopQueuingRslt
	 * @access public
	 * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_StopQueuing = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.stopQueuing(cookie);
	}
	/**
	 * 开始服务某个队列(可以多次调用，开启对多个队列的服务) 
	 * 操作回调CRVideo_StartServiceRslt
	 * 开启成功后：
	 * a. 如果没有开启免打挽，那么系统会自动分配客户：VideoCall_Queue_CallBack::autoAssignUser；
	 * b. 如果开启免打挽，系统就不会分配客户，如需服务客户可调用：reqAssignUser。
	 * @access public
	 * @param {string} queID  - 队列ID
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_StartService = function(queID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.startService(queID,cookie);
	}
	/**
	 * 停止服务某个队列
	 * 操作完成回调CRVideo_StopServiceRslt
	 * @access public
	 * @param {string} queID  - queID 队列ID
	 * @param {string} cookie - cookie自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_StopService = function(queID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.stopService(queID,cookie);
	}
	/**
	 * 接受系统安排的客户
	 * @access public
	 * @param {string} queID  - 队列ID
	 * @param {string} userID - 队列中的用户ID
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_AcceptAssignUser = function(queID,userID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.acceptAssignUser(queID,userID,cookie);
	}
	/**
	 * 拒绝系统安排的客户
	 * @access public
	 * @param {string} queID  - 队列ID
	 * @param {string} userID - 队列中的用户ID
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_RejectAssignUser = function(queID,userID,cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.rejectAssignUser(queID,userID,cookie);
	}
	/**
	 * 请求分配一个客户
	 * 当关闭免打扰时，系统将自动分配客户，无需调用此函数；
	 * 当开启免打扰时，系统不再自动分配客户，座席如需服务客户可使用此函数分配；
	 * @access public
	 * @param {string} cookie - 自定义数据 (在回调时，回传给调用者)
	 */
	CRVideo_ReqAssignUser = function(cookie)
	{
		if(cookie === undefined)
		{
			cookie = "";
		}
		CRVideo._crQueue.reqAssignUser(cookie);
	}
	//----------------------------
	//
	//http上传下载管理
	//
	//-------------------------------------------
	/**
	 * @typedef {object} CRVideo_FileInfo - 排队信息(params详细说明：decodeCREEFile：取值0或1。此参数仅上传有效，为0时上传原始文件，为1时上传解密的文件)
	 * @property {number} bUploadType - 传输类型，0:下载类型，1:上传类型
	 * @property {string} filePathName - 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”)
	 * @property {string} fileVersion - 文件版本（可以填版本号，也可以md5，也可以为空）
	 * @property {string} httpUrl - 目标URL
	 * @property {object} params - 特殊参数，字典数据。
	 * @property {number} fileSize - 文件大小
	 * @property {number} finishedSize - 已传输大小
	 * @property {CRVideo_HTTP_TRANSFER_STAT} state - 文件传输状态，详见：HTTP_TRANSFER_STATE
	 */
	/**
	 * 获取本地所有上传、下载文件信息
	 * @access public
	 * @returns {CRVideo_FileInfo[]} filelist - 返回文件信息列表
	 */	
	CRVideo_GetAllTransferInfos = function()
	{
		return JSON.parse(CRVideo._crHttp.getAllTransferInfos());
	}
	/**
	 * 获取本地上传、下载文件信息
	 * @access public
	 * @property {string} filePathName - 本地完整路径文件名(路径中要求有“CloudroomVideoSDK”)
	 * @returns {CRVideo_FileInfo} fileinfo - 返回文件信息
	 */	
	CRVideo_GetTransferInfo = function(filePathName)
	{
		return JSON.parse(CRVideo._crHttp.getTransferInfo(filePathName));
	}
	/**
	 * 开始下载/上传文件
	 * @access public
	 * @property {CRVideo_FileInfo} fileinfo - 格式的文件信息
	 */	
	CRVideo_StartTransferFile = function(fileinfo)
	{
		CRVideo._crHttp.startTransferFile(JSON.stringify(fileinfo));
	}
	/**
	 * 取消传输，取消时，只是停止了传输任务，不清理记录及断点文件。
	 * @access public
	 * @property {string} fileName - 本地路径文件名
	 */	
	CRVideo_CancelFileTransfer = function(fileName)
	{
		CRVideo._crHttp.cancelFileTransfer(fileName);
	}
	/**
	 * 删除传输记录及相关文件
	 * @access public
	 * @property {string} fileName - 本地路径文件名
	 * @property {number} bRemoveLocFile - 是否移除本地文件,为1时， 那么上传的源始文件、下载的临时文件或结果文件都将被移除。
	 */	
	CRVideo_RmTransferInfo = function(fileName,bRemoveLocFile)
	{
		CRVideo._crHttp.rmTransferInfo(fileName,bRemoveLocFile);
	}
    
    //----------------------------
	//
	//
	//
	//-------------------------------------------

	//----------------------------
	//
	//
	//
	//-------------------------------------------


	/**
	 * 创建video对象
	 * @access public
	 */	
	CRVideo_CreatVideoObj = function()
	{
		var handler;
		if(CRVideo_Is_ActiveXObject)
		{
			if(CRVideo.ie &amp;&amp; CRVideo.v == 8.0)
			{
				handler  =  document.createElement("&lt;object classid=\"clsid:8A6BBBDC-C6BE-4a47-92F3-F9581C3FB95E\" >&lt;/object>")
			}else
			{
				handler  =  document.createElement("object")
				handler.classid="clsid:8A6BBBDC-C6BE-4a47-92F3-F9581C3FB95E";
			}
		}else
		{
			handler  =  document.createElement("object")
			handler.type = "application/x-cloudroom-videoui"
		}
		
		var video = new CRVideo.VideoContainer();
		video.handler(handler)
		return video;
	}
	/**
	 * 创建media对象
	 * @access public
	 */	
	CRVideo_CreatMediaObj = function()
	{
		var handler;
		if(CRVideo_Is_ActiveXObject)
		{
			if(CRVideo.ie &amp;&amp; CRVideo.v == 8.0)
			{
				handler  =  document.createElement("&lt;object classid=\"clsid:93A618D5-2535-42d0-B72B-95705263F398\" >&lt;/object>")
			}else
			{
				handler  =  document.createElement("object")
				handler.classid="clsid:93A618D5-2535-42d0-B72B-95705263F398";
			}
			
		}else
		{
			handler  =  document.createElement("object")
			handler.type = "application/x-cloudroom-mediaui"
		}

		var media = new CRVideo.MediaContainer();
		media.handler(handler)
		return media;
	}
	/**
	 * 创建screenShare对象
	 * @access public
	 */
	CRVideo_CreatScreenShareObj = function() {
		var handler;
		if(CRVideo_Is_ActiveXObject) {
			if(CRVideo.ie &amp;&amp; CRVideo.v == 8.0) {
				handler = document.createElement("&lt;object classid=\"clsid:6FF142C5-8A36-49d7-B627-D60B803550FC\" >&lt;/object>")
			} else {
				handler = document.createElement("object");
				handler.classid = "clsid:6FF142C5-8A36-49d7-B627-D60B803550FC";
			}
		} else {
			handler = document.createElement("object");
			handler.type = "application/x-cloudroom-screenshareui"
		}

		var screenShare = new CRVideo.ScreenShareContainer();
		screenShare.handler(handler);
		return screenShare;
	}
}
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-cr_callback.html">cr/callback</a></li><li><a href="module-cr_error.html">cr/error</a></li></ul><h3>Classes</h3><ul><li><a href="CRVideo.CbProxy.html">CbProxy</a></li><li><a href="CRVideo.Container.html">Container</a></li><li><a href="CRVideo.MediaContainer.html">MediaContainer</a></li><li><a href="CRVideo.ScreenShareContainer.html">ScreenShareContainer</a></li><li><a href="CRVideo.VideoContainer.html">VideoContainer</a></li></ul><h3>Global</h3><ul><li><a href="global.html#CRVideo">CRVideo</a></li><li><a href="global.html#CRVideo_AcceptAssignUser">CRVideo_AcceptAssignUser</a></li><li><a href="global.html#CRVideo_AcceptCall">CRVideo_AcceptCall</a></li><li><a href="global.html#CRVideo_Addboardelement">CRVideo_Addboardelement</a></li><li><a href="global.html#CRVideo_AddFileToRecordMgr">CRVideo_AddFileToRecordMgr</a></li><li><a href="global.html#CRVideo_ASTATUS">CRVideo_ASTATUS</a></li><li><a href="global.html#CRVideo_Call">CRVideo_Call</a></li><li><a href="global.html#CRVideo_CallMoreParty">CRVideo_CallMoreParty</a></li><li><a href="global.html#CRVideo_CancelCallMoreParty">CRVideo_CancelCallMoreParty</a></li><li><a href="global.html#CRVideo_CancelFileTransfer">CRVideo_CancelFileTransfer</a></li><li><a href="global.html#CRVideo_CancelSend">CRVideo_CancelSend</a></li><li><a href="global.html#CRVideo_CancelUploadRecordFile">CRVideo_CancelUploadRecordFile</a></li><li><a href="global.html#CRVideo_Canclenetdiskfile">CRVideo_Canclenetdiskfile</a></li><li><a href="global.html#CRVideo_Closeboard">CRVideo_Closeboard</a></li><li><a href="global.html#CRVideo_CloseMic">CRVideo_CloseMic</a></li><li><a href="global.html#CRVideo_CloseVideo">CRVideo_CloseVideo</a></li><li><a href="global.html#CRVideo_Createboard">CRVideo_Createboard</a></li><li><a href="global.html#CRVideo_CreateElementID">CRVideo_CreateElementID</a></li><li><a href="global.html#CRVideo_CreateMeeting">CRVideo_CreateMeeting</a></li><li><a href="global.html#CRVideo_CreatMediaObj">CRVideo_CreatMediaObj</a></li><li><a href="global.html#CRVideo_CreatScreenShareObj">CRVideo_CreatScreenShareObj</a></li><li><a href="global.html#CRVideo_CreatVideoObj">CRVideo_CreatVideoObj</a></li><li><a href="global.html#CRVideo_Delboardelement">CRVideo_Delboardelement</a></li><li><a href="global.html#CRVideo_Deletenetdiskfile">CRVideo_Deletenetdiskfile</a></li><li><a href="global.html#CRVideo_DestroyMeeting">CRVideo_DestroyMeeting</a></li><li><a href="global.html#CRVideo_Downloadnetdiskfile">CRVideo_Downloadnetdiskfile</a></li><li><a href="global.html#CRVideo_ENCODE_TYPE">CRVideo_ENCODE_TYPE</a></li><li><a href="global.html#CRVideo_EnterMeeting">CRVideo_EnterMeeting</a></li><li><a href="global.html#CRVideo_ExitMeeting">CRVideo_ExitMeeting</a></li><li><a href="global.html#CRVideo_GetAllFilesInMediaPath">CRVideo_GetAllFilesInMediaPath</a></li><li><a href="global.html#CRVideo_GetAllMembers">CRVideo_GetAllMembers</a></li><li><a href="global.html#CRVideo_GetAllQueueInfo">CRVideo_GetAllQueueInfo</a></li><li><a href="global.html#CRVideo_GetAllRecordFiles">CRVideo_GetAllRecordFiles</a></li><li><a href="global.html#CRVideo_GetAllTransferInfos">CRVideo_GetAllTransferInfos</a></li><li><a href="global.html#CRVideo_GetAllVideoInfo">CRVideo_GetAllVideoInfo</a></li><li><a href="global.html#CRVideo_GetAudioCfg">CRVideo_GetAudioCfg</a></li><li><a href="global.html#CRVideo_GetAudioMicNames">CRVideo_GetAudioMicNames</a></li><li><a href="global.html#CRVideo_GetAudioSpkNames">CRVideo_GetAudioSpkNames</a></li><li><a href="global.html#CRVideo_GetAudioStatus">CRVideo_GetAudioStatus</a></li><li><a href="global.html#CRVideo_Getcurrentmainpage">CRVideo_Getcurrentmainpage</a></li><li><a href="global.html#CRVideo_Getcurrentsubpage">CRVideo_Getcurrentsubpage</a></li><li><a href="global.html#CRVideo_GetDefaultVideo">CRVideo_GetDefaultVideo</a></li><li><a href="global.html#CRVideo_GetEnableMutiVideo">CRVideo_GetEnableMutiVideo</a></li><li><a href="global.html#CRVideo_GetMainVideo">CRVideo_GetMainVideo</a></li><li><a href="global.html#CRVideo_GetMediacfg">CRVideo_GetMediacfg</a></li><li><a href="global.html#CRVideo_Getmediaimg">CRVideo_Getmediaimg</a></li><li><a href="global.html#CRVideo_Getmediainfo">CRVideo_Getmediainfo</a></li><li><a href="global.html#CRVideo_GetMeetings">CRVideo_GetMeetings</a></li><li><a href="global.html#CRVideo_GetMemberInfo">CRVideo_GetMemberInfo</a></li><li><a href="global.html#CRVideo_GetMemberNickName">CRVideo_GetMemberNickName</a></li><li><a href="global.html#CRVideo_GetMicEnergy">CRVideo_GetMicEnergy</a></li><li><a href="global.html#CRVideo_GetMicVolume">CRVideo_GetMicVolume</a></li><li><a href="global.html#CRVideo_GetNetDiskFileList">CRVideo_GetNetDiskFileList</a></li><li><a href="global.html#CRVideo_GetNetDiskSummary">CRVideo_GetNetDiskSummary</a></li><li><a href="global.html#CRVideo_GetQueueStatus">CRVideo_GetQueueStatus</a></li><li><a href="global.html#CRVideo_GetQueuingInfo">CRVideo_GetQueuingInfo</a></li><li><a href="global.html#CRVideo_GetRecDuration">CRVideo_GetRecDuration</a></li><li><a href="global.html#CRVideo_GetRecFileSize">CRVideo_GetRecFileSize</a></li><li><a href="global.html#CRVideo_GetScreenShareCfg">CRVideo_GetScreenShareCfg</a></li><li><a href="global.html#CRVideo_GetServerAddr">CRVideo_GetServerAddr</a></li><li><a href="global.html#CRVideo_GetServingQueues">CRVideo_GetServingQueues</a></li><li><a href="global.html#CRVideo_GetSessionInfo">CRVideo_GetSessionInfo</a></li><li><a href="global.html#CRVideo_GetShareScreenDecodeImg">CRVideo_GetShareScreenDecodeImg</a></li><li><a href="global.html#CRVideo_GetSpeakerVolume">CRVideo_GetSpeakerVolume</a></li><li><a href="global.html#CRVideo_GetTransferInfo">CRVideo_GetTransferInfo</a></li><li><a href="global.html#CRVideo_GetUserStatus">CRVideo_GetUserStatus</a></li><li><a href="global.html#CRVideo_GetVideoCfg">CRVideo_GetVideoCfg</a></li><li><a href="global.html#CRVideo_GetVideoImg">CRVideo_GetVideoImg</a></li><li><a href="global.html#CRVideo_GetVideoStatus">CRVideo_GetVideoStatus</a></li><li><a href="global.html#CRVideo_GetVideoWallMode">CRVideo_GetVideoWallMode</a></li><li><a href="global.html#CRVideo_GetWatchableVideos">CRVideo_GetWatchableVideos</a></li><li><a href="global.html#CRVideo_GiveCtrlRight">CRVideo_GiveCtrlRight</a></li><li><a href="global.html#CRVideo_HTTP_TRANSFER_RESULT">CRVideo_HTTP_TRANSFER_RESULT</a></li><li><a href="global.html#CRVideo_HTTP_TRANSFER_STAT">CRVideo_HTTP_TRANSFER_STAT</a></li><li><a href="global.html#CRVideo_HungupCall">CRVideo_HungupCall</a></li><li><a href="global.html#CRVideo_Init2">CRVideo_Init2</a></li><li><a href="global.html#CRVideo_InitBoardPageDat">CRVideo_InitBoardPageDat</a></li><li><a href="global.html#CRVideo_InitQueueDat">CRVideo_InitQueueDat</a></li><li><a href="global.html#CRVideo_IsUserInMeeting">CRVideo_IsUserInMeeting</a></li><li><a href="global.html#CRVideo_KEY_MSG_TYPE">CRVideo_KEY_MSG_TYPE</a></li><li><a href="global.html#CRVideo_Login">CRVideo_Login</a></li><li><a href="global.html#CRVideo_Logout">CRVideo_Logout</a></li><li><a href="global.html#CRVideo_MAIN_PAGE_TYPE">CRVideo_MAIN_PAGE_TYPE</a></li><li><a href="global.html#CRVideo_MakeNetDiskFileID">CRVideo_MakeNetDiskFileID</a></li><li><a href="global.html#CRVideo_ModifyBoardElement">CRVideo_ModifyBoardElement</a></li><li><a href="global.html#CRVideo_MOUSE_KEY_TYPE">CRVideo_MOUSE_KEY_TYPE</a></li><li><a href="global.html#CRVideo_MOUSE_MSG_TYPE">CRVideo_MOUSE_MSG_TYPE</a></li><li><a href="global.html#CRVideo_OpenMic">CRVideo_OpenMic</a></li><li><a href="global.html#CRVideo_OpenVideo">CRVideo_OpenVideo</a></li><li><a href="global.html#CRVideo_PausePlayMedia">CRVideo_PausePlayMedia</a></li><li><a href="global.html#CRVideo_PlaybackRecordFile">CRVideo_PlaybackRecordFile</a></li><li><a href="global.html#CRVideo_PluginVersion">CRVideo_PluginVersion</a></li><li><a href="global.html#CRVideo_REC_DATATYPE">CRVideo_REC_DATATYPE</a></li><li><a href="global.html#CRVideo_REC_VCONTENT_TYPE">CRVideo_REC_VCONTENT_TYPE</a></li><li><a href="global.html#CRVideo_RECORD_AUDIO_TYPE">CRVideo_RECORD_AUDIO_TYPE</a></li><li><a href="global.html#CRVideo_RECORD_STATE">CRVideo_RECORD_STATE</a></li><li><a href="global.html#CRVideo_RECORD_VIDEO_TYPE">CRVideo_RECORD_VIDEO_TYPE</a></li><li><a href="global.html#CRVideo_RECORD_VLAYOUT">CRVideo_RECORD_VLAYOUT</a></li><li><a href="global.html#CRVideo_RefreshAllQueueStatus">CRVideo_RefreshAllQueueStatus</a></li><li><a href="global.html#CRVideo_RejectAssignUser">CRVideo_RejectAssignUser</a></li><li><a href="global.html#CRVideo_RejectCall">CRVideo_RejectCall</a></li><li><a href="global.html#CRVideo_ReleaseCtrlRight">CRVideo_ReleaseCtrlRight</a></li><li><a href="global.html#CRVideo_RemoveFromFileMgr">CRVideo_RemoveFromFileMgr</a></li><li><a href="global.html#CRVideo_ReqAssignUser">CRVideo_ReqAssignUser</a></li><li><a href="global.html#CRVideo_RmTransferInfo">CRVideo_RmTransferInfo</a></li><li><a href="global.html#CRVideo_SdkPath">CRVideo_SdkPath</a></li><li><a href="global.html#CRVideo_SendBuffer">CRVideo_SendBuffer</a></li><li><a href="global.html#CRVideo_SendCmd">CRVideo_SendCmd</a></li><li><a href="global.html#CRVideo_SendFile">CRVideo_SendFile</a></li><li><a href="global.html#CRVideo_SendIMmsg">CRVideo_SendIMmsg</a></li><li><a href="global.html#CRVideo_SendKeyCtrlMsg">CRVideo_SendKeyCtrlMsg</a></li><li><a href="global.html#CRVideo_SendMouseCtrlMsg">CRVideo_SendMouseCtrlMsg</a></li><li><a href="global.html#CRVideo_SetAllAudioClose">CRVideo_SetAllAudioClose</a></li><li><a href="global.html#CRVideo_SetAudioCfg">CRVideo_SetAudioCfg</a></li><li><a href="global.html#CRVideo_SetCustomizeScreenImg">CRVideo_SetCustomizeScreenImg</a></li><li><a href="global.html#CRVideo_SetDefaultVideo">CRVideo_SetDefaultVideo</a></li><li><a href="global.html#CRVideo_SetDNDStatus">CRVideo_SetDNDStatus</a></li><li><a href="global.html#CRVideo_SetEnableMutiVideo">CRVideo_SetEnableMutiVideo</a></li><li><a href="global.html#CRVideo_SetFileUploadRate">CRVideo_SetFileUploadRate</a></li><li><a href="global.html#CRVideo_SetMainVideo">CRVideo_SetMainVideo</a></li><li><a href="global.html#CRVideo_SetMediacfg">CRVideo_SetMediacfg</a></li><li><a href="global.html#CRVideo_SetMediaplaypos">CRVideo_SetMediaplaypos</a></li><li><a href="global.html#CRVideo_SetMicVolume">CRVideo_SetMicVolume</a></li><li><a href="global.html#CRVideo_Setmousehotspot">CRVideo_Setmousehotspot</a></li><li><a href="global.html#CRVideo_SetNetDiskTransportPause">CRVideo_SetNetDiskTransportPause</a></li><li><a href="global.html#CRVideo_SetPicResource">CRVideo_SetPicResource</a></li><li><a href="global.html#CRVideo_SetRecordFileEncrypt">CRVideo_SetRecordFileEncrypt</a></li><li><a href="global.html#CRVideo_SetRecordUploadCfg">CRVideo_SetRecordUploadCfg</a></li><li><a href="global.html#CRVideo_SetRecordVideos">CRVideo_SetRecordVideos</a></li><li><a href="global.html#CRVideo_SetScreenShareCfg">CRVideo_SetScreenShareCfg</a></li><li><a href="global.html#CRVideo_SetServerAddr">CRVideo_SetServerAddr</a></li><li><a href="global.html#CRVideo_SetSpeakerVolume">CRVideo_SetSpeakerVolume</a></li><li><a href="global.html#CRVideo_SetVideoCfg">CRVideo_SetVideoCfg</a></li><li><a href="global.html#CRVideo_Setvideowallmode">CRVideo_Setvideowallmode</a></li><li><a href="global.html#CRVideo_StartGetAudioPCM">CRVideo_StartGetAudioPCM</a></li><li><a href="global.html#CRVideo_StartPlayMedia">CRVideo_StartPlayMedia</a></li><li><a href="global.html#CRVideo_StartQueuing">CRVideo_StartQueuing</a></li><li><a href="global.html#CRVideo_StartQueuing2">CRVideo_StartQueuing2</a></li><li><a href="global.html#CRVideo_StartRecordIng">CRVideo_StartRecordIng</a></li><li><a href="global.html#CRVideo_StartScreenShare">CRVideo_StartScreenShare</a></li><li><a href="global.html#CRVideo_StartService">CRVideo_StartService</a></li><li><a href="global.html#CRVideo_StartTransferFile">CRVideo_StartTransferFile</a></li><li><a href="global.html#CRVideo_StartUserStatusNotify">CRVideo_StartUserStatusNotify</a></li><li><a href="global.html#CRVideo_STOP_REASON">CRVideo_STOP_REASON</a></li><li><a href="global.html#CRVideo_StopGetAudioPCM">CRVideo_StopGetAudioPCM</a></li><li><a href="global.html#CRVideo_StopPlayMedia">CRVideo_StopPlayMedia</a></li><li><a href="global.html#CRVideo_StopQueuing">CRVideo_StopQueuing</a></li><li><a href="global.html#CRVideo_StopRecord">CRVideo_StopRecord</a></li><li><a href="global.html#CRVideo_StopScreenShare">CRVideo_StopScreenShare</a></li><li><a href="global.html#CRVideo_StopService">CRVideo_StopService</a></li><li><a href="global.html#CRVideo_StopUserStatusNotify">CRVideo_StopUserStatusNotify</a></li><li><a href="global.html#CRVideo_Switchtopage">CRVideo_Switchtopage</a></li><li><a href="global.html#CRVideo_ToolBarUI">CRVideo_ToolBarUI</a></li><li><a href="global.html#CRVideo_Uninit">CRVideo_Uninit</a></li><li><a href="global.html#CRVideo_Uploadnetdiskfile">CRVideo_Uploadnetdiskfile</a></li><li><a href="global.html#CRVideo_UploadRecordFile">CRVideo_UploadRecordFile</a></li><li><a href="global.html#CRVideo_UploadRecordFile2">CRVideo_UploadRecordFile2</a></li><li><a href="global.html#CRVideo_VIDEO_FORMAT">CRVideo_VIDEO_FORMAT</a></li><li><a href="global.html#CRVideo_VIDEO_SHOW_SIZE">CRVideo_VIDEO_SHOW_SIZE</a></li><li><a href="global.html#CRVideo_VIDEO_WH_RATE">CRVideo_VIDEO_WH_RATE</a></li><li><a href="global.html#CRVideo_VIDEOLAYOUTMODE">CRVideo_VIDEOLAYOUTMODE</a></li><li><a href="global.html#CRVideo_VSTATUS">CRVideo_VSTATUS</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 3.4.3</a> on Mon Jan 29 2018 16:01:43 GMT+0800 (中国标准时间)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
